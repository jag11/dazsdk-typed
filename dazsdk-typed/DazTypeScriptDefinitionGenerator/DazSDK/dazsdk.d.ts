declare class QObject {
    objectName: string;
    name: string;
    destroyed(obj?: QObject): void;
    deleteLater(): void;
    inherits(string: QString): boolean;
    className(): string;
}
declare class QWidget extends QPaintDevice {
    color0: number;
    color1: number;
    black: number;
    white: number;
    darkGray: number;
    gray: number;
    lightGray: number;
    red: number;
    green: number;
    blue: number;
    cyan: number;
    magenta: number;
    yellow: number;
    darkRed: number;
    darkGreen: number;
    darkBlue: number;
    darkCyan: number;
    darkMagenta: number;
    darkYellow: number;
    transparent: number;
    NoModifier: number;
    ShiftModifier: number;
    ControlModifier: number;
    AltModifier: number;
    MetaModifier: number;
    KeypadModifier: number;
    GroupSwitchModifier: number;
    KeyboardModifierMask: number;
    NoButton: number;
    LeftButton: number;
    RightButton: number;
    MidButton: number;
    MiddleButton: number;
    XButton1: number;
    XButton2: number;
    MouseButtonMask: number;
    Horizontal: number;
    Vertical: number;
    NoFocus: number;
    TabFocus: number;
    ClickFocus: number;
    StrongFocus: number;
    WheelFocus: number;
    AscendingOrder: number;
    DescendingOrder: number;
    AlignLeft: number;
    AlignLeading: number;
    AlignRight: number;
    AlignTrailing: number;
    AlignHCenter: number;
    AlignJustify: number;
    AlignAbsolute: number;
    AlignHorizontal_Mask: number;
    AlignTop: number;
    AlignBottom: number;
    AlignVCenter: number;
    AlignVertical_Mask: number;
    AlignCenter: number;
    ElideLeft: number;
    ElideRight: number;
    ElideMiddle: number;
    ElideNone: number;
    Widget: number;
    Window: number;
    Dialog: number;
    Sheet: number;
    Drawer: number;
    Popup: number;
    Tool: number;
    ToolTip: number;
    SplashScreen: number;
    Desktop: number;
    SubWindow: number;
    WindowType_Mask: number;
    MSWindowsFixedSizeDialogHint: number;
    MSWindowsOwnDC: number;
    X11BypassWindowManagerHint: number;
    FramelessWindowHint: number;
    WindowTitleHint: number;
    WindowSystemMenuHint: number;
    WindowMinimizeButtonHint: number;
    WindowMaximizeButtonHint: number;
    WindowMinMaxButtonsHint: number;
    WindowContextHelpButtonHint: number;
    WindowShadeButtonHint: number;
    WindowStaysOnTopHint: number;
    CustomizeWindowHint: number;
    WindowStaysOnBottomHint: number;
    WindowCloseButtonHint: number;
    MacWindowToolBarButtonHint: number;
    BypassGraphicsProxyWidget: number;
    WindowOkButtonHint: number;
    WindowCancelButtonHint: number;
    WindowSoftkeysVisibleHint: number;
    WindowSoftkeysRespondHint: number;
    WMouseNoMask: number;
    WDestructiveClose: number;
    WStaticContents: number;
    WGroupLeader: number;
    WShowModal: number;
    WNoMousePropagation: number;
    WType_TopLevel: number;
    WType_Dialog: number;
    WType_Popup: number;
    WType_Desktop: number;
    WType_Mask: number;
    WStyle_Customize: number;
    WStyle_NormalBorder: number;
    WStyle_DialogBorder: number;
    WStyle_NoBorder: number;
    WStyle_Title: number;
    WStyle_SysMenu: number;
    WStyle_Minimize: number;
    WStyle_Maximize: number;
    WStyle_MinMax: number;
    WStyle_Tool: number;
    WStyle_StaysOnTop: number;
    WStyle_ContextHelp: number;
    WPaintDesktop: number;
    WPaintClever: number;
    WX11BypassWM: number;
    WWinOwnDC: number;
    WMacSheet: number;
    WMacDrawer: number;
    WStyle_Splash: number;
    WNoAutoErase: number;
    WRepaintNoErase: number;
    WNorthWestGravity: number;
    WType_Modal: number;
    WStyle_Dialog: number;
    WStyle_NoBorderEx: number;
    WResizeNoErase: number;
    WMacNoSheet: number;
    WindowNoState: number;
    WindowMinimized: number;
    WindowMaximized: number;
    WindowFullScreen: number;
    WindowActive: number;
    WA_Disabled: number;
    WA_UnderMouse: number;
    WA_MouseTracking: number;
    WA_ContentsPropagated: number;
    WA_OpaquePaintEvent: number;
    WA_NoBackground: number;
    WA_StaticContents: number;
    WA_LaidOut: number;
    WA_PaintOnScreen: number;
    WA_NoSystemBackground: number;
    WA_UpdatesDisabled: number;
    WA_Mapped: number;
    WA_MacNoClickThrough: number;
    WA_PaintOutsidePaintEvent: number;
    WA_InputMethodEnabled: number;
    WA_WState_Visible: number;
    WA_WState_Hidden: number;
    WA_ForceDisabled: number;
    WA_KeyCompression: number;
    WA_PendingMoveEvent: number;
    WA_PendingResizeEvent: number;
    WA_SetPalette: number;
    WA_SetFont: number;
    WA_SetCursor: number;
    WA_NoChildEventsFromChildren: number;
    WA_WindowModified: number;
    WA_Resized: number;
    WA_Moved: number;
    WA_PendingUpdate: number;
    WA_InvalidSize: number;
    WA_MacBrushedMetal: number;
    WA_MacMetalStyle: number;
    WA_CustomWhatsThis: number;
    WA_LayoutOnEntireRect: number;
    WA_OutsideWSRange: number;
    WA_GrabbedShortcut: number;
    WA_TransparentForMouseEvents: number;
    WA_PaintUnclipped: number;
    WA_SetWindowIcon: number;
    WA_NoMouseReplay: number;
    WA_DeleteOnClose: number;
    WA_RightToLeft: number;
    WA_SetLayoutDirection: number;
    WA_NoChildEventsForParent: number;
    WA_ForceUpdatesDisabled: number;
    WA_WState_Created: number;
    WA_WState_CompressKeys: number;
    WA_WState_InPaintEvent: number;
    WA_WState_Reparented: number;
    WA_WState_ConfigPending: number;
    WA_WState_Polished: number;
    WA_WState_DND: number;
    WA_WState_OwnSizePolicy: number;
    WA_WState_ExplicitShowHide: number;
    WA_ShowModal: number;
    WA_MouseNoMask: number;
    WA_GroupLeader: number;
    WA_NoMousePropagation: number;
    WA_Hover: number;
    WA_InputMethodTransparent: number;
    WA_QuitOnClose: number;
    WA_KeyboardFocusChange: number;
    WA_AcceptDrops: number;
    WA_DropSiteRegistered: number;
    WA_ForceAcceptDrops: number;
    WA_WindowPropagation: number;
    WA_NoX11EventCompression: number;
    WA_TintedBackground: number;
    WA_X11OpenGLOverlay: number;
    WA_AlwaysShowToolTips: number;
    WA_MacOpaqueSizeGrip: number;
    WA_SetStyle: number;
    WA_SetLocale: number;
    WA_MacShowFocusRect: number;
    WA_MacNormalSize: number;
    WA_MacSmallSize: number;
    WA_MacMiniSize: number;
    WA_LayoutUsesWidgetRect: number;
    WA_StyledBackground: number;
    WA_MSWindowsUseDirect3D: number;
    WA_CanHostQMdiSubWindowTitleBar: number;
    WA_MacAlwaysShowToolWindow: number;
    WA_StyleSheet: number;
    WA_ShowWithoutActivating: number;
    WA_X11BypassTransientForHint: number;
    WA_NativeWindow: number;
    WA_DontCreateNativeAncestors: number;
    WA_MacVariableSize: number;
    WA_DontShowOnScreen: number;
    WA_X11NetWmWindowTypeDesktop: number;
    WA_X11NetWmWindowTypeDock: number;
    WA_X11NetWmWindowTypeToolBar: number;
    WA_X11NetWmWindowTypeMenu: number;
    WA_X11NetWmWindowTypeUtility: number;
    WA_X11NetWmWindowTypeSplash: number;
    WA_X11NetWmWindowTypeDialog: number;
    WA_X11NetWmWindowTypeDropDownMenu: number;
    WA_X11NetWmWindowTypePopupMenu: number;
    WA_X11NetWmWindowTypeToolTip: number;
    WA_X11NetWmWindowTypeNotification: number;
    WA_X11NetWmWindowTypeCombo: number;
    WA_X11NetWmWindowTypeDND: number;
    WA_MacFrameworkScaled: number;
    WA_SetWindowModality: number;
    WA_WState_WindowOpacitySet: number;
    WA_TranslucentBackground: number;
    WA_AcceptTouchEvents: number;
    WA_WState_AcceptedTouchBeginEvent: number;
    WA_TouchPadAcceptSingleTouchEvents: number;
    WA_MergeSoftkeys: number;
    WA_MergeSoftkeysRecursively: number;
    WA_LockPortraitOrientation: number;
    WA_LockLandscapeOrientation: number;
    WA_AutoOrientation: number;
    WA_X11DoNotAcceptFocus: number;
    WA_SymbianNoSystemRotation: number;
    WA_MacNoShadow: number;
    WA_AttributeCount: number;
    AA_ImmediateWidgetCreation: number;
    AA_MSWindowsUseDirect3DByDefault: number;
    AA_DontShowIconsInMenus: number;
    AA_NativeWindows: number;
    AA_DontCreateNativeWidgetSiblings: number;
    AA_MacPluginApplication: number;
    AA_DontUseNativeMenuBar: number;
    AA_MacDontSwapCtrlAndMeta: number;
    AA_S60DontConstructApplicationPanes: number;
    AA_S60DisablePartialScreenInputMode: number;
    AA_X11InitThreads: number;
    AA_CaptureMultimediaKeys: number;
    AA_AttributeCount: number;
    ColorMode_Mask: number;
    AutoColor: number;
    ColorOnly: number;
    MonoOnly: number;
    AlphaDither_Mask: number;
    ThresholdAlphaDither: number;
    OrderedAlphaDither: number;
    DiffuseAlphaDither: number;
    NoAlpha: number;
    Dither_Mask: number;
    DiffuseDither: number;
    OrderedDither: number;
    ThresholdDither: number;
    DitherMode_Mask: number;
    AutoDither: number;
    PreferDither: number;
    AvoidDither: number;
    NoOpaqueDetection: number;
    NoFormatConversion: number;
    TransparentMode: number;
    OpaqueMode: number;
    Key_Escape: number;
    Key_Tab: number;
    Key_Backtab: number;
    Key_Backspace: number;
    Key_Return: number;
    Key_Enter: number;
    Key_Insert: number;
    Key_Delete: number;
    Key_Pause: number;
    Key_Print: number;
    Key_SysReq: number;
    Key_Clear: number;
    Key_Home: number;
    Key_End: number;
    Key_Left: number;
    Key_Up: number;
    Key_Right: number;
    Key_Down: number;
    Key_PageUp: number;
    Key_PageDown: number;
    Key_Shift: number;
    Key_Control: number;
    Key_Meta: number;
    Key_Alt: number;
    Key_CapsLock: number;
    Key_NumLock: number;
    Key_ScrollLock: number;
    Key_F1: number;
    Key_F2: number;
    Key_F3: number;
    Key_F4: number;
    Key_F5: number;
    Key_F6: number;
    Key_F7: number;
    Key_F8: number;
    Key_F9: number;
    Key_F10: number;
    Key_F11: number;
    Key_F12: number;
    Key_F13: number;
    Key_F14: number;
    Key_F15: number;
    Key_F16: number;
    Key_F17: number;
    Key_F18: number;
    Key_F19: number;
    Key_F20: number;
    Key_F21: number;
    Key_F22: number;
    Key_F23: number;
    Key_F24: number;
    Key_F25: number;
    Key_F26: number;
    Key_F27: number;
    Key_F28: number;
    Key_F29: number;
    Key_F30: number;
    Key_F31: number;
    Key_F32: number;
    Key_F33: number;
    Key_F34: number;
    Key_F35: number;
    Key_Super_L: number;
    Key_Super_R: number;
    Key_Menu: number;
    Key_Hyper_L: number;
    Key_Hyper_R: number;
    Key_Help: number;
    Key_Direction_L: number;
    Key_Direction_R: number;
    Key_Space: number;
    Key_Any: number;
    Key_Exclam: number;
    Key_QuoteDbl: number;
    Key_NumberSign: number;
    Key_Dollar: number;
    Key_Percent: number;
    Key_Ampersand: number;
    Key_Apostrophe: number;
    Key_ParenLeft: number;
    Key_ParenRight: number;
    Key_Asterisk: number;
    Key_Plus: number;
    Key_Comma: number;
    Key_Minus: number;
    Key_Period: number;
    Key_Slash: number;
    Key_0: number;
    Key_1: number;
    Key_2: number;
    Key_3: number;
    Key_4: number;
    Key_5: number;
    Key_6: number;
    Key_7: number;
    Key_8: number;
    Key_9: number;
    Key_Colon: number;
    Key_Semicolon: number;
    Key_Less: number;
    Key_Equal: number;
    Key_Greater: number;
    Key_Question: number;
    Key_At: number;
    Key_A: number;
    Key_B: number;
    Key_C: number;
    Key_D: number;
    Key_E: number;
    Key_F: number;
    Key_G: number;
    Key_H: number;
    Key_I: number;
    Key_J: number;
    Key_K: number;
    Key_L: number;
    Key_M: number;
    Key_N: number;
    Key_O: number;
    Key_P: number;
    Key_Q: number;
    Key_R: number;
    Key_S: number;
    Key_T: number;
    Key_U: number;
    Key_V: number;
    Key_W: number;
    Key_X: number;
    Key_Y: number;
    Key_Z: number;
    Key_BracketLeft: number;
    Key_Backslash: number;
    Key_BracketRight: number;
    Key_AsciiCircum: number;
    Key_Underscore: number;
    Key_QuoteLeft: number;
    Key_BraceLeft: number;
    Key_Bar: number;
    Key_BraceRight: number;
    Key_AsciiTilde: number;
    Key_nobreakspace: number;
    Key_exclamdown: number;
    Key_cent: number;
    Key_sterling: number;
    Key_currency: number;
    Key_yen: number;
    Key_brokenbar: number;
    Key_section: number;
    Key_diaeresis: number;
    Key_copyright: number;
    Key_ordfeminine: number;
    Key_guillemotleft: number;
    Key_notsign: number;
    Key_hyphen: number;
    Key_registered: number;
    Key_macron: number;
    Key_degree: number;
    Key_plusminus: number;
    Key_twosuperior: number;
    Key_threesuperior: number;
    Key_acute: number;
    Key_mu: number;
    Key_paragraph: number;
    Key_periodcentered: number;
    Key_cedilla: number;
    Key_onesuperior: number;
    Key_masculine: number;
    Key_guillemotright: number;
    Key_onequarter: number;
    Key_onehalf: number;
    Key_threequarters: number;
    Key_questiondown: number;
    Key_Agrave: number;
    Key_Aacute: number;
    Key_Acircumflex: number;
    Key_Atilde: number;
    Key_Adiaeresis: number;
    Key_Aring: number;
    Key_AE: number;
    Key_Ccedilla: number;
    Key_Egrave: number;
    Key_Eacute: number;
    Key_Ecircumflex: number;
    Key_Ediaeresis: number;
    Key_Igrave: number;
    Key_Iacute: number;
    Key_Icircumflex: number;
    Key_Idiaeresis: number;
    Key_ETH: number;
    Key_Ntilde: number;
    Key_Ograve: number;
    Key_Oacute: number;
    Key_Ocircumflex: number;
    Key_Otilde: number;
    Key_Odiaeresis: number;
    Key_multiply: number;
    Key_Ooblique: number;
    Key_Ugrave: number;
    Key_Uacute: number;
    Key_Ucircumflex: number;
    Key_Udiaeresis: number;
    Key_Yacute: number;
    Key_THORN: number;
    Key_ssharp: number;
    Key_division: number;
    Key_ydiaeresis: number;
    Key_AltGr: number;
    Key_Multi_key: number;
    Key_Codeinput: number;
    Key_SingleCandidate: number;
    Key_MultipleCandidate: number;
    Key_PreviousCandidate: number;
    Key_Mode_switch: number;
    Key_Kanji: number;
    Key_Muhenkan: number;
    Key_Henkan: number;
    Key_Romaji: number;
    Key_Hiragana: number;
    Key_Katakana: number;
    Key_Hiragana_Katakana: number;
    Key_Zenkaku: number;
    Key_Hankaku: number;
    Key_Zenkaku_Hankaku: number;
    Key_Touroku: number;
    Key_Massyo: number;
    Key_Kana_Lock: number;
    Key_Kana_Shift: number;
    Key_Eisu_Shift: number;
    Key_Eisu_toggle: number;
    Key_Hangul: number;
    Key_Hangul_Start: number;
    Key_Hangul_End: number;
    Key_Hangul_Hanja: number;
    Key_Hangul_Jamo: number;
    Key_Hangul_Romaja: number;
    Key_Hangul_Jeonja: number;
    Key_Hangul_Banja: number;
    Key_Hangul_PreHanja: number;
    Key_Hangul_PostHanja: number;
    Key_Hangul_Special: number;
    Key_Dead_Grave: number;
    Key_Dead_Acute: number;
    Key_Dead_Circumflex: number;
    Key_Dead_Tilde: number;
    Key_Dead_Macron: number;
    Key_Dead_Breve: number;
    Key_Dead_Abovedot: number;
    Key_Dead_Diaeresis: number;
    Key_Dead_Abovering: number;
    Key_Dead_Doubleacute: number;
    Key_Dead_Caron: number;
    Key_Dead_Cedilla: number;
    Key_Dead_Ogonek: number;
    Key_Dead_Iota: number;
    Key_Dead_Voiced_Sound: number;
    Key_Dead_Semivoiced_Sound: number;
    Key_Dead_Belowdot: number;
    Key_Dead_Hook: number;
    Key_Dead_Horn: number;
    Key_Back: number;
    Key_Forward: number;
    Key_Stop: number;
    Key_Refresh: number;
    Key_VolumeDown: number;
    Key_VolumeMute: number;
    Key_VolumeUp: number;
    Key_BassBoost: number;
    Key_BassUp: number;
    Key_BassDown: number;
    Key_TrebleUp: number;
    Key_TrebleDown: number;
    Key_MediaPlay: number;
    Key_MediaStop: number;
    Key_MediaPrevious: number;
    Key_MediaNext: number;
    Key_MediaRecord: number;
    Key_MediaPause: number;
    Key_MediaTogglePlayPause: number;
    Key_HomePage: number;
    Key_Favorites: number;
    Key_Search: number;
    Key_Standby: number;
    Key_OpenUrl: number;
    Key_LaunchMail: number;
    Key_LaunchMedia: number;
    Key_Launch0: number;
    Key_Launch1: number;
    Key_Launch2: number;
    Key_Launch3: number;
    Key_Launch4: number;
    Key_Launch5: number;
    Key_Launch6: number;
    Key_Launch7: number;
    Key_Launch8: number;
    Key_Launch9: number;
    Key_LaunchA: number;
    Key_LaunchB: number;
    Key_LaunchC: number;
    Key_LaunchD: number;
    Key_LaunchE: number;
    Key_LaunchF: number;
    Key_MonBrightnessUp: number;
    Key_MonBrightnessDown: number;
    Key_KeyboardLightOnOff: number;
    Key_KeyboardBrightnessUp: number;
    Key_KeyboardBrightnessDown: number;
    Key_PowerOff: number;
    Key_WakeUp: number;
    Key_Eject: number;
    Key_ScreenSaver: number;
    Key_WWW: number;
    Key_Memo: number;
    Key_LightBulb: number;
    Key_Shop: number;
    Key_History: number;
    Key_AddFavorite: number;
    Key_HotLinks: number;
    Key_BrightnessAdjust: number;
    Key_Finance: number;
    Key_Community: number;
    Key_AudioRewind: number;
    Key_BackForward: number;
    Key_ApplicationLeft: number;
    Key_ApplicationRight: number;
    Key_Book: number;
    Key_CD: number;
    Key_Calculator: number;
    Key_ToDoList: number;
    Key_ClearGrab: number;
    Key_Close: number;
    Key_Copy: number;
    Key_Cut: number;
    Key_Display: number;
    Key_DOS: number;
    Key_Documents: number;
    Key_Excel: number;
    Key_Explorer: number;
    Key_Game: number;
    Key_Go: number;
    Key_iTouch: number;
    Key_LogOff: number;
    Key_Market: number;
    Key_Meeting: number;
    Key_MenuKB: number;
    Key_MenuPB: number;
    Key_MySites: number;
    Key_News: number;
    Key_OfficeHome: number;
    Key_Option: number;
    Key_Paste: number;
    Key_Phone: number;
    Key_Calendar: number;
    Key_Reply: number;
    Key_Reload: number;
    Key_RotateWindows: number;
    Key_RotationPB: number;
    Key_RotationKB: number;
    Key_Save: number;
    Key_Send: number;
    Key_Spell: number;
    Key_SplitScreen: number;
    Key_Support: number;
    Key_TaskPane: number;
    Key_Terminal: number;
    Key_Tools: number;
    Key_Travel: number;
    Key_Video: number;
    Key_Word: number;
    Key_Xfer: number;
    Key_ZoomIn: number;
    Key_ZoomOut: number;
    Key_Away: number;
    Key_Messenger: number;
    Key_WebCam: number;
    Key_MailForward: number;
    Key_Pictures: number;
    Key_Music: number;
    Key_Battery: number;
    Key_Bluetooth: number;
    Key_WLAN: number;
    Key_UWB: number;
    Key_AudioForward: number;
    Key_AudioRepeat: number;
    Key_AudioRandomPlay: number;
    Key_Subtitle: number;
    Key_AudioCycleTrack: number;
    Key_Time: number;
    Key_Hibernate: number;
    Key_View: number;
    Key_TopMenu: number;
    Key_PowerDown: number;
    Key_Suspend: number;
    Key_ContrastAdjust: number;
    Key_LaunchG: number;
    Key_LaunchH: number;
    Key_MediaLast: number;
    Key_Select: number;
    Key_Yes: number;
    Key_No: number;
    Key_Cancel: number;
    Key_Printer: number;
    Key_Execute: number;
    Key_Sleep: number;
    Key_Play: number;
    Key_Zoom: number;
    Key_Context1: number;
    Key_Context2: number;
    Key_Context3: number;
    Key_Context4: number;
    Key_Call: number;
    Key_Hangup: number;
    Key_Flip: number;
    Key_ToggleCallHangup: number;
    Key_VoiceDial: number;
    Key_LastNumberRedial: number;
    Key_Camera: number;
    Key_CameraFocus: number;
    Key_unknown: number;
    NoArrow: number;
    UpArrow: number;
    DownArrow: number;
    LeftArrow: number;
    RightArrow: number;
    NoPen: number;
    SolidLine: number;
    DashLine: number;
    DotLine: number;
    DashDotLine: number;
    DashDotDotLine: number;
    CustomDashLine: number;
    FlatCap: number;
    SquareCap: number;
    RoundCap: number;
    MPenCapStyle: number;
    MiterJoin: number;
    BevelJoin: number;
    RoundJoin: number;
    SvgMiterJoin: number;
    MPenJoinStyle: number;
    NoBrush: number;
    SolidPattern: number;
    Dense1Pattern: number;
    Dense2Pattern: number;
    Dense3Pattern: number;
    Dense4Pattern: number;
    Dense5Pattern: number;
    Dense6Pattern: number;
    Dense7Pattern: number;
    HorPattern: number;
    VerPattern: number;
    CrossPattern: number;
    BDiagPattern: number;
    FDiagPattern: number;
    DiagCrossPattern: number;
    LinearGradientPattern: number;
    RadialGradientPattern: number;
    ConicalGradientPattern: number;
    TexturePattern: number;
    AbsoluteSize: number;
    RelativeSize: number;
    ArrowCursor: number;
    UpArrowCursor: number;
    CrossCursor: number;
    WaitCursor: number;
    IBeamCursor: number;
    SizeVerCursor: number;
    SizeHorCursor: number;
    SizeBDiagCursor: number;
    SizeFDiagCursor: number;
    SizeAllCursor: number;
    BlankCursor: number;
    SplitVCursor: number;
    SplitHCursor: number;
    PointingHandCursor: number;
    ForbiddenCursor: number;
    WhatsThisCursor: number;
    BusyCursor: number;
    OpenHandCursor: number;
    ClosedHandCursor: number;
    DragCopyCursor: number;
    DragMoveCursor: number;
    DragLinkCursor: number;
    LastCursor: number;
    BitmapCursor: number;
    CustomCursor: number;
    PlainText: number;
    RichText: number;
    AutoText: number;
    LogText: number;
    IgnoreAspectRatio: number;
    KeepAspectRatio: number;
    KeepAspectRatioByExpanding: number;
    LeftDockWidgetArea: number;
    RightDockWidgetArea: number;
    TopDockWidgetArea: number;
    BottomDockWidgetArea: number;
    DockWidgetArea_Mask: number;
    AllDockWidgetAreas: number;
    NoDockWidgetArea: number;
    LeftToolBarArea: number;
    RightToolBarArea: number;
    TopToolBarArea: number;
    BottomToolBarArea: number;
    ToolBarArea_Mask: number;
    AllToolBarAreas: number;
    NoToolBarArea: number;
    TextDate: number;
    ISODate: number;
    SystemLocaleDate: number;
    LocalDate: number;
    LocaleDate: number;
    SystemLocaleShortDate: number;
    SystemLocaleLongDate: number;
    DefaultLocaleShortDate: number;
    DefaultLocaleLongDate: number;
    LocalTime: number;
    UTC: number;
    OffsetFromUTC: number;
    Monday: number;
    Tuesday: number;
    Wednesday: number;
    Thursday: number;
    Friday: number;
    Saturday: number;
    Sunday: number;
    ScrollBarAsNeeded: number;
    ScrollBarAlwaysOff: number;
    ScrollBarAlwaysOn: number;
    FixedColor: number;
    FixedPixmap: number;
    NoBackground: number;
    PaletteForeground: number;
    PaletteButton: number;
    PaletteLight: number;
    PaletteMidlight: number;
    PaletteDark: number;
    PaletteMid: number;
    PaletteText: number;
    PaletteBrightText: number;
    PaletteBase: number;
    PaletteBackground: number;
    PaletteShadow: number;
    PaletteHighlight: number;
    PaletteHighlightedText: number;
    PaletteButtonText: number;
    PaletteLink: number;
    PaletteLinkVisited: number;
    X11ParentRelative: number;
    CaseInsensitive: number;
    CaseSensitive: number;
    TopLeftCorner: number;
    TopRightCorner: number;
    BottomLeftCorner: number;
    BottomRightCorner: number;
    AutoConnection: number;
    DirectConnection: number;
    QueuedConnection: number;
    AutoCompatConnection: number;
    BlockingQueuedConnection: number;
    UniqueConnection: number;
    WidgetShortcut: number;
    WindowShortcut: number;
    ApplicationShortcut: number;
    WidgetWithChildrenShortcut: number;
    OddEvenFill: number;
    WindingFill: number;
    MaskInColor: number;
    MaskOutColor: number;
    NoClip: number;
    ReplaceClip: number;
    IntersectClip: number;
    UniteClip: number;
    ContainsItemShape: number;
    IntersectsItemShape: number;
    ContainsItemBoundingRect: number;
    IntersectsItemBoundingRect: number;
    FastTransformation: number;
    SmoothTransformation: number;
    XAxis: number;
    YAxis: number;
    ZAxis: number;
    NoContextMenu: number;
    DefaultContextMenu: number;
    ActionsContextMenu: number;
    CustomContextMenu: number;
    PreventContextMenu: number;
    ImhNone: number;
    ImhHiddenText: number;
    ImhNoAutoUppercase: number;
    ImhPreferNumbers: number;
    ImhPreferUppercase: number;
    ImhPreferLowercase: number;
    ImhNoPredictiveText: number;
    ImhDigitsOnly: number;
    ImhFormattedNumbersOnly: number;
    ImhUppercaseOnly: number;
    ImhLowercaseOnly: number;
    ImhDialableCharactersOnly: number;
    ImhEmailCharactersOnly: number;
    ImhUrlCharactersOnly: number;
    ImhExclusiveInputMask: number;
    ToolButtonIconOnly: number;
    ToolButtonTextOnly: number;
    ToolButtonTextBesideIcon: number;
    ToolButtonTextUnderIcon: number;
    ToolButtonFollowStyle: number;
    LeftToRight: number;
    RightToLeft: number;
    LayoutDirectionAuto: number;
    CopyAction: number;
    MoveAction: number;
    LinkAction: number;
    ActionMask: number;
    TargetMoveAction: number;
    IgnoreAction: number;
    Unchecked: number;
    PartiallyChecked: number;
    Checked: number;
    NoItemFlags: number;
    ItemIsSelectable: number;
    ItemIsEditable: number;
    ItemIsDragEnabled: number;
    ItemIsDropEnabled: number;
    ItemIsUserCheckable: number;
    ItemIsEnabled: number;
    ItemIsTristate: number;
    MatchExactly: number;
    MatchContains: number;
    MatchStartsWith: number;
    MatchEndsWith: number;
    MatchRegExp: number;
    MatchWildcard: number;
    MatchFixedString: number;
    MatchCaseSensitive: number;
    MatchWrap: number;
    MatchRecursive: number;
    NonModal: number;
    WindowModal: number;
    ApplicationModal: number;
    NoTextInteraction: number;
    TextSelectableByMouse: number;
    TextSelectableByKeyboard: number;
    LinksAccessibleByMouse: number;
    LinksAccessibleByKeyboard: number;
    TextEditable: number;
    TextEditorInteraction: number;
    TextBrowserInteraction: number;
    MinimumSize: number;
    PreferredSize: number;
    MaximumSize: number;
    MinimumDescent: number;
    NSizeHints: number;
    NoGesture: number;
    GestureStarted: number;
    GestureUpdated: number;
    GestureFinished: number;
    GestureCanceled: number;
    TapGesture: number;
    TapAndHoldGesture: number;
    PanGesture: number;
    PinchGesture: number;
    SwipeGesture: number;
    CustomGesture: number;
    LastGestureType: number;
    LogicalMoveStyle: number;
    VisualMoveStyle: number;
    x: number;
    y: number;
    globalX: number;
    globalY: number;
    height: number;
    width: number;
    minHeight: number;
    minWidth: number;
    maxHeight: number;
    maxWidth: number;
    palette: QObject;
    paletteForegroundColor: QObject;
    paletteBackgroundColor: QObject;
    paletteBackgroundPixmap: QObject;
    font: QObject;
    enabled: boolean;
    statusTip: String;
    toolTip: String;
    whatsThis: String;
    constructor(parent?: QWidget);
}
interface ISignal {
    connect(o: DzAction, funcName: QString): any;
    disconnect(): void;
}
declare class DzApp extends QApplication {
    orgName: string;
    appName: string;
    version: number;
    version64: number;
    versionString: string;
    longVersionString: string;
    Windows: number;
    MacOSX: number;
    WindowsUnknown: number;
    Windows95: number;
    Windows98: number;
    WindowsMe: number;
    Windows2000: number;
    WindowsXP: number;
    Windows2003: number;
    WindowsVista: number;
    Windows7: number;
    Windows8: number;
    Windows8_1: number;
    static MacUnknown: number;
    static Mac10_0: number;
    static Mac10_1: number;
    static Mac10_2: number;
    static Mac10_3: number;
    static Mac10_4: number;
    static Mac10_5: number;
    static Mac10_6: number;
    static Mac10_7: number;
    static Mac10_8: number;
    static Mac10_9: number;
    static Free: number;
    static Standard: number;
    static Advanced: number;
    static Pro: number;
    static Alpha: number;
    static Beta: number;
    static GeneralRelease: number;
    static PublicBuild: number;
    static PrivateBuild: number;
    static DevBuild: number;
    static NoInterface: number;
    static NoInterfaceWithOpenGL: number;
    static FullInterface: number;
    saveStateScript(script: DzScript): void;
    starting(): void;
    closing(): void;
    styleChanged(newStyle: DzStyle): void;
    debugMsg(msg: QString): void;
    warningMsg(msg: QString): void;
    skinChanged(): void;
    styleAboutToChange(): void;
    multiThreadingChanged(onOff: boolean): void;
    eventLoopStarted(): void;
    mouseEvent(): any;
    sceneBuilderRejected(): any;
    sceneBuilderAccepted(): any;
    getTempFilename(): QString;
    getTempRenderFilename(): QString;
    showURL(url: QString): void;
    showInNativeBrowser(): any;
    setLoadSavePath(dir: QString): void;
    statusLine(msg: QString, writeToLog?: boolean): void;
    byteSizeToString(): any;
    log(buffer: QString): void;
    debug(msg: QString): void;
    warning(msg: QString): void;
    flushLogBuffer(): boolean;
    setStyleDefinition(name: QString): boolean;
    setTempPath(tempPath: QString): boolean;
    restoreDefaultTempPath(): void;
    enableMultiThreading(onOff: boolean): void;
    delayedExit(): any;
    platform(): number;
    operatingSystem(): number;
    operatingSystemString(): QString;
    isStarting(): boolean;
    isRunning(): boolean;
    isClosing(): boolean;
    isDeleting(): any;
    isSlave(): boolean;
    writeConfigScript(configScriptFilename: QString): boolean;
    writeConfigScript(configScriptFilename: QString): boolean;
    getInterface(): DzMainWindow;
    getHomePath(): QString;
    getDAZDataPath(): QString;
    getProgramDataPath(): QString;
    getProgramDataAppPath(): any;
    getCommonUserDocumentPath(): any;
    getAppDataPath(): QString;
    getDocumentsPath(): QString;
    getShadersPath(): QString;
    getGeneratedShadersPath(): QString;
    getTempShadersPath(): any;
    getUtilitiesPath(): QString;
    getPluginsPath(): QString;
    getTempPath(): QString;
    getScriptsPath(): QString;
    getGeneratedScriptsPath(): QString;
    getAbsoluteScriptPath(scriptName: QString): QString;
    getResourcesPath(): QString;
    getDocumentationPath(): QString;
    getCurrentAuthor(): DzAuthor;
    getLoadSavePath(): QString;
    getImportMgr(): DzImportMgr;
    getExportMgr(): DzExportMgr;
    getFileIOPresetMgr(): DzFileIOPresetMgr;
    getSaveFilterMgr(): DzSaveFilterMgr;
    getAssetIOMgr(): DzAssetIOMgr;
    getContentMgr(): DzContentMgr;
    getAssetMgr(): DzAssetMgr;
    getAppSettingsMgr(): DzAppSettingsMgr;
    getImageMgr(): DzImageMgr;
    getHelpMgr(): DzHelpMgr;
    getRenderMgr(): DzRenderMgr;
    getTextureConvertorMgr(): DzTextureConvertorMgr;
    getTextureBakerMgr(): DzTextureBakerMgr;
    getMultiMediaMgr(): DzMultiMediaMgr;
    getDeviceMgr(): DzDeviceMgr;
    getCallBackMgr(): DzCallBackMgr;
    getPluginMgr(): DzPluginMgr;
    getAuthenticationMgr(): DzAuthenticationMgr;
    modifierKeyState(): number;
    getStyle(): DzStyle;
    getStyleDefinition(): QString;
    getStyleDefinitionList(): String[];
    isMultiThreadingEnabled(): boolean;
    usingInterface(): boolean;
    getDataFolderName(): QString;
    getDataFolderPathBase(): QString;
    getDataFolderPath(): QString;
    isRegistered(): boolean;
    releaseEdition(): number;
    releaseEditionString(): QString;
    releaseCycle(): any;
    releaseCycleString(): any;
    bitArchitecture(): number;
    bitArchitectureString(): QString;
    getDialogParent(): QWidget;
    breadCrumbTrackingIsActive(): boolean;
    setBreadCrumbTrackingActive(onOff: boolean): void;
    sendSourceBreadCrumb(id: number, shortmsg: QString, numeric: QString, longMsg: QString): void;
    sendSourceBreadCrumb(id: number, shortmsg: QString, numeric: QString, longMsg: QString): void;
    sendSourceBreadCrumb(id: number, shortmsg: QString, numeric: QString, longMsg: QString): void;
    sendSourceBreadCrumb(id: number, shortmsg: QString, numeric: QString, longMsg: QString): void;
    setUpBreadCrumbTrackingSignalWatch(obj: QObject, signal: string, id: number): void;
    setUpBreadCrumbTrackingSignalWatch(obj: QObject, signal: string, id: number): void;
    clearDelayedDeleteStack(doProgress: boolean): void;
    addSessionFileLoad(name: QString): void;
    refreshStyleSheet(rereadFromFile: boolean): void;
    refreshStyleSheet(rereadFromFile: boolean): void;
    getSkin(): DzSkin;
    setSkin(fileName: QString): boolean;
    clearSkin(): void;
    createUuid(): QString;
    createDigest(tokens: String[]): QString;
    createDigest(data: number[]): QString;
    createDigest(tokens: String[]): QString;
    createDigest(data: number[]): QString;
    getGraphicsMode(): number;
    releaseCycleSuffix(): any;
    releaseCycleSuffixStripped(): any;
    showSceneBuilder(): any;
    showSceneBuilder(): any;
    showSceneBuilder(): any;
    canShowSceneBuilder(): any;
    canShowSceneBuilder(): any;
    isKeyDown(): any;
    isKeySequenceDown(): any;
}
declare class DzDir extends QObject {
    constructor(path?: QString);
    cd(dir: QString): boolean;
    cdUp(): boolean;
    setPath(path: QString): void;
    relativeFilePath(filePath: QString): ISignal;
    filePath(fp: QString): ISignal;
    absFilePath(filePath: QString): ISignal;
    entryList(filter: QString, filterSpec?: number, sortSpec?: number): QString[];
    entryList(filters: QString[], filterSpec?: number, sortSpec?: number): QString[];
    mkdir(dir?: QString): boolean;
    mkdirs(dirs?: QString): boolean;
    mkpath(path?: QString): boolean;
    rmdir(dir?: QString): boolean;
    rmdirs(dirs?: QString): boolean;
    rmpath(path?: QString): boolean;
    remove(path: QString): boolean;
    rename(oldName: QString, newName: QString): boolean;
    copy(srcFile: QString, destFile: QString): boolean;
    move(srcFile: QString, destFile: QString): boolean;
    fileExists(file: QString): boolean;
    setCurrent(): boolean;
    dirName(): QString;
    path(): QString;
    absPath(): QString;
    canonicalPath(): QString;
    isAbsolute(): boolean;
    isReadable(): boolean;
    isRelative(): boolean;
    isRoot(): boolean;
    exists(): boolean;
    refresh(): void;
    /** var files = dir.getFilesFromDir(["*.log"], false); */
    getFilesFromDir(extensions: QString[], recursive?: boolean): QString[];
    static Dirs: number;
    static Files: number;
    static Drives: number;
    static NoSymLinks: number;
    static AllEntries: number;
    static All: number;
    static TypeMask: number;
    static Readable: number;
    static Writable: number;
    static Executable: number;
    static PermissionMask: number;
    static RWEMask: number;
    static Modified: number;
    static Hidden: number;
    static System: number;
    static AccessMask: number;
    static AllDirs: number;
    static CaseSensitive: number;
    static NoDotAndDotDot: number;
    static NoDot: number;
    static NoDotDot: number;
    static NoFilter: number;
    static Name: number;
    static Time: number;
    static Size: number;
    static Unsorted: number;
    static SortByMask: number;
    static DirsFirst: number;
    static Reversed: number;
    static IgnoreCase: number;
    static DirsLast: number;
    static LocaleAware: number;
    static Type: number;
    static NoSort: number;
}
declare class DzFile extends Q3TextStream {
    static ReadOnly: number;
    static WriteOnly: number;
    static ReadWrite: number;
    static Append: number;
    static Truncate: number;
    static Text: number;
    static Translate: number;
    constructor(file: QString);
    remove(): boolean;
    remove(fileName: QString): boolean;
    fileName(): QString;
    path(): QString;
    absFileName(): QString;
    baseName(): QString;
    extension(): QString;
    exists(): boolean;
    exists(fileName: QString): boolean;
    isReadable(): boolean;
    isWritable(): boolean;
    isHidden(): boolean;
    created(): any;
    lastModified(): any;
    lastRead(): any;
    size(): number;
    sizeStr(): any;
    open(accessMode: number, flags?: number): boolean;
    open(f: any, ioFlags: number, handleFlags: number): boolean;
    close(): void;
    readByte(): number;
    readLines(): String[];
    readByteLine(): any;
    readAll(): any;
    writeByte(byte: number): void;
    write(data: String, length?: number): void;
    writeLine(data: String): void;
    copy(newName: QString): boolean;
    copy(fileName: QString, newName: QString): boolean;
}
declare class DzWidget extends QWidget {
    constructor(parent: DzWidget);
}
declare class DzDialog extends QWidget {
    caption: String;
    orientation: number;
    sizeGripEnabled: boolean;
    getWidget(): any;
    getLayout(): any;
    show(): any;
    hide(): any;
    setFixedSize(): any;
    setFixedWidth(): any;
    setFixedHeight(): any;
    setGeometry(): any;
    getChildrenOfWidget(): any;
    getChildrenOfWidget(): any;
    findChildOfWidget(): any;
    reparent(): any;
    reparent(): any;
    exec(): number;
    close(): any;
    setAcceptButton(button: DzPushButton): any;
    setRejectButton(button: DzPushButton): any;
    setExtension(extension: QWidget): void;
    extension(): QWidget;
    showExtension(obj: boolean): void;
    hideExtension(): any;
    showExtension(obj: boolean): void;
}
declare class DzBox3 extends QObject {
    min: QObject;
    max: QObject;
    minX: number;
    minY: number;
    minZ: number;
    maxX: number;
    maxY: number;
    maxZ: number;
    toString(): any;
    getSize(): number;
    getCenter(): DzVec3;
    getTransformedBox(): any;
    include(box: DzBox3): void;
    include(pnt: DzVec3): void;
    include(pnt: number[]): void;
    translate(): any;
}
declare class DsIntSlider extends DzSlider {
    value: number;
    sensitivity: number;
    min: number;
    max: number;
    indeterminate: boolean;
    displayAsPercent: boolean;
    text: string;
    textEditable: boolean;
    clamped: boolean;
    textVisible: boolean;
    label: string;
    labelVisible: boolean;
}
declare class DsFloatSlider extends DzSlider {
    value: number;
    sensitivity: number;
    min: number;
    max: number;
    indeterminate: boolean;
    displayAsPercent: boolean;
    textEditable: boolean;
    clamped: boolean;
    text: string;
    textVisible: boolean;
    labelVisible: boolean;
    label: string;
}
declare class DzComboBox extends QWidget {
    count: number;
    currentItem: number;
    currentText: string;
    maxVisibleItems: number;
    minimumContentsLength: number;
    insertPolicy: number;
    sizeAdjustPolicy: number;
    /** activated(index: number): ISignal;
      * activated(item: QString): ISignal; */
    activated: ISignal;
    /** currentIndexChanged(index: number): ISignal;
     * currentIndexChanged(item: QString): ISignal;
     */
    currentIndexChanged: ISignal;
    highlighted(index: number): ISignal;
    highlighted(item: QString): ISignal;
    textChanged(item: QString): ISignal;
    addItem(item: QString, data: QString): ISignal;
    addItem(item: QString): ISignal;
    addItems(items: QString[]): ISignal;
    findData(data: QString): ISignal;
    findText(text: QString): ISignal;
    insertItem(index: number, item: QString, data?: QString): ISignal;
    insertItems(index: number, items: QString[]): ISignal;
    insertSeparator(index: number): ISignal;
    itemData(index: number): ISignal;
    itemText(index: number): ISignal;
    removeItem(index: number): ISignal;
    setItemData(index: number, data: QString): ISignal;
    setItemText(index: number, text: QString): ISignal;
    clear(): any;
    insertItem(item: QString): ISignal;
    text(index: number): QString;
    /** text(index: number): ISignal; */
    static NoInsert: number;
    static InsertAtTop: number;
    static InsertAtCurrent: number;
    static InsertAtBottom: number;
    static InsertAfterCurrent: number;
    static InsertBeforeCurrent: number;
    static InsertAlphabetically: number;
    static AdjustToContents: number;
    static AdjustToContentsOnFirstShow: number;
    static AdjustToMinimumContentsLength: number;
    static AdjustToMinimumContentsLengthWithIcon: number;
}
declare class DzGroupBox extends QWidget {
    checkable: boolean;
    checked: boolean;
    flat: boolean;
    title: string;
    columns: number;
    orientation: number;
    insideMargin: number;
    insideSpacing: number;
    margin: number;
    spacing: number;
    clicked(clicked: boolean): ISignal;
    clicked(): any;
    toggled(state: boolean): ISignal;
    addSpace(space: number): ISignal;
}
declare class DzHGroupBox extends DzGroupBox {
}
declare class DzVGroupBox extends DzGroupBox {
}
declare class DzLabel extends QWidget {
    alignment: number;
    hasSelectedText: boolean;
    indent: number;
    openExternalLinks: boolean;
    pixmap: QPixmap;
    scaledContents: boolean;
    selectedText: string;
    text: QString;
    textFormat: number;
    textInteractionFlags: number;
    wordWrap: boolean;
    constructor(parent: DzWidget);
    clear(): any;
    buddy(): any;
    setBuddy(widget: DzWidget): ISignal;
}
declare class DzTextEdit {
    text: string | ((para: number) => string);
    documentTitle: string;
    blockCount: number;
    paragraphs: number;
    lines: number;
    length: number;
    italic: boolean;
    bold: boolean;
    underline: boolean;
    color: QColor;
    linkUnderline: boolean;
    pointSize: number;
    constructor(parent: DzWidget);
    hasSelectedText(): boolean;
    selectedText(): String;
    selectionStart(): number;
    selectionEnd(): number;
    selectionParaStart(): number;
    selectionIndexStart(): number;
    selectionParaEnd(): number;
    selectionIndexEnd(): number;
    append(text: String): void;
    clear(): void;
}
declare class DzLineEdit {
    static Normal: number;
    static NoEcho: number;
    static Password: number;
    static PasswordEchoOnEdit: number;
    acceptableInput: boolean;
    alignment: number;
    cursorPosition: number;
    echoMode: number;
    frame: boolean;
    hasSelectedText: boolean | (() => boolean);
    inputMask: string;
    maxLength: number;
    modified: boolean;
    placeholderText: string;
    readOnly: boolean;
    redoAvailable: boolean;
    selectedText: String | (() => String);
    text: string;
    undoAvailable: boolean;
    constructor(parent: DzWidget);
    lostFocus(): void;
    cursorPositionChanged(p0: number, p1: number): void;
    editingFinished(): any;
    returnPressed(): any;
    selectionChanged(): any;
    textChanged(QString: any): ISignal;
    textEdited(QString: any): ISignal;
    hasAcceptableInput(): any;
    backspace(): any;
    clearModified(): any;
    cursorBackward(mark: boolean, p1?: number): any;
    cursorForward(mark: boolean, p1?: number): any;
    cursorWordBackward(bool: any): ISignal;
    cursorWordForward(bool: any): ISignal;
    del(): void;
    deselect(): void;
    end(mark: boolean): void;
    home(mark: boolean): void;
    selectionStart(): number;
    setSelection(start: number, length: number): void;
    clear(): void;
    copy(): any;
    cut(): void;
    paste(): void;
    redo(): void;
    selectAll(): any;
    undo(): void;
    setDoubleValidator(bottom: number, top: number, decimals: number, scientific?: boolean): void;
    setIntValidator(minimum: number, maximum: number): void;
    setRegExValidator(rx: QString, caseSensitive?: boolean): any;
}
declare class DzListBox extends QWidget {
    count: number;
    currentItem: number;
    currentText: string;
    numColumns: number;
    numItemsVisible: number;
    numRows: number;
    topItem: number;
    selected: number;
    selectionMode: number;
    variableHeight: boolean;
    variableWidth: boolean;
    columnMode: number;
    rowMode: number;
    Single: number;
    Multi: number;
    Extended: number;
    NoSelection: number;
    FixedNumber: number;
    FitToWidth: number;
    FitToHeight: number;
    Variable: number;
    getWidget(): any;
    getLayout(): any;
    show(): any;
    hide(): any;
    setFixedSize(): any;
    setFixedWidth(): any;
    setFixedHeight(): any;
    setGeometry(): any;
    getChildrenOfWidget(): any;
    getChildrenOfWidget(): any;
    findChildOfWidget(): any;
    reparent(): any;
    reparent(): any;
    highlighted(): any;
    highlighted(): any;
    selectionChanged(): any;
    selectionChanged(): any;
    currentChanged(): any;
    clicked(): any;
    clicked(): any;
    pressed(): any;
    pressed(): any;
    doubleClicked(): any;
    returnPressed(): any;
    rightButtonClicked(): any;
    rightButtonPressed(): any;
    mouseButtonPressed(): any;
    mouseButtonClicked(): any;
    contextMenuRequested(): any;
    onItem(): any;
    onViewport(): any;
    clear(): any;
    insertItem(): any;
    removeItem(): any;
    text(): any;
    setSelected(): any;
    isSelected(): any;
    ensureCurrentVisible(): any;
    clearSelection(): any;
    selectAll(): any;
    invertSelection(): any;
    sort(): any;
    sort(): any;
}
declare class DzButton extends QWidget {
    objectName: string;
    x: number;
    y: number;
    globalX: number;
    globalY: number;
    height: number;
    width: number;
    minHeight: number;
    minWidth: number;
    maxHeight: number;
    maxWidth: number;
    palette: QObject;
    paletteForegroundColor: QObject;
    paletteBackgroundColor: QObject;
    paletteBackgroundPixmap: QObject;
    font: QObject;
    enabled: boolean;
    statusTip: QString;
    toolTip: QString;
    whatsThis: QString;
    autoExclusive: boolean;
    autoRepeat: boolean;
    autoRepeatDelay: number;
    autoRepeatInterval: number;
    checkable: boolean;
    down: boolean;
    icon: QObject;
    iconSize: QObject;
    pixmap: QPixmap;
    shortcut: QObject;
    text: string;
    toggleButton: boolean;
    exclusiveToggle: boolean;
    on: boolean;
    toggleState: number;
    toggleType: number;
    checked: boolean;
    getWidget(): any;
    getLayout(): any;
    show(): any;
    hide(): any;
    /**
      * setFixedSize(x: number, y: number): ISignal
      */
    setFixedSize: ISignal;
    /**
      *     setFixedWidth(width: number): ISignal;
      */
    setFixedWidth: ISignal;
    /**
      *     setFixedHeight(height: number): ISignal;
      */
    setFixedHeight: ISignal;
    /**
      *     setGeometry(index: number, int, int, int): ISignal;
      */
    setGeometry: ISignal;
    /**
      *     getChildrenOfWidget(QString): ISignal;
      */
    getChildrenOfWidget: ISignal;
    /**
      *     findChildOfWidget(QString): ISignal;
      */
    findChildOfWidget: ISignal;
    /**
      *     reparent(widget: DzWidget,QPoint, bool): ISignal;;
      */
    reparent: ISignal;
    pressed: ISignal;
    released: ISignal;
    clicked: ISignal;
    /**
      *     toggled(bool): ISignal;
      */
    toggled: ISignal;
    /**
      *     stateChanged(index: number): ISignal;
      */
    stateChanged: ISignal;
    toggle(): any;
    Off: number;
    NoChange: number;
    On: number;
    SingleShot: number;
    Toggle: number;
    Tristate: number;
    inherits(): any;
    name: string;
    className(): any;
}
declare class DzCheckBox extends DzButton {
    tristate: boolean;
}
declare class DzPushButton extends DzButton {
    autoDefault: boolean;
    default: boolean;
    flat: boolean;
    buttonStyle: number;
    buttonTextFormat: number;
    primitive: string;
    downArrowPrimitive: string;
    textStyle: string;
    elideMode: number;
    displayDownArrow: boolean;
    iconMetric: string;
    downArrowMetric: string;
    buttonStyleChanged(buttonStyle: number): ISignal;
    buttonTextFormatChanged(format: number): ISignal;
    primitiveChanged(name: QString): ISignal;
    downArrowPrimitiveChanged(name: QString): ISignal;
    textStyleChanged(style: QString): ISignal;
    elideModeChanged(mode: number): ISignal;
    displayDownArrowChanged(state: boolean): ISignal;
    iconMetricChanged(metric: QString): ISignal;
    downArrowMetricChanged(metric: QString): ISignal;
    setToggleButton(state: boolean): ISignal;
    setCheckable(checkable: boolean): ISignal;
    static BCommand: number;
    static BTool: number;
    static BDefault: number;
    static BBasic: number;
    static BNoFrame: number;
    static BCustom: number;
}
declare class DzRadioButton extends DzButton {
}
declare class DzTabWidget extends QWidget {
    count: number;
    currentPage: number;
    currentIndex: number;
    documentMode: boolean;
    movable: boolean;
    tabPosition: number;
    tabsClosable: boolean;
    usesScrollButtons: boolean;
    currentChanged(index: number): ISignal;
    tabCloseRequested(index: number): ISignal;
    currentChanged(widget: DzWidget): ISignal;
    addTab(widget: DzWidget, name: QString): ISignal;
    clear(): any;
    cornerWidget(): DzWidget;
    currentWidget(): DzWidget;
    indexOf(widget: DzWidget): ISignal;
    insertTab(index: number, widget: DzWidget, name: QString): ISignal;
    isTabEnabled(index: number): ISignal;
    removeTab(index: number): ISignal;
    setCornerWidget(widget: DzWidget): ISignal;
    setTabEnabled(index: number, state: boolean): ISignal;
    setTabText(index: number, text: QString): ISignal;
    setTabToolTip(index: number, text: QString): ISignal;
    setTabWhatsThis(index: number, text: QString): ISignal;
    tabText(index: number): ISignal;
    tabToolTip(index: number): ISignal;
    tabWhatsThis(index: number): ISignal;
    widget(index: number): ISignal;
    setCurrentWidget(widget: DzWidget): ISignal;
    changeTab(widget: DzWidget, text: QString): ISignal;
    currentPageWidget(): DzWidget;
    insertTab(widget: DzWidget, text: QString, index: number): ISignal;
    insertTab(widget: DzWidget, text: QString): ISignal;
    isTabEnabled(widget: DzWidget): ISignal;
    label(index: number): ISignal;
    page(page: number): ISignal;
    removeTabToolTip(widget: DzWidget): ISignal;
    setTabEnabled(widget: DzWidget, state: boolean): ISignal;
    setTabLabel(widget: DzWidget, label: QString): ISignal;
    setTabToolTip(widget: DzWidget, toolTip: QString): ISignal;
    tabLabel(widget: DzWidget): ISignal;
    tabToolTip(widget: DzWidget): ISignal;
    removePage(widget: DzWidget): ISignal;
    setCurrentPage(page: number): ISignal;
    showPage(widget: DzWidget): ISignal;
    static North: number;
    static South: number;
    static West: number;
    static East: number;
}
declare class DzButtonGroup extends QWidget {
    alignment: number;
    checkable: boolean;
    checked: boolean;
    flat: boolean;
    title: string;
    columns: number;
    orientation: number;
    insideMargin: number;
    insideSpacing: number;
    exclusive: boolean;
    radioButtonExclusive: boolean;
    selected: number;
    count: number;
    getWidget(): any;
    getLayout(): any;
    show(): any;
    hide(): any;
    setFixedSize(): any;
    setFixedWidth(): any;
    setFixedHeight(): any;
    setGeometry(): any;
    getChildrenOfWidget(): any;
    getChildrenOfWidget(): any;
    findChildOfWidget(): any;
    reparent(): any;
    reparent(): any;
    clicked(): any;
    clicked(): any;
    toggled(): any;
    addSpace(): any;
    pressed(): any;
    released(): any;
    clicked(): any;
    addButton(obj: QAbstractButton): void;
    addButton(obj: QAbstractButton, id: number): void;
    addButton(obj: QAbstractButton): void;
    addButton(obj: QAbstractButton, id: number): void;
    button(id: number): QAbstractButton;
    buttons(): QAbstractButton[];
    checkedButton(): QAbstractButton;
    id(button: QAbstractButton): number;
    removeButton(obj: QAbstractButton): void;
    insert(): any;
    insert(): any;
    remove(): any;
}
declare class DzHButtonGroup extends DzButtonGroup {
}
declare class DzVButtonGroup extends QWidget {
    alignment: number;
    checkable: boolean;
    checked: boolean;
    flat: boolean;
    title: string;
    columns: number;
    orientation: number;
    insideMargin: number;
    insideSpacing: number;
    exclusive: boolean;
    radioButtonExclusive: boolean;
    selected: number;
    count: number;
    getWidget(): any;
    getLayout(): any;
    show(): any;
    hide(): any;
    setFixedSize(): any;
    setFixedWidth(): any;
    setFixedHeight(): any;
    setGeometry(): any;
    getChildrenOfWidget(): any;
    getChildrenOfWidget(): any;
    findChildOfWidget(): any;
    reparent(): any;
    reparent(): any;
    clicked(): any;
    clicked(): any;
    toggled(): any;
    addSpace(): any;
    pressed(): any;
    released(): any;
    clicked(): any;
    addButton(): any;
    addButton(): any;
    button(): any;
    buttons(): any;
    checkedButton(): any;
    id(): any;
    removeButton(): any;
    insert(): any;
    insert(): any;
    remove(): any;
}
declare enum ScriptFileMode {
    UseExtension,
    TextScriptFile,
    DAZScriptFile,
    EncDAZScriptFile,
}
declare enum ScriptLanguage {
    Unknown,
    DAZScript1,
    DAZScript2,
}
/** Encapsulates a DAZ Script script. */
declare class DzScript extends QObject {
    objectName: string;
    name: string;
    static UseExtension: number;
    static TextScriptFile: number;
    static DAZScriptFile: number;
    static EncDAZScriptFile: number;
    static Unknown: number;
    static DAZScript1: number;
    static DAZScript2: number;
    constructor(name?: string);
    constructor(script: DzScript);
    nameChanged(name: String): any;
    className(): any;
    makePersistent(): any;
    inherits(base: String): any;
    iskindof(kind: String): any;
    getName(): any;
    executeScript(script: DzScript, ...list: String[]): any;
    checkSyntax(): any;
    execute(): any;
    execute(...list: QVariant[]): any;
    call(funcname: String, ...args: QVariant[]): any;
    loadFromFile(filename: String, b: boolean): any;
    loadFromFile(filename: String): any;
    getLastStatus(): any;
    addCode(code: String): any;
    addLines(line: String, value: number): any;
    addLines(String: any): any;
    addLine(String: any, int: any): any;
    addLine(String: any): any;
    setCode(String: any): any;
    makeEncrypted(): any;
    clear(): any;
    setContext(scriptContext: DzScriptContext): any;
    convertToDAZScript2(): any;
    getFilename(): any;
    saveToFile(name: String, scriptFileMode: number, filetype: String): any;
    saveToFile(name: String, scriptFileMode: number): any;
    saveToFile(name: String): any;
    getCode(): any;
    isEmpty(): any;
    isEncrypted(): any;
    wasConverted(scriptLanguage: any): any;
    wasConverted(): any;
    result(): any;
    errorMessage(): any;
    errorLine(): any;
    stackTrace(): any;
    getScriptVersion(): any;
    getScriptType(): any;
    getScriptLanguage(): any;
    getAuthor(): any;
    getShouldReuseInterpreter(): any;
    setReuseInterpreter(bool: any): any;
    evaluate(code: String, context: QObject, compatibilityMode: boolean): any;
    evaluate(code: String, context: QObject): any;
    evaluate(code: String): any;
    isScriptFile(filename: String): any;
    isScriptBinaryFile(filename: String): any;
    isScriptTextFile(filename: String): any;
    isScriptExtension(filename: String): any;
    isScriptBinaryExtension(filename: String): any;
    isScriptTextExtension(filename: String): any;
    getScriptFile(filenameWithoutExtension: String): any;
    addScriptOpenExtensionsToFilter(filter: DzFileFilter): any;
    addScriptSaveExtensionsToFilter(filter: DzFileFilter): any;
    addScriptBinaryExtensionsToFilter(filter: DzFileFilter): any;
    addScriptTextExtensionsToFilter(filter: DzFileFilter, bool: any): any;
    addScriptTextExtensionsToFilter(filter: DzFileFilter): any;
    addScriptOpenExtensionsAsMultipleFilters(filter: DzFileFilter): any;
    addScriptSaveExtensionsAsMultipleFilters(filter: DzFileFilter): any;
    addScriptBinaryExtensionsAsMultipleFilters(filter: DzFileFilter): any;
    addScriptTextExtensionsAsMultipleFilters(filter: DzFileFilter, bool: any): any;
    addScriptTextExtensionsAsMultipleFilters(filter: DzFileFilter): any;
    getScriptExtensions(): any;
    legalizeName(name: String): any;
}
declare class DzScene extends DzBase {
    DefaultMethod: number;
    OpenNew: number;
    MergeFile: number;
    DzObjectsOnly: number;
    DzIncludeLightsFlag: number;
    DzIncludeCamerasFlag: number;
    DzIncludeNonShadowersFlag: number;
    DzIncludeNonVisibleFlag: number;
    DzIncludeAllFlag: number;
    drawnDataChanged(): void;
    nodeSelectionListChanged(): void;
    skeletonSelectionListChanged(): void;
    lightSelectionListChanged(): void;
    cameraSelectionListChanged(): void;
    primarySelectionChanged(node: DzNode): void;
    highlightNodeChanged(node: DzNode): void;
    sceneClearStarting(): void;
    sceneCleared(): void;
    sceneLoadStarting(): void;
    sceneLoaded(): void;
    sceneFilenameChanged(newName: QString): void;
    timeChanging(newTime: DzTime): void;
    timeChanged(time: DzTime): void;
    currentTimeChanged(): any;
    timeStepChanged(time: DzTime): void;
    playRangeChanged(range: DzTimeRange): void;
    animRangeChanged(range: DzTimeRange): void;
    timeSelectionChanged(): void;
    nodeAdded(node: DzNode): void;
    aboutToRemoveNode(node: DzNode): void;
    nodeRemoved(node: DzNode): void;
    nodeListChanged(): void;
    skeletonAdded(node: DzSkeleton): void;
    skeletonRemoved(node: DzSkeleton): void;
    skeletonListChanged(): void;
    lightAdded(node: DzLight): void;
    lightRemoved(node: DzLight): void;
    lightListChanged(): void;
    cameraAdded(node: DzCamera): void;
    cameraRemoved(node: DzCamera): void;
    cameraListChanged(): void;
    wsModifierAdded(modifier: DzWSModifier): void;
    wsModifierRemoved(modifier: DzWSModifier): void;
    wsModifierStackChanged(): void;
    playbackStarted(): void;
    playbackFinished(): void;
    loopPlaybackChanged(onOff: boolean): void;
    aboutToRender(r: DzRenderer): void;
    renderFinished(r: DzRenderer): void;
    materialListChanged(): void;
    materialSelectionChanged(): void;
    sceneSaveStarting(filename: QString): void;
    sceneSaved(filename: QString): void;
    assetModified(): void;
    assetWasSaved(): void;
    sceneTopologyChanged(): any;
    backdropChanged(): any;
    clear(): void;
    isClearing(): boolean;
    isLoading(): boolean;
    isDAZLoading(): boolean;
    setBackdrop(backdrop: DzBackdrop): void;
    setAudio(audio: DzAudioClip, startFrame: number): void;
    setAudio(audio: DzAudioClip, startFrame: number): void;
    addNode(node: DzNode): boolean;
    removeNode(node: DzNode): boolean;
    removeSelected(): void;
    removeAllLights(): void;
    removeAllCameras(): void;
    addWSModifier(modifier: DzWSModifier, index: number): DzError;
    addWSModifier(modifier: DzWSModifier, index: number): DzError;
    removeWSModifier(modifier: DzWSModifier): DzError;
    addDataItem(item: DzSceneData): DzError;
    removeDataItem(item: DzSceneData): DzError;
    update(): void;
    markChanged(): void;
    saveScene(filename: QString): DzError;
    saveScene(filename: QString): DzError;
    loadScene(filename: QString, method: DzOpenMethod): DzError;
    saveThumbnail(filename: QString): void;
    selectAllNodes(onOff: boolean): void;
    selectAllSkeletons(onOff: boolean): void;
    setPrimarySelection(node: DzNode): boolean;
    setHighlightNode(node: DzNode): void;
    beginTimeEdit(): void;
    finishTimeEdit(): void;
    setTime(time: DzTime): void;
    setFrame(frame: number): void;
    stepTime(nFrames: number, forward: boolean): void;
    stepTime(nFrames: number, forward: boolean): void;
    stepTime(nFrames: number, forward: boolean): void;
    setTimeStep(time: DzTime): void;
    setPlayRange(range: DzTimeRange): void;
    setAnimRange(range: DzTimeRange): void;
    play(realtime: boolean): void;
    play(realtime: boolean): void;
    pause(): void;
    loopPlayback(onOff: boolean): void;
    selectAllTime(onOff: boolean): void;
    invalidate(): void;
    getNumStorablesInScene(): number;
    setAssetLoadPath(absolutePath: QString): void;
    getAssetLoadPath(saveToCur: boolean): QString;
    getAssetLoadPath(saveToCur: boolean): QString;
    setPreviewLights(onoff: boolean): void;
    getPreviewLights(): boolean;
    invalidateLightSorting(): any;
    needsSave(): boolean;
    getBackdrop(): DzBackdrop;
    getBoundingBox(flags: number): DzBox3;
    getBoundingBox(flags: number): DzBox3;
    getAudio(): DzAudioClip;
    getAudioStartFrame(): number;
    getFilename(savedTo: boolean): QString;
    getFilename(savedTo: boolean): QString;
    getNumNodes(): number;
    getNumSkeletons(): number;
    getNumLights(): number;
    getNumCameras(): number;
    getNumWSModifiers(): number;
    getNode(which: number): DzNode;
    getNodeList(): QObject[];
    getSkeleton(which: number): DzSkeleton;
    getSkeletonList(): QObject[];
    getLight(which: number): DzLight;
    getLightList(): QObject[];
    getCamera(which: number): DzCamera;
    getCameraList(): QObject[];
    getWSModifier(which: number): DzWSModifier;
    getWSModifierList(): QObject[];
    findNode(name: QString): DzNode;
    findNodeByLabel(label: QString): DzNode;
    findSkeleton(name: QString): DzSkeleton;
    findSkeletonByLabel(label: QString): DzSkeleton;
    findCamera(name: QString): DzCamera;
    findCameraByLabel(label: QString): DzCamera;
    findLight(name: QString): DzLight;
    findLightByLabel(label: QString): DzLight;
    findNodeIndex(node: DzNode): number;
    findSkeletonIndex(skelton: DzSkeleton): number;
    findDataItem(name: QString): DzSceneData;
    getPrimarySelection(): DzNode;
    getNumSelectedNodes(): number;
    getSelectedNode(index: number): DzNode;
    getSelectedNodeList(): DzNode[];
    getNumSelectedSkeletons(): number;
    getSelectedSkeleton(index: number): DzSkeleton;
    getSelectedSkeletonList(): QObject[];
    getNumSelectedLights(): number;
    getSelectedLight(index: number): DzLight;
    getSelectedLightList(): QObject[];
    getNumSelectedCameras(): number;
    getSelectedCamera(index: number): DzCamera;
    getSelectedCameraList(): QObject[];
    getHighlightNode(): DzNode;
    getSortedLightList(): any;
    getTime(): DzTime;
    getFrame(): number;
    getTimeStep(): DzTime;
    isPlaying(): boolean;
    isLoopingEnabled(): boolean;
    getPlayRange(): DzTimeRange;
    getAnimRange(): DzTimeRange;
    getNumSelectedTimeRanges(): number;
    getNumDataItems(): number;
    getDataItem(i: number): DzSceneData;
    getDataItemList(): any;
    getUniqueTopLevelLabel(label: QString, node: DzNode): QString;
    getUniqueTopLevelLabel(label: QString, node: DzNode): QString;
    stripLabelNumber(label: QString): QString;
    clearDebugPoints(): any;
    setDebugPoints(): any;
    setDebugPoints(): any;
    findNodeByElementID(): any;
    findObjectByElementID(): any;
    findShapeByElementID(): any;
    findModifierByElementID(): any;
    findMaterialByElementID(): any;
}
declare class DzNode extends DzElement {
    elementID: number;
    renderPriority: number;
    assetIdAliases: QObject;
    nameAliases: QObject;
    assetId: string;
    propertyListInTreeChanged(): any;
    privatePropertyListInTreeChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    transformChanged(): void;
    selected(node: DzNode, onOff: boolean): void;
    rotationOrderChanged(): void;
    childAdded(child: DzNode): void;
    childRemoved(child: DzNode): void;
    childListChanged(): void;
    objectChanged(node: DzNode, oldObject: DzObject, newObject: DzObject): void;
    drawnDataChanged(): void;
    visibilityChanged(): void;
    selectabilityChanged(): void;
    aboutToBeRemoved(): void;
    removed(): void;
    added(): void;
    hiddenChanged(hidden: boolean): void;
    riggingChanged(): void;
    materialListChanged(): void;
    materialSelectionChanged(): void;
    uvsChanged(): void;
    assetModified(): void;
    assetWasSaved(): void;
    boundBoxInvalidated(): void;
    aboutToDelete(node: DzNode): void;
    inheritScaleChanged(): void;
    materialSelectionSetsChanged(): any;
    childListOrderChanged(): any;
    promoteSelectionChanged(): any;
    topologyChanged(): any;
    objectDuplicateAndSetSignal(): any;
    modifierDuplicateFinished(): any;
    setManipOverColor(color: QColor): void;
    clearManipOverColor(): void;
    finalize(isRender: boolean, allowResChange: boolean): void;
    finalize(isRender: boolean, allowResChange: boolean): void;
    finalize(isRender: boolean, allowResChange: boolean): void;
    select(onOff: boolean): void;
    select(onOff: boolean): void;
    setSelectable(onOff: boolean): void;
    setVisible(onOff: boolean): void;
    setRotationOrder(order: DzRotationOrder): void;
    setObject(object: DzObject): void;
    addNodeChild(child: DzNode, inPlace: boolean): DzError;
    addNodeChild(child: DzNode, inPlace: boolean): DzError;
    removeNodeChild(child: DzNode, inPlace: boolean): DzError;
    removeNodeChild(child: DzNode, inPlace: boolean): DzError;
    removeAllNodeChildren(): void;
    moveNodeChildToIndex(): any;
    moveNodeChildToIndex(): any;
    findChildIndex(): any;
    setWSTransform(tm: DzTime, pos: DzVec3, rot: DzQuat): void;
    setWSTransform(pos: DzVec3, rot: DzQuat): void;
    setWSTransform(tm: DzTime, pos: DzVec3, rot: DzQuat): void;
    setWSTransform(pos: DzVec3, rot: DzQuat): void;
    setWSPos(tm: DzTime, pos: DzVec3): void;
    setWSPos(pos: DzVec3): void;
    setWSPos(tm: DzTime, pos: DzVec3): void;
    setWSPos(pos: DzVec3): void;
    setWSRot(tm: DzTime, rot: DzQuat): void;
    setWSRot(rot: DzQuat): void;
    setWSRot(tm: DzTime, rot: DzQuat): void;
    setWSRot(rot: DzQuat): void;
    setWSScale(tm: DzTime, scale: DzMatrix3): void;
    setWSScale(scale: DzMatrix3): void;
    setWSScale(tm: DzTime, scale: DzMatrix3): void;
    setWSScale(scale: DzMatrix3): void;
    setLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat): void;
    setLocalTransform(pos: DzVec3, rot: DzQuat): void;
    setToolLocalTransform(): any;
    setToolLocalTransform(): any;
    setLocalPos(tm: DzTime, pos: DzVec3): void;
    setLocalPos(pos: DzVec3): void;
    setLocalPos(tm: DzTime, pos: DzVec3): void;
    setLocalPos(pos: DzVec3): void;
    setLocalRot(tm: DzTime, rot: DzQuat): void;
    setLocalRot(rot: DzQuat): void;
    setLocalRot(tm: DzTime, rot: DzQuat): void;
    setLocalRot(rot: DzQuat): void;
    setToolLocalRot(): any;
    setToolLocalRot(): any;
    setLocalScale(tm: DzTime, scale: DzMatrix3): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3, generalScale: number): void;
    setLocalScale(scale: DzMatrix3): void;
    setLocalScale(scale: DzMatrix3, generalScale: number): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3, generalScale: number): void;
    setLocalScale(scale: DzMatrix3): void;
    setLocalScale(scale: DzMatrix3, generalScale: number): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3, generalScale: number): void;
    setLocalScale(scale: DzMatrix3): void;
    setLocalScale(scale: DzMatrix3, generalScale: number): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3): void;
    setLocalScale(tm: DzTime, scale: DzMatrix3, generalScale: number): void;
    setLocalScale(scale: DzMatrix3): void;
    setLocalScale(scale: DzMatrix3, generalScale: number): void;
    setOrientation(orientation: DzQuat, makeDefault: boolean): void;
    setOrientation(orientation: DzQuat, makeDefault: boolean): void;
    setOrientationAngles(): any;
    setOrientationAngles(): any;
    setOrigin(origin: DzVec3, makeDefault: boolean): void;
    setOrigin(origin: DzVec3, makeDefault: boolean): void;
    setEndPoint(endPnt: DzVec3, makeDefault: boolean): void;
    setEndPoint(endPnt: DzVec3, makeDefault: boolean): void;
    adjustOrientation(): any;
    adjustOrientationAngles(): any;
    adjustOrigin(): any;
    adjustEndPoint(): any;
    clearTransformData(range: DzTimeRange): void;
    clearAllTransformData(): void;
    setInheritScale(onOff: boolean): void;
    setPointAtTarget(target: DzNode): void;
    setPointAtStrength(strength: number): void;
    setHidden(onOff: boolean): void;
    setPromoteSelection(): any;
    setRenderPriority(priority: number): void;
    setRenderPriority(priority: number): void;
    setRenderPriority(priority: number): void;
    setRenderPriority(priority: number): void;
    setVisibleInRender(onOff: boolean): void;
    setSelectionMap(map: DzSelectionMap): void;
    setPresentation(pres: DzPresentation): void;
    setPreviewBox(box: DzOrientedBox3): void;
    invalidateBoundingBoxes(checkSkeleton: boolean): void;
    invalidateBoundingBoxes(checkSkeleton: boolean): void;
    getSkeleton(): DzSkeleton;
    getRotationOrder(): DzRotationOrder;
    isSelected(): boolean;
    isSelectable(): boolean;
    isVisible(): boolean;
    isVisibileInRender(): boolean;
    castsShadow(): boolean;
    getObject(): DzObject;
    getNumNodeChildren(): number;
    getNodeChild(i: number): DzNode;
    getNodeChildren(scanHierarchy: boolean): QObject[];
    getNodeChildren(nodes: DzNode[], scanHierarchy: boolean): void;
    getNodeChildren(scanHierarchy: boolean): QObject[];
    getNodeChildren(nodes: DzNode[], scanHierarchy: boolean): void;
    isNodeChild(node: DzNode): boolean;
    findNodeChild(name: QString, scanHierarchy: boolean): DzNode;
    findNodeChild(name: QString, scanHierarchy: boolean): DzNode;
    findNodeChildByAssetID(assetID: QString, scanHierarchy: boolean, checkSource: boolean): DzNode;
    findNodeChildByAssetID(assetID: QString, scanHierarchy: boolean, checkSource: boolean): DzNode;
    findNodeChildByAssetID(assetID: QString, scanHierarchy: boolean, checkSource: boolean): DzNode;
    findNodeChildByNameOrAlias(): any;
    findNodeChildByNameOrAlias(): any;
    getNodeParent(): DzNode;
    isRootNode(): boolean;
    getLocalBoundingBox(): DzBox3;
    getLocalOrientedBox(): DzOrientedBox3;
    getWSBoundingBox(): DzBox3;
    getWSOrientedBox(): DzOrientedBox3;
    getPreviewBox(): DzOrientedBox3;
    getWSTransform(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getWSTransform(): DzMatrix3;
    getWSTransform(tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, defaults: boolean): void;
    getWSTransform(pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;
    getWSTransform(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getWSTransform(): DzMatrix3;
    getWSTransform(tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, defaults: boolean): void;
    getWSTransform(pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;
    getWSTransform(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getWSTransform(): DzMatrix3;
    getWSTransform(tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, defaults: boolean): void;
    getWSTransform(pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;
    getToolWSTransform(): any;
    getToolWSTransform(): any;
    getWSPos(tm: DzTime, defaultVal: boolean): DzVec3;
    getWSPos(): DzVec3;
    getWSPos(tm: DzTime, defaultVal: boolean): DzVec3;
    getWSPos(): DzVec3;
    getWSPos(tm: DzTime, defaultVal: boolean): DzVec3;
    getWSPos(): DzVec3;
    getWSRot(tm: DzTime, defaultVal: boolean): DzQuat;
    getWSRot(): DzQuat;
    getWSRot(tm: DzTime, defaultVal: boolean): DzQuat;
    getWSRot(): DzQuat;
    getWSRot(tm: DzTime, defaultVal: boolean): DzQuat;
    getWSRot(): DzQuat;
    getToolWSRot(): any;
    getToolWSRot(): any;
    getWSScale(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getWSScale(): DzMatrix3;
    getWSScale(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getWSScale(): DzMatrix3;
    getWSScale(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getWSScale(): DzMatrix3;
    getLocalTransform(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getLocalTransform(): DzMatrix3;
    getLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, defaults: boolean): void;
    getLocalTransform(pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;
    getLocalTransform(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getLocalTransform(): DzMatrix3;
    getLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, defaults: boolean): void;
    getLocalTransform(pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;
    getLocalTransform(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getLocalTransform(): DzMatrix3;
    getLocalTransform(tm: DzTime, pos: DzVec3, rot: DzQuat, scale: DzMatrix3, defaults: boolean): void;
    getLocalTransform(pos: DzVec3, rot: DzQuat, scale: DzMatrix3): void;
    getLocalPos(tm: DzTime, defaultVal: boolean): DzVec3;
    getLocalPos(): DzVec3;
    getLocalPos(tm: DzTime, defaultVal: boolean): DzVec3;
    getLocalPos(): DzVec3;
    getLocalPos(tm: DzTime, defaultVal: boolean): DzVec3;
    getLocalPos(): DzVec3;
    getLocalRot(tm: DzTime, defaultVal: boolean): DzQuat;
    getLocalRot(): DzQuat;
    getLocalRot(tm: DzTime, defaultVal: boolean): DzQuat;
    getLocalRot(): DzQuat;
    getLocalRot(tm: DzTime, defaultVal: boolean): DzQuat;
    getLocalRot(): DzQuat;
    getToolLocalRot(): any;
    getToolLocalRot(): any;
    getLocalScale(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getLocalScale(): DzMatrix3;
    getLocalScale(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getLocalScale(): DzMatrix3;
    getLocalScale(tm: DzTime, defaultVal: boolean): DzMatrix3;
    getLocalScale(): DzMatrix3;
    getOrientation(defaultVal: boolean): DzQuat;
    getOrientation(defaultVal: boolean): DzQuat;
    updateOrientation(): void;
    getOrigin(defaultVal: boolean): DzVec3;
    getOrigin(defaultVal: boolean): DzVec3;
    getEndPoint(defaultVal: boolean): DzVec3;
    getEndPoint(defaultVal: boolean): DzVec3;
    getSelectionMap(): DzSelectionMap;
    getXPosControl(): DzFloatProperty;
    getYPosControl(): DzFloatProperty;
    getZPosControl(): DzFloatProperty;
    getXRotControl(): DzFloatProperty;
    getYRotControl(): DzFloatProperty;
    getZRotControl(): DzFloatProperty;
    getScaleControl(): DzFloatProperty;
    getXScaleControl(): DzFloatProperty;
    getYScaleControl(): DzFloatProperty;
    getZScaleControl(): DzFloatProperty;
    getSelectabilityControl(): DzBoolProperty;
    getVisibilityControl(): DzBoolProperty;
    getRenderVisibilityControl(): DzBoolProperty;
    getShadowControl(): DzBoolProperty;
    getRenderPriorityControl(): DzEnumProperty;
    getPointAtControl(): DzNumericNodeProperty;
    getOriginXControl(): DzFloatProperty;
    getOriginYControl(): DzFloatProperty;
    getOriginZControl(): DzFloatProperty;
    getEndXControl(): DzFloatProperty;
    getEndYControl(): DzFloatProperty;
    getEndZControl(): DzFloatProperty;
    getOrientXControl(): DzFloatProperty;
    getOrientYControl(): DzFloatProperty;
    getOrientZControl(): DzFloatProperty;
    inheritsScale(): boolean;
    isHidden(): boolean;
    isInScene(): any;
    isSelectionPromoted(): any;
    getRenderPriority(): number;
    getPresentation(): DzPresentation;
    getSelectionNode(): any;
    isBoneSelectingNode(): any;
    setInvisibleByGroup(yesNo: boolean): void;
    setUnselectableByGroup(yesNo: boolean): void;
    invisibleByGroup(): boolean;
    unselectableByGroup(): boolean;
    getWeightMapHandler(): any;
    doObjectDuplicateAndSet(): any;
    isEditorNode(): any;
    getToolXRotControl(): any;
    getToolYRotControl(): any;
    getToolZRotControl(): any;
    invalidateCache(): void;
    selectionMapModified(): void;
    updateTransform(): void;
    updateVis(): void;
    updateRenderable(): void;
    invalidateOrientation(): any;
    objectDuplicateAndSet(): any;
    handleRendererModeChanged(): any;
}
declare class DzMainWindow extends QMainWindow {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    animated: boolean;
    dockNestingEnabled: boolean;
    alwaysOnTop: boolean;
    toolTipsEnabled: boolean;
    AnimatedDocks: number;
    AllowNestedDocks: number;
    AllowTabbedDocks: number;
    ForceTabbedDocks: number;
    VerticalTabs: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    started(): void;
    aboutToClose(): void;
    alwaysOnTopChanged(onOff: boolean): void;
    uiLockedChanged(): void;
    doDirectoryDialog(caption: QString, dir: QString): boolean;
    doDirectoryDialog(caption: QString, dir: QString): boolean;
    doFileDialog(open: boolean, title: QString, startWith: QString): boolean;
    doFileDialog(open: boolean, title: QString, startWith: QString): boolean;
    doFileDialog(open: boolean, title: QString, startWith: QString): boolean;
    doOpenFilesDialog(title: QString, startWith: QString): boolean;
    doOpenFilesDialog(title: QString, startWith: QString): boolean;
    doOpenFilesDialog(title: QString, startWith: QString): boolean;
    doFileDialog(open: boolean, title: QString, startWith: QString): boolean;
    doFileDialog(open: boolean, title: QString, startWith: QString): boolean;
    doFileDialog(open: boolean, title: QString, startWith: QString): boolean;
    doOpenFilesDialog(title: QString, startWith: QString): boolean;
    doOpenFilesDialog(title: QString, startWith: QString): boolean;
    doOpenFilesDialog(title: QString, startWith: QString): boolean;
    displayPrompt(msg: QString, millisec: number): void;
    displayPrompt(msg: QString, millisec: number): void;
    removePrompt(): void;
    repaintActive3DViewport(): void;
    doImageDialog(open: boolean, filename: QString, parent: QWidget): boolean;
    doImageDialog(open: boolean, filename: QString, parent: QWidget): boolean;
    doImageDialog(open: boolean, filename: QString, parent: QWidget): boolean;
    doTextureFolderDialog(filename: QString, parent: QWidget): boolean;
    doTextureFolderDialog(filename: QString, parent: QWidget): boolean;
    doTextureFolderDialog(filename: QString, parent: QWidget): boolean;
    doVideoClipSaveDialog(filename: QString, parent: QWidget): boolean;
    doVideoClipSaveDialog(filename: QString, parent: QWidget): boolean;
    doVideoClipSaveDialog(filename: QString, parent: QWidget): boolean;
    doAudioClipOpenDialog(filename: QString, parent: QWidget): boolean;
    doAudioClipOpenDialog(filename: QString, parent: QWidget): boolean;
    doAudioClipOpenDialog(filename: QString, parent: QWidget): boolean;
    doFileOpen(parent: QWidget): boolean;
    doFileOpen(parent: QWidget): boolean;
    doFileMerge(parent: QWidget): boolean;
    doFileMerge(parent: QWidget): boolean;
    doFileSave(parent: QWidget): boolean;
    doFileSave(parent: QWidget): boolean;
    doFileSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doFileSaveAs(parent: QWidget, startWith: QString): boolean;
    doDAZSave(parent: QWidget): boolean;
    doDAZSave(parent: QWidget): boolean;
    doDAZSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(finalFileName: QString, parent: QWidget, startWith: QString): boolean;
    doDAZSaveAs(parent: QWidget, startWith: QString): boolean;
    doFileImport(parent: QWidget): boolean;
    doFileImport(parent: QWidget): boolean;
    doGeometryImport(shape: DzShape, parent: QWidget): boolean;
    doGeometryImport(shape: DzShape, parent: QWidget): boolean;
    doFileExport(parent: QWidget): boolean;
    doFileExport(parent: QWidget): boolean;
    doImageOpen(parent: QWidget): QImage;
    doImageOpen(parent: QWidget): QImage;
    doImageSaveAs(image: QImage, filename: QString, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, filename: QString, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, filename: QString, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, filename: QString, parent: QWidget): boolean;
    doImageSaveAs(image: QImage, parent: QWidget): boolean;
    doVideoClipSaveAs(clip: DzVideoClip, parent: QWidget): boolean;
    doVideoClipSaveAs(clip: DzVideoClip, parent: QWidget): boolean;
    doNewFile(): boolean;
    askSaveChanges(): boolean;
    askTurnOffLimits(): boolean;
    checkExistingFile(name: QString): boolean;
    goFullScreen(): void;
    exitFullScreen(): void;
    isUILocked(): boolean;
    restoreUILockState(): void;
    setUILocked(onOff: boolean, storeSetting: boolean): void;
    setUILocked(onOff: boolean, storeSetting: boolean): void;
    clearUIPopUp(): void;
    getUIPopUp(): DzUIPopUpWgt;
    showUIPopUpWgt(filename: QString, posWgt: QWidget): DzUIPopUpWgt;
    showUIPopUpWgt(filename: QString, posWgt: QWidget): DzUIPopUpWgt;
    toggleUIPopUpWgt(filename: QString, posWgt: QWidget): DzUIPopUpWgt;
    toggleUIPopUpWgt(filename: QString, posWgt: QWidget): DzUIPopUpWgt;
    positionUIPopUp(posWgt: QWidget): void;
    getTopDockArea(): DzDockArea;
    getBottomDockArea(): DzDockArea;
    getLeftDockArea(): DzDockArea;
    getRightDockArea(): DzDockArea;
    getCenterDockArea(): any;
    dockArea(pos: QPoint): DzDockArea;
    getViewportMgr(): DzViewportMgr;
    getActionMgr(): DzActionMgr;
    getPaneMgr(): DzPaneMgr;
    getInteractiveLessonMgr(): any;
    showHomeDlg(): any;
}
declare class DzAuthor extends QObject {
    email: string;
    url: string;
    valid: boolean;
    toString(): any;
}
declare class DzImportMgr extends QObject {
    fileImportStarting(): void;
    fileImported(): void;
    readFile(filename: QString, importerIdx?: number, filter?: DzFileLoadFilter): DzError;
    readFile(filename: QString, importerIdx?: number, options?: DzFileIOSettings, filter?: DzFileLoadFilter): DzError;
    readGeometry(filename: QString, shape: DzShape, importerIdx: number): DzError;
    readGeometry(filename: QString, shape: DzShape, importerIdx: number, options: DzFileIOSettings): DzError;
    readGeometry(filename: QString, importerIdx: number): DzShape;
    readGeometry(filename: QString, importerIdx: number, options: DzFileIOSettings): DzShape;
    readGeometry(filename: QString, shape: DzShape, importerIdx: number): DzError;
    readGeometry(filename: QString, shape: DzShape, importerIdx: number, options: DzFileIOSettings): DzError;
    readGeometry(filename: QString, importerIdx: number): DzShape;
    readGeometry(filename: QString, importerIdx: number, options: DzFileIOSettings): DzShape;
    readGeometry(filename: QString, shape: DzShape, importerIdx: number): DzError;
    readGeometry(filename: QString, shape: DzShape, importerIdx: number, options: DzFileIOSettings): DzError;
    readGeometry(filename: QString, importerIdx: number): DzShape;
    readGeometry(filename: QString, importerIdx: number, options: DzFileIOSettings): DzShape;
    isImporting(): boolean;
    getImportPath(): QString;
    setImportPath(path: QString): void;
    getImportFileName(): QString;
    setImportFileName(fileName: QString): void;
    getNumImporters(): number;
    getImporter(i: number): DzImporter;
    canImport(filename: QString): boolean;
    findImporterIndex(filename: QString): number;
    findImporter(filename: QString): DzImporter;
    findImporterByClassName(className: QString): DzImporter;
    makeImportFileFilter(filter: DzFileFilter): void;
    makeImportFileFilter(filter: DzFileFilter): void;
    makeImportFileFilter(filter: DzFileFilter): void;
    makeGeometryFileFilter(filter: DzFileFilter): void;
    makeGeometryFileFilter(filter: DzFileFilter): void;
    makeGeometryFileFilter(filter: DzFileFilter): void;
}
declare class DzExportMgr extends QObject {
    fileExportStarting(): void;
    fileExported(): void;
    exportFile(fileName: QString, exporterIndex: number): DzError;
    exportFile(fileName: QString, exporterIndex: number, options: DzFileIOSettings): DzError;
    exportFile(fileName: QString, exporterIndex: number): DzError;
    exportFile(fileName: QString, exporterIndex: number, options: DzFileIOSettings): DzError;
    getExportPath(): QString;
    setExportPath(path: QString): void;
    isExporting(): boolean;
    getNumExporters(): number;
    getExporter(i: number): DzExporter;
    canExport(filename: QString): boolean;
    findExporterIndex(filename: QString): number;
    findExporter(filename: QString): DzExporter;
    findExporterByClassName(className: QString): DzExporter;
    makeExportFileFilter(filter: DzFileFilter): void;
    makeExportFileFilter(filter: DzFileFilter): void;
}
declare class DzFileIOPresetMgr extends QObject {
    presetLoadFinished(): void;
    presetRemoved(presetName: QString, className: QString): void;
    presetAdded(presetName: QString, className: QString): void;
    getAvailablePresets(className: QString): String[];
    getAvailablePresets(className: QString): String[];
    getUserPresets(className: QString): String[];
    getUserPresets(className: QString): String[];
    getSystemPresets(className: QString): String[];
    getSystemPresets(className: QString): String[];
    getAvailableClasses(presetName: QString): String[];
    isUserPreset(presetName: QString): boolean;
    isSystemPreset(presetName: QString): boolean;
    presetExists(presetName: QString, className: QString): boolean;
    presetExists(id: number, className: QString): boolean;
    presetExists(presetName: QString, className: QString): boolean;
    presetExists(id: number, className: QString): boolean;
    presetExists(presetName: QString, className: QString): boolean;
    presetExists(id: number, className: QString): boolean;
    presetExists(presetName: QString, className: QString): boolean;
    presetExists(id: number, className: QString): boolean;
    saveUserPreset(presetName: QString, className: QString, keepCommonSettings: boolean, overwrite: boolean, settings: DzFileIOSettings): boolean;
    removeUserPreset(presetName: QString, className: QString): boolean;
    getPresetName(id: number, className: QString): QString;
    getPresetName(id: number, className: QString): QString;
    getPresetID(presetName: QString, className: QString): number;
    getPresetID(presetName: QString, className: QString): number;
    getSpecificSettings(presetName: QString, className: QString, settings: DzFileIOSettings): boolean;
    getCommonSettings(presetName: QString, settings: DzFileIOSettings): boolean;
    getCommonSettings(presetName: QString, className: QString, settings: DzFileIOSettings): boolean;
    getCommonSettings(presetName: QString, settings: DzFileIOSettings): boolean;
    getCommonSettings(presetName: QString, className: QString, settings: DzFileIOSettings): boolean;
    getAllSettings(presetName: QString, className: QString, settings: DzFileIOSettings): boolean;
    getSpecificDefaults(className: QString, settings: DzFileIOSettings): boolean;
    getCommonDefaults(className: QString, settings: DzFileIOSettings): boolean;
    getAllDefaults(className: QString, settings: DzFileIOSettings): boolean;
    getAllCurrentSettings(className: QString, settings: DzFileIOSettings): boolean;
    getCurrentCommonSettings(className: QString, settings: DzFileIOSettings): boolean;
    getCurrentSpecificSettings(className: QString, settings: DzFileIOSettings): boolean;
    getCommonApplicationDefaults(settings: DzFileIOSettings): void;
    getCustomPresetLabel(): QString;
    getLateralAxisKey(): QString;
    getVerticalAxisKey(): QString;
    getDepthAxisKey(): QString;
    getInvertLateralAxisKey(): QString;
    getInvertVerticalAxisKey(): QString;
    getInvertDepthAxisKey(): QString;
    getScaleKey(): QString;
}
declare class DzSaveFilterMgr extends QObject {
    UseExtension: number;
    TextScriptFile: number;
    DAZScriptFile: number;
    EncDAZScriptFile: number;
    writeFile(mode: number, fileName: QString, filterName: QString): DzError;
    writeFile(mode: number, fileName: QString, filterName: QString): DzError;
    doSave(filterIndex: number, dir: QString): DzError;
    doSave(filterIndex: number, dir: QString): DzError;
    getSavePath(): QString;
    getNumFilters(): number;
    getFilterName(i: number): QString;
    getFilter(i: number): DzSaveFilter;
    findFilter(className: QString): number;
}
declare class DzAssetIOMgr extends QObject {
    DefaultMethod: number;
    OpenNew: number;
    MergeFile: number;
    assetImportStarting(): void;
    assetImported(): void;
    assetSaved(): void;
    doLoad(filePath: QString, open: DzOpenMethod, filter: DzFileLoadFilter): DzError;
    doLoad(filePath: QString, open: DzOpenMethod, filter: DzFileLoadFilter): DzError;
    doLoad(filePath: QString, open: DzOpenMethod, filter: DzFileLoadFilter): DzError;
    doScopedLoad(): any;
    doScopedLoad(): any;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSave(filter: DzAssetIOFilter, filePath: QString, saveOnly: boolean, dir: QString): DzError;
    doSave(filterIndex: number): DzError;
    doSave(filterIndex: number, filePath: QString, dir: QString, category: QString): DzError;
    doSaveWithOptions(filter: DzAssetIOFilter, options: DzFileIOSettings, saveOnly: boolean): DzError;
    doSaveWithOptions(filter: DzAssetIOFilter, options: DzFileIOSettings, saveOnly: boolean): DzError;
    doSaveWithOptions(filter: DzAssetIOFilter, options: DzFileIOSettings, saveOnly: boolean): DzError;
    doSaveWithOptions(filter: DzAssetIOFilter, options: DzFileIOSettings, saveOnly: boolean): DzError;
    doSaveWithOptions(filter: DzAssetIOFilter, options: DzFileIOSettings, saveOnly: boolean): DzError;
    doSceneSave(filePath: QString, category: QString): DzError;
    doSceneSave(filePath: QString, category: QString): DzError;
    doSceneSaveAs(): DzError;
    doSceneSaveAs(filePath: QString, startingDir: QString, category: QString): DzError;
    doSceneSaveAs(): DzError;
    doSceneSaveAs(filePath: QString, startingDir: QString, category: QString): DzError;
    doSceneSaveAs(): DzError;
    doSceneSaveAs(filePath: QString, startingDir: QString, category: QString): DzError;
    doSceneSaveAs(): DzError;
    doSceneSaveAs(filePath: QString, startingDir: QString, category: QString): DzError;
    getSavePath(): QString;
    getLoadPath(): QString;
    getDSONAssetCachePath(): QString;
    setDSONAssetCachePath(cacheFullPath: QString): void;
    getDefaultDSONAssetCachePath(): QString;
    getNumFilters(): number;
    getFilterName(i: number): QString;
    getFilter(i: number): DzAssetIOFilter;
    findFilter(className: QString): number;
}
declare class DzContentMgr extends DzBase {
    startupScene: string;
    autoRefresh: boolean;
    showBuiltInContent: boolean;
    maxRecentFiles: number;
    NativeDirs: number;
    PoserDirs: number;
    ImportDirs: number;
    BuiltInDirs: number;
    NativeAndBuiltInDirs: number;
    AllDirs: number;
    contentDirectoryListChanged(): void;
    importDirectoryListChanged(): void;
    poserDirectoryListChanged(): void;
    mdlDirectoryListChanged(): any;
    folderTreeChanged(): void;
    autoRefreshChanged(onOff: boolean): void;
    startupSceneChanged(filename: QString): void;
    onNewSceneChanged(filename: QString): void;
    newFileCreated(filename: QString): void;
    recentFileListChanged(): any;
    loadScriptStarting(): any;
    loadScriptFinished(): any;
    scriptLoadStarting(): any;
    scriptLoadFailed(): any;
    scriptStarting(): any;
    scriptFailed(): any;
    scriptFinished(): any;
    setUseDatabaseSearch(useDatabase: boolean): void;
    setCheckCompatibilityOn(useCheckCompatibility: boolean): void;
    usingDatabaseSearch(): boolean;
    usingCheckCompatibility(): boolean;
    doContentSearch(): boolean;
    clearRecentFileList(): any;
    addRecentFile(): any;
    getRecentFileList(): any;
    addContentDirectory(directory: QString, saveSetting: boolean): void;
    addContentDirectory(directory: QString, saveSetting: boolean): void;
    addImportDirectory(directory: QString, saveSetting: boolean): void;
    addImportDirectory(directory: QString, saveSetting: boolean): void;
    addPoserDirectory(directory: QString, saveSetting: boolean): void;
    addPoserDirectory(directory: QString, saveSetting: boolean): void;
    addMDLDirectory(): any;
    addMDLDirectory(): any;
    removeContentDirectory(directory: QString): boolean;
    removeAllContentDirectories(): void;
    removeImportDirectory(directory: QString): boolean;
    removeAllImportDirectories(): void;
    removePoserDirectory(directory: QString): boolean;
    removeAllPoserDirectories(): void;
    removeMDLDirectory(): any;
    removeAllMDLDirectories(): any;
    refresh(reloadIcons: boolean): void;
    refresh(reloadIcons: boolean): void;
    openFile(filename: QString, merge: boolean): boolean;
    openFile(filename: QString, merge: boolean): boolean;
    mergeFiles(filenames: String[]): boolean;
    shouldMerge(): any;
    openNativeFile(filename: QString, isMerge: boolean): boolean;
    openNativeFile(filename: QString, isMerge: boolean): boolean;
    importFile(path: QString): boolean;
    fileCreated(filename: QString): void;
    contentDirectoryIsMapped(): any;
    poserDirectoryIsMapped(dirPath: QString): boolean;
    importDirectoryIsMapped(): any;
    mdlDirectoryIsMapped(): any;
    getContentPath(node: DzNode): QString;
    getRelativePath(absolutePath: QString, useImportFolders: boolean): QString;
    getRelativePath(folderPath: QString, absolutePath: QString): QString;
    getRelativePaths(absolutePath: QString, useImportFolders: boolean): String[];
    getMappedPath(folderPath: QString, path: QString, isRelative: boolean): QString;
    getMappedPath(path: QString, useImportFolders: boolean, isRelative: boolean): QString;
    getAbsolutePath(folderPath: QString, relativePath: QString): QString;
    getAbsolutePath(relativePath: QString, useImportFolders: boolean, perferredPath: QString): QString;
    getAbsolutePath(folderPath: QString, relativePath: QString): QString;
    getAbsolutePath(relativePath: QString, useImportFolders: boolean, perferredPath: QString): QString;
    getAbsolutePaths(relativePath: QString, useImportFolders: boolean): String[];
    getPoserAbsolutePath(relativePath: QString): QString;
    getNativeAbsolutePath(relativePath: QString): QString;
    getImportAbsolutePath(relativePath: QString): QString;
    getMDLAbsolutePath(): any;
    getMDLRelativePath(): any;
    getBuiltInContentDirectory(): DzContentFolder;
    getBuiltInContentDirectoryPath(): QString;
    getNumContentDirectories(): number;
    getContentDirectory(which: number): DzContentFolder;
    getContentDirectoryPath(which: number): QString;
    getNumImportDirectories(): number;
    getImportDirectory(which: number): DzContentFolder;
    getImportDirectoryPath(which: number): QString;
    getNumPoserDirectories(): number;
    getPoserDirectory(which: number): DzContentFolder;
    getPoserDirectoryPath(which: number): QString;
    getNumMDLDirectories(): any;
    getMDLDirectory(): any;
    getMDLDirectoryPath(): any;
    getNumBuiltInMDLDirectories(): any;
    getBuiltInMDLDirectory(): any;
    getBuiltInMDLDirectoryPath(): any;
    findFile(partialPath: QString, dirTypes?: number): QString;
    findBaseDirectory(path: QString, useImportFolders: boolean): DzContentFolder;
    doDirNumCheck(): void;
    getContentReplaceMgr(): DzContentReplaceMgr;
    getDefaultContentDir(): QString;
    saveAllMappedDirectories(): void;
    isDirectoryMapped(directory: QString): boolean;
    reloadSceneAssetsFromSource(settings: DzSettings): boolean;
    reloadAssetsFromSource(sceneNode: DzNode, settings: DzSettings, srcFilePath: QString): DzError;
    reloadAssetsFromSource(sceneNodes: DzNode[], settings: DzSettings, absolutePath: QString): DzError;
    reloadAssetsFromSource(sceneNode: DzNode, settings: DzSettings, srcFilePath: QString): DzError;
    reloadAssetsFromSource(sceneNodes: DzNode[], settings: DzSettings, absolutePath: QString): DzError;
    reloadAssetsFromSource(sceneNode: DzNode, settings: DzSettings, srcFilePath: QString): DzError;
    reloadAssetsFromSource(sceneNodes: DzNode[], settings: DzSettings, absolutePath: QString): DzError;
    findSourcePathForNode(sceneNode: DzNode): QString;
}
declare class DzAssetMgr extends DzBase {
    None: number;
    WholeWord: number;
    RegExp: number;
    NativeScenes: number;
    NativeScripts: number;
    PoserFigures: number;
    PoserPoses: number;
    PoserProps: number;
    PoserHair: number;
    PoserFaces: number;
    PoserLights: number;
    PoserCameras: number;
    PoserHands: number;
    PoserMaterials: number;
    PoserScenes: number;
    ImportFiles: number;
    AllNativeFiles: number;
    NoNativeFilesMask: number;
    AllPoserFiles: number;
    NoPoserFilesMask: number;
    AllFiles: number;
    DefaultOptions: number;
    categoryUpdate(idPath: QVariant[]): void;
    containerUpdate(idPath: QVariant[]): void;
    markFoldersContainingNewContentChanged(): void;
    showLargeIconsChanged(): void;
    showExtensionsChanged(): void;
    showAssetToolTipChanged(): void;
    itemsPerPageChanged(newPerPage: number): void;
    typeListChanged(): void;
    compatibilityBaseListChanged(): void;
    basePathsChanged(): void;
    storeListChanged(): void;
    getPoserDirs(): DzTopLevelAssetContainer;
    getContentDirs(): DzTopLevelAssetContainer;
    getImportDirs(): DzTopLevelAssetContainer;
    getProducts(): DzTopLevelAssetContainer;
    getCategories(): DzCategoryAssetContainer;
    saveUserDBData(directory: QString, prefix: QString): DzError;
    getMetaHost(): QString;
    setCompatibilityBase(uri: QString, compatibility: DzDBCompatibilityBaseTable, isVendor: boolean): boolean;
    getStudioDirID(): QVariant;
    getImportDirID(): QVariant;
    getPoserDirID(): QVariant;
    getCategoriesID(): QVariant;
    getProductsID(): QVariant;
    setTopLevelPoserNameOnContainer(name: QString, cont: DzFolderAssetContainer): void;
    normalizePath(type: QString, relative: boolean): QString;
    normalizePath(type: QString, relative: boolean): QString;
    escapeSearchTerm(searchTerm: QString): QString;
    getRealPathCasing(path: QString, search: QString): QString;
    getStudioExcludes(): String[];
    updateUserMetadata(): void;
    emitCategoryChanged(idPath: QVariant[]): void;
    markCategoriesChanged(): void;
    markProductsChanged(): void;
    showLargeIcons(): boolean;
    showExtensions(): boolean;
    showAssetToolTip(): boolean;
    getNumMaxItemsPerPage(): number;
    getMaxChunkSize(): number;
    getMarkFoldersContainingNewContent(): boolean;
    setMarkFoldersContainingNewContent(onOff: boolean): void;
    setShowLargeIcons(onOff: boolean): void;
    setShowExtensions(onOff: boolean): void;
    setShowAssetToolTip(onOff: boolean): void;
    setMaxItemsPerPage(maxNum: number): void;
    setMaxChunkSize(maxSize: number): void;
    refreshTypes(): void;
    getTypes(): String[];
    findTypeID(type: QString, create: boolean, defaultLoad: boolean): number;
    findTypeID(type: QString, create: boolean, defaultLoad: boolean): number;
    findTypeID(type: QString, create: boolean, defaultLoad: boolean): number;
    createType(type: QString, defaultLoad: boolean): number;
    getType(id: number): QString;
    findTypeRowID(): any;
    findTypeRowID(): any;
    findTypeRowID(): any;
    createTypeWithRowID(): any;
    getTypeByRowID(): any;
    getAudiences(): String[];
    findAudienceID(audience: QString): number;
    getAudience(id: number): QString;
    getRootCategoryStrings(): String[];
    refreshCategoryRoots(): void;
    findCompatibilityBaseTable(plat: QString, create: boolean): DzDBCompatibilityBaseTable;
    findCompatibilityBaseTable(plat: QString, create: boolean): DzDBCompatibilityBaseTable;
    findCompatibilityBaseID(plat: QString, create: boolean): number;
    findCompatibilityBaseID(plat: QString, create: boolean): number;
    createCompatibilityBase(plat: QString): number;
    getCompatibilityBase(id: number): QString;
    findCompatibilityBaseRowID(): any;
    findCompatibilityBaseRowID(): any;
    createCompatibilityBaseWithRowID(): any;
    getCompatibilityBaseByRowID(): any;
    refreshBasePaths(): void;
    getBasePaths(): String[];
    findBasePathID(basePath: QString, create: boolean): number;
    findBasePathID(basePath: QString, create: boolean): number;
    createBasePath(basePath: QString): number;
    getBasePath(id: number): QString;
    removeAndCleanBasePath(id: number): void;
    findBasePathRowID(): any;
    findBasePathRowID(): any;
    createBasePathWithRowID(): any;
    getBasePathByRowID(): any;
    removeAndCleanBasePathByRowID(): any;
    getUnMappedBasePaths(): String[];
    refreshStores(): void;
    getStoresIDs(): String[];
    getStoreUrl(storeID: QString): QString;
    getStoreToken(storeID: QString): QString;
    createStore(storeID: QString, token: QString, url: QString): boolean;
    stopDBSearch(): void;
    stopProductSyncThread(): void;
    stopFileSearch(): void;
    stopFileScan(): void;
    stopSearchForFileAssociations(): void;
    stopStoreSearch(): void;
    stopSearchForProducts(): void;
    stopAllSearches(): void;
    scanFiles(opts: number, markFound: boolean, addToUnassigned: boolean, onlyNewToUnassigned: boolean, finishObj: QObject, progress: QObject): void;
    scanFiles(opts: number, markFound: boolean, addToUnassigned: boolean, onlyNewToUnassigned: boolean, finishObj: QObject, progress: QObject): void;
    scanFiles(opts: number, markFound: boolean, addToUnassigned: boolean, onlyNewToUnassigned: boolean, finishObj: QObject, progress: QObject): void;
    searchFiles(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchFiles(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchFiles(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    searchDB(str: QString, opts: number, finishObj: QObject): DzSearchContainerPtr;
    searchDB(str: QString, categories: String[], compatibilityBases: String[]): DzSearchContainerPtr;
    productSearchDB(str: QString, categories: String[]): DzProductHolderContainerPtr;
    productSearchDB(str: QString, categories: String[]): DzProductHolderContainerPtr;
    productSearchDB(str: QString, categories: String[]): DzProductHolderContainerPtr;
    storeSearch(str: QString, types: String[]): DzProductHolderContainerPtr;
    storeSearch(str: QString, types: String[]): DzProductHolderContainerPtr;
    storeSearch(str: QString, types: String[]): DzProductHolderContainerPtr;
    getDatabaseFilePath(): QString;
    vacuumDatabase(): boolean;
    markAllContentSeen(notify: boolean): void;
    markAllContentSeen(notify: boolean): void;
    syncFileMetadata(relativeFilePaths: String[], prepend: boolean): void;
    syncFileMetadata(relativeFilePaths: String[], prepend: boolean): void;
    syncProductMetadata(productTables: DzDBObjectBasePtr[], prepend: boolean): void;
    syncProductMetadata(productTables: DzDBObjectBasePtr[], prepend: boolean): void;
    prependToMetadataSyncList(productGuid: QString): void;
    prependToMetadataSyncList(productGuidList: String[]): void;
    prependToMetadataSyncList(productGuid: QString): void;
    prependToMetadataSyncList(productGuidList: String[]): void;
    processSyncList(): void;
    processDBMetaFile(productRelativePath: QString, runSilent: boolean, isVendor: boolean, markNew: boolean): String[];
    processDBMetaFile(productRelativePath: QString, runSilent: boolean, isVendor: boolean, markNew: boolean): String[];
    processDBMetaFile(productRelativePath: QString, runSilent: boolean, isVendor: boolean, markNew: boolean): String[];
    processDBMetaFile(productRelativePath: QString, runSilent: boolean, isVendor: boolean, markNew: boolean): String[];
    processDBMetaFileNoEmit(): any;
    processDBMetaFileNoEmit(): any;
    processDBMetaFileNoEmit(): any;
    processDBMetaFileNoEmit(): any;
    queueDBMetaFile(productRelativePath: QString): void;
    getDBMetaFileQueue(): String[];
    processDBMetaFileQueue(): void;
    checkforNewMetadataScripts(): any;
    clearDBMetaFileQueue(): void;
    reimportDBMetaFiles(): void;
    getBaseAndRelativePath(absolutePath: QString, rPath: QString, basePath: QString): void;
    getAssetUriForNode(node: DzNode): QString;
    getCompatibilityBasePathForNode(node: DzNode): QString;
    getRelativePaths(absolutePath: QString, useImportFolders: boolean): String[];
    getTypeForNode(node: DzNode): QString;
    getTypeForContentFile(fullPath: QString): QString;
    getTypeForContentFile(fullPath: QString, type: QString): boolean;
    isClothingType(type: QString): boolean;
    isFigureType(type: QString): boolean;
    isHairType(type: QString): boolean;
    isPresetType(type: QString): boolean;
    isPresetForFigureType(type: QString): boolean;
    isPropType(type: QString): boolean;
    isFollowingType(type: QString): boolean;
    isReplaceableType(type: QString): boolean;
    isNeedsBaseFigureType(type: QString): boolean;
    getFirstCategory(): any;
    findAssetPathFromShortFilename(): any;
    findCategoryAndAssetFromShortFilename(): any;
    setCMSOptions(): any;
    getCMSOptions(): any;
    stopCMS(): any;
    stopCMS(): any;
    startCMS(): any;
    canStartAndStopCMS(): any;
    isConnectedToCMS(): any;
    convertFromValentina(): any;
}
declare class DzAppSettingsMgr extends QObject {
    pushPath(path: QString): void;
    popPath(): void;
    setBoolValue(key: QString, setting: boolean): boolean;
    setIntValue(key: QString, setting: number): boolean;
    setFloatValue(key: QString, setting: number): boolean;
    setStringValue(key: QString, setting: QString): boolean;
    setColorValue(key: QString, setting: QColor): boolean;
    removeValue(key: QString): boolean;
    getBoolValue(key: QString, def: boolean, ok: boolean): boolean;
    getBoolValue(key: QString, def: boolean, ok: boolean): boolean;
    getBoolValue(key: QString, def: boolean, ok: boolean): boolean;
    getIntValue(key: QString, def: number, ok: boolean): number;
    getIntValue(key: QString, def: number, ok: boolean): number;
    getIntValue(key: QString, def: number, ok: boolean): number;
    getFloatValue(key: QString, def: number, ok: boolean): number;
    getFloatValue(key: QString, def: number, ok: boolean): number;
    getFloatValue(key: QString, def: number, ok: boolean): number;
    getStringValue(key: QString, def: QString, ok: boolean): QString;
    getStringValue(key: QString, def: QString, ok: boolean): QString;
    getStringValue(key: QString, def: QString, ok: boolean): QString;
    getColorValue(key: QString, def: QColor, ok: boolean): QColor;
    getColorValue(key: QString, def: QColor, ok: boolean): QColor;
    getColorValue(key: QString, def: QColor, ok: boolean): QColor;
}
declare class DzImageMgr extends QObject {
    imageListChanged(): void;
    autoRefreshChanged(onOff: boolean): void;
    loadImage(filename: QString, img: QImage, importerIdx: number): DzError;
    loadImage(filename: QString): QImage;
    loadImage(filename: QString, img: QImage, importerIdx: number): DzError;
    loadImage(filename: QString): QImage;
    loadImage(filename: QString, img: QImage, importerIdx: number): DzError;
    loadImage(filename: QString): QImage;
    saveImage(filename: QString, image: QImage, exporterIdx: number): DzError;
    saveImage(filename: QString, image: QImage, exporterIdx: number): DzError;
    loadLayeredImage(filename: QString, img: DzLayeredImage, importerIdx: number): DzError;
    loadLayeredImage(filename: QString, img: DzLayeredImage, importerIdx: number): DzError;
    saveLayeredImage(filename: QString, image: DzLayeredImage, exporterIdx: number): DzError;
    saveLayeredImage(filename: QString, image: DzLayeredImage, exporterIdx: number): DzError;
    setImageOpenPath(path: QString): void;
    setImageSavePath(path: QString): void;
    prepareAllImages(r: DzRenderer): void;
    imagePrepared(img: DzTexture, tempName: QString): void;
    deleteUnusedTextureObjects(): void;
    refresh(): void;
    getNumImages(): number;
    getImage(fullPath: QString): DzTexture;
    getImage(which: number): DzTexture;
    getImage(fullPath: QString): DzTexture;
    getImage(which: number): DzTexture;
    getImage(fullPath: QString): DzTexture;
    getImage(which: number): DzTexture;
    getImage(fullPath: QString): DzTexture;
    getImage(which: number): DzTexture;
    findImage(fullPath: QString): DzTexture;
    findImageByName(name: QString): DzTexture;
    findTexture(): any;
    findLayeredTexture(uri: DzUri): DzLayeredTexture;
    createLayeredTexture(name: QString): DzLayeredTexture;
    getImageOpenPath(): QString;
    getImageSavePath(): QString;
    getUniqueImageName(name: QString): QString;
    beginEditingImage(): void;
    finishedEditingImage(img: DzTexture): void;
    findLayerImageFiles(filename: QString): boolean;
    findLayerImageFile(path: QString, askUser: boolean): QString;
    addGLImageToDelete(): any;
}
declare class DzHelpMgr extends QObject {
    browseToPage(page: QString): void;
    browseToUrl(url: QUrl): void;
    browseToKeyword(keyword: QString): void;
    browseToIdentifier(identifier: QString): void;
    getNumKeywords(): number;
    getKeyword(which: number): QString;
    getKeywordUrl(which: number): QUrl;
    findKeywordUrl(keyword: QString): QUrl;
    getNumIdentifiers(): number;
    getIdentifier(which: number): QString;
    getIdentifierUrl(which: number): QUrl;
    findIdentifierUrl(id: QString): QUrl;
    getHelpContents(): DzHelpContentsItem;
    getNumFilters(): number;
    getFilterName(which: number): QString;
    getFilterAttributes(which: number): String[];
    findFilterAttributes(name: QString): String[];
    getHelpItemLabels(): String[];
    hasHelpItem(label: QString): boolean;
    isHelpItemUsed(label: QString): boolean;
    getGroup(label: QString): QString;
    getDescription(label: QString): QString;
    getToolTip(label: QString): QString;
    getStatusTip(label: QString): QString;
    getHelpString(label: QString): QString;
    setHelpItem(label: QString, group: QString, description: QString): void;
    setGroup(label: QString, group: QString): void;
    setDescription(label: QString, description: QString): void;
    setToolTip(label: QString, toolTip: QString): void;
    setStatusTip(label: QString, statusTip: QString): void;
    setHelpString(label: QString, helpString: QString): void;
    renameHelpItem(oldLabel: QString, newLabel: QString): boolean;
    removeHelpItem(label: QString): boolean;
    saveInlineHelp(filename: QString): DzError;
    updateHelp(a: DzAction): void;
    updateHelp(w: QWidget): void;
    updateHelp(a: DzAction): void;
    updateHelp(w: QWidget): void;
}
declare class DzRenderMgr extends DzBase {
    RENDER_PRIORITY_LOWEST: number;
    RENDER_PRIORITY_LOW: number;
    RENDER_PRIORITY_BELOW_NORMAL: number;
    RENDER_PRIORITY_NORMAL: number;
    RENDER_PRIORITY_ABOVE_NORMAL: number;
    RENDER_PRIORITY_HIGH: number;
    RENDER_PRIORITY_HIGHEST: number;
    rendererAdded(renderer: DzRenderer): void;
    activeRendererChanged(renderer: DzRenderer): void;
    rendererModeChanged(): any;
    renderStarting(): void;
    renderFinished(succeeded: boolean): void;
    hasRenderChanged(state: boolean): void;
    renderDirectoryListChanged(): void;
    renderFolderChanged(): void;
    activeRendererIPRRenderHandlerChanged(): any;
    rendererIPRRenderHandlerChanged(): any;
    doIPRRenderStop(): any;
    IPRRenderStarted(): any;
    IPRRenderStopped(): any;
    renderElementsListChanged(): any;
    buildRenderElementsList(): any;
    renderOptionDefaultsRestored(): any;
    doRender(opt: DzRenderOptions): boolean;
    doRender(opt: DzRenderOptions): boolean;
    setActiveRenderer(r: DzRenderer): void;
    showRenderDialog(): void;
    shutdown(): void;
    getNumRenderers(): number;
    getRenderer(which: number): DzRenderer;
    getRendererList(): QObject[];
    findRenderer(className: QString): DzRenderer;
    getActiveRenderer(): DzRenderer;
    isRendering(): boolean;
    hasRender(): boolean;
    getLastSavedRenderPath(): QString;
    saveLastRender(): QString;
    getRenderOptions(): DzRenderOptions;
    addRenderDirectory(directory: QString, saveNow: boolean): void;
    addRenderDirectory(directory: QString, saveNow: boolean): void;
    removeRenderDirectory(directory: QString): boolean;
    removeAllRenderDirectories(): void;
    getNumRenderDirectories(): number;
    getRenderDirectoryPath(which: number): QString;
    getBaseAndRelativePath(absPath: QString): String[];
    emitRenderFolderChanged(): void;
    doIPRRender(): any;
    doIPRRender(): any;
    stopIPRRender(): any;
    getRenderIconFileName(imageName: QString, justFileName: boolean): QString;
    getMetaXmlFileName(imageName: QString, justFileName: boolean): QString;
    getIconSuffix(): QString;
    getRenderElementObjects(): any;
    getOptionHelper(): any;
    rebuildRenderElements(): any;
    restoreDefaultRenderOptions(): any;
    postProcessRender(): any;
}
declare class DzTextureConvertorMgr {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    rendererAdded(): any;
    activeRendererChanged(): any;
    renderStarting(): any;
    renderFinished(): any;
    hasRenderChanged(): any;
    saveConfiguration(): any;
    loadConfiguration(): any;
    setActiveRenderer(): any;
    showTextureConvertorDialog(): any;
    doConversion(): any;
    getNumRenderers(): any;
    getRenderer(): any;
    getRendererList(): any;
    findRenderer(): any;
    getActiveRenderer(): any;
    hasRender(): any;
    getLastSavedRenderPath(): any;
    saveLastRender(): any;
    getTextureConvertorOptions(): any;
    getTempTextureConvertPath(): any;
    inherits(): any;
    className(): any;
}
declare class DzTextureBakerMgr {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    bakerAdded(): any;
    activeBakerChanged(): any;
    setActiveBaker(): any;
    getNumBakers(): any;
    getBaker(): any;
    getBakerList(): any;
    findBaker(): any;
    getActiveBaker(): any;
    getBakerOptions(): any;
    setBakerOptions(): any;
    saveConfiguration(): any;
    loadConfiguration(): any;
    inherits(): any;
    className(): any;
}
declare class DzMultiMediaMgr extends QObject {
    exportVideoClip(fileName: QString, clip: DzVideoClip, exporterIndex: number): DzError;
    exportVideoClip(fileName: QString, clip: DzVideoClip, exporterIndex: number): DzError;
    importAudioClip(fileName: QString, clip: DzAudioClip, importerIndex: number): DzError;
    importAudioClip(fileName: QString, clip: DzAudioClip, importerIndex: number): DzError;
    getVideoClipSavePath(): QString;
    getAudioClipLoadPath(): QString;
    getNumVideoExporters(): number;
    getVideoExporter(i: number): DzVideoExporter;
    findVideoExporter(filename: QString): DzVideoExporter;
    getNumAudioImporters(): number;
    getAudioImporter(i: number): DzAudioImporter;
    findAudioImporter(filename: QString): DzAudioImporter;
    makeAudioImportFileFilter(filter: DzFileFilter): void;
    makeAudioImportFileFilter(filter: DzFileFilter): void;
    makeAudioImportFileFilter(filter: DzFileFilter): void;
    makeVideoExportFileFilter(filter: DzFileFilter): void;
    makeVideoExportFileFilter(filter: DzFileFilter): void;
}
declare class DzDeviceMgr extends QObject {
    getNumDevices(): number;
    getDevice(which: number): DzDevice;
}
declare class DzCallBackMgr extends QObject {
    createCallBack(name: QString, script?: QString, seval?: boolean): DzCallBack;
    clearAllCallBacks(): void;
    deleteCallBack(callBack: DzCallBack): void;
    deleteCallBack(name: QString): void;
    deleteCallBack(index: number): void;
    deleteCallBack(callBack: DzCallBack): void;
    deleteCallBack(name: QString): void;
    deleteCallBack(index: number): void;
    deleteCallBackGroup(name: QString): void;
    deleteCallBack(callBack: DzCallBack): void;
    deleteCallBack(name: QString): void;
    deleteCallBack(index: number): void;
    getCallBack(name: QString): DzCallBack;
    getCallBack(index: number): DzCallBack;
    getCallBack(name: QString): DzCallBack;
    getCallBack(index: number): DzCallBack;
    getCallBackIndex(name: QString): number;
    getNumCallBacks(): number;
    getGroup(name: QString): QObject[];
    getCallBackList(): QObject[];
    getSignalSignature(obj: QObject, signalName: QString): String[];
    getSignalSignature(obj: QObject, signalName: QString): String[];
}
declare class DzPluginMgr extends QObject {
    pluginAdded(): any;
    doAboutPluginsDlg(): void;
    getNumPlugins(): number;
    findPlugin(pluginName: QString): DzPlugin;
    getPlugin(which: number): DzPlugin;
}
declare class DzAuthenticationMgr extends QObject {
    loggedIn(): void;
    loggedOut(): void;
    authenticateUser(): boolean;
    isAuthenticated(): boolean;
    getUserToken(): QString;
    logout(): void;
}
declare class DzStyle extends DzStyleInterface {
    objectName: string;
    Normal: number;
    Disabled: number;
    Active: number;
    Selected: number;
    On: number;
    Off: number;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    standardIconImplementation(standardIcon: number, opt: QStyleOption): QIcon;
    standardIconImplementation(standardIcon: number, opt: QStyleOption): QIcon;
    standardIconImplementation(standardIcon: number, opt: QStyleOption): QIcon;
    layoutSpacingImplementation(control1: number): number;
    layoutSpacingImplementation(control1: number): number;
    layoutSpacingImplementation(control1: number): number;
    interfaceColorsChanged(): void;
    findInterfaceColor(): any;
    getNumInterfaceColors(): number;
    getInterfaceColorName(): any;
    getInterfaceColorDescription(which: number): QString;
    getInterfaceColor(name: QString): QColor;
    getInterfaceColor(which: number): QColor;
    getInterfaceColor(name: QString): QColor;
    getInterfaceColor(which: number): QColor;
    getInterfaceColorDefault(which: number): QColor;
    setInterfaceColor(which: number, color: QColor): void;
    compileStyleDefinition(infile: QString, outfile: QString): DzError;
    getStyleDefinition(): QString;
    textStyleColor(styleName: QString): QColor;
    pixelMetric(metricName: QString): number;
    pixelMetric(m: number, option: QStyleOption, widget: QWidget): number;
    standardPixmap(pixmapName: QString): QPixmap;
    standardPixmap(standardPixmap: number, opt: QStyleOption): QPixmap;
    actionPixmap(className: QString, mode: number, state: number): QPixmap;
    setStyledIcon(): any;
    getNumPrimitiveElements(): number;
    getNumPixelMetrics(): number;
    getNumStyleHints(): number;
    getNumStandardPixmaps(): number;
    getNumTextStyles(): number;
    getPrimitiveElementName(which: number): QString;
    getPixelMetricName(which: number): QString;
    getStyleHintName(which: number): QString;
    getStandardPixmapName(which: number): QString;
    getTextStyleName(which: number): QString;
    findPrimitiveElement(name: QString): number;
    findPixelMetric(name: QString): number;
    findStyleHint(name: QString): number;
    findStandardPixmap(name: QString): number;
    findTextStyle(name: QString): number;
    inherits(): any;
    className(): any;
}
declare class QDialog extends QWidget {
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    sizeGripEnabled: boolean;
    modal: boolean;
    setVisible(visible: boolean): void;
    finished(result: number): void;
    accepted(): void;
    rejected(): void;
    open(): void;
    exec(): number;
    done(obj: number): void;
    accept(): void;
    reject(): void;
    showExtension(obj: boolean): void;
}
declare class DzVec3 {
    objectName: string;
    x: number;
    y: number;
    z: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    length(): number;
    lengthSquared(): number;
    normalized(): DzVec3;
    cross(vec: DzVec3): DzVec3;
    dot(vec: DzPnt3): number;
    dot(vec: DzVec3): number;
    getAngleTo(vec: DzVec3): number;
    getRotationTo(vec: DzVec3): DzQuat;
    add(): any;
    subtract(): any;
    multiply(): any;
    divide(): any;
    makeZero(): void;
    makeIdentity(): void;
    negate(): void;
    setLength(length: number): void;
    normalize(): number;
    square(): void;
    abs(): void;
}
declare class DzIntSlider extends DzSlider {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    fullLengthTextEditBegin(): any;
    setFullLengthTextEdit(): any;
    getFullLengthTextEdit(): any;
    adjustFullLengthTextForEdit(): any;
    valueChanged(val: number): void;
}
declare class DzFloatSlider extends DzSlider {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    fullLengthTextEditBegin(): any;
    setFullLengthTextEdit(): any;
    getFullLengthTextEdit(): any;
    adjustFullLengthTextForEdit(): any;
    valueChanged(val: number): void;
}
declare class QCheckBox extends QAbstractButton {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    checkable: boolean;
    checked: boolean;
    down: boolean;
    tristate: boolean;
    stateChanged(obj: number): void;
}
declare class QComboBox extends QWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    editable: boolean;
    count: number;
    currentText: string;
    currentIndex: number;
    maxVisibleItems: number;
    maxCount: number;
    insertPolicy: number;
    sizeAdjustPolicy: number;
    minimumContentsLength: number;
    iconSize: QObject;
    autoCompletion: boolean;
    autoCompletionCaseSensitivity: number;
    duplicatesEnabled: boolean;
    frame: boolean;
    modelColumn: number;
    editTextChanged(obj: QString): void;
    activated(obj: QString): void;
    activated(index: number): void;
    activated(obj: QString): void;
    activated(index: number): void;
    highlighted(obj: QString): void;
    highlighted(index: number): void;
    highlighted(obj: QString): void;
    highlighted(index: number): void;
    currentIndexChanged(obj: QString): void;
    currentIndexChanged(index: number): void;
    currentIndexChanged(obj: QString): void;
    currentIndexChanged(index: number): void;
    textChanged(obj: QString): void;
    clear(): void;
    clearEditText(): void;
    setEditText(text: QString): void;
    setCurrentIndex(index: number): void;
}
declare class DzGroupBoxBC extends QWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    title: string;
    alignment: number;
    flat: boolean;
    checkable: boolean;
    checked: boolean;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    clicked(): any;
    clicked(): any;
    toggled(): any;
    setChecked(): any;
    addSpace(): any;
}
declare class QLayout extends QObject {
    autoAdd: boolean;
    margin: number;
    spacing: number;
    addWidget(item: DzWidget): void;
}
declare class QLabel extends QFrame {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    text: string;
    textFormat: number;
    pixmap: QObject;
    scaledContents: boolean;
    alignment: number;
    wordWrap: boolean;
    margin: number;
    indent: number;
    openExternalLinks: boolean;
    textInteractionFlags: number;
    hasSelectedText: boolean;
    selectedText: string;
    linkActivated(link: QString): void;
    linkHovered(link: QString): void;
    setText(obj: QString): void;
    setPixmap(obj: QPixmap): void;
    setPicture(obj: QPicture): void;
    setMovie(movie: QMovie): void;
    setNum(obj: number): void;
    setNum(obj: number): void;
    setNum(obj: number): void;
    setNum(obj: number): void;
    clear(): void;
}
declare class Q3ListBox extends Q3ScrollView {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    margin: number;
    count: number;
    numItemsVisible: number;
    currentItem: number;
    currentText: string;
    topItem: number;
    selectionMode: number;
    multiSelection: boolean;
    columnMode: number;
    rowMode: number;
    numColumns: number;
    numRows: number;
    variableWidth: boolean;
    variableHeight: boolean;
    highlighted(obj: Q3ListBoxItem): void;
    highlighted(obj: QString): void;
    highlighted(index: number): void;
    selected(obj: Q3ListBoxItem): void;
    selected(obj: QString): void;
    selected(index: number): void;
    highlighted(obj: Q3ListBoxItem): void;
    highlighted(obj: QString): void;
    highlighted(index: number): void;
    selected(obj: Q3ListBoxItem): void;
    selected(obj: QString): void;
    selected(index: number): void;
    highlighted(obj: Q3ListBoxItem): void;
    highlighted(obj: QString): void;
    highlighted(index: number): void;
    selected(obj: Q3ListBoxItem): void;
    selected(obj: QString): void;
    selected(index: number): void;
    selectionChanged(): void;
    selectionChanged(obj: Q3ListBoxItem): void;
    selectionChanged(): void;
    selectionChanged(obj: Q3ListBoxItem): void;
    currentChanged(obj: Q3ListBoxItem): void;
    clicked(obj: Q3ListBoxItem, point?: QPoint): void;
    pressed(obj: Q3ListBoxItem, point?: QPoint): void;
    doubleClicked(obj: Q3ListBoxItem): void;
    returnPressed(obj: Q3ListBoxItem): void;
    rightButtonClicked(obj: Q3ListBoxItem, point: QPoint): void;
    rightButtonPressed(obj: Q3ListBoxItem, point: QPoint): void;
    mouseButtonPressed(obj: number, item: Q3ListBoxItem, point: QPoint): void;
    mouseButtonClicked(obj: number, item: Q3ListBoxItem, point: QPoint): void;
    contextMenuRequested(item: Q3ListBoxItem, point: QPoint): void;
    onItem(item: Q3ListBoxItem): void;
    onViewport(): void;
    clear(): void;
    ensureCurrentVisible(): void;
    clearSelection(): void;
    selectAll(select: boolean): void;
    invertSelection(): void;
    clearInputString(): void;
}
declare class DzStyledButton extends QPushButton {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    checkable: boolean;
    checked: boolean;
    down: boolean;
    default: boolean;
    flat: boolean;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    setOn(): any;
}
declare class QRadioButton extends QAbstractButton {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    checkable: boolean;
    checked: boolean;
    down: boolean;
}
declare class DzExtendedTabWidget extends QTabWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    movable: boolean;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    setCurrentPage(): any;
    showPage(): any;
    removePage(): any;
    tabClicked(tabIndex: number): void;
}
declare class DzButtonGroupBC extends QWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    title: string;
    alignment: number;
    flat: boolean;
    checkable: boolean;
    checked: boolean;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    clicked(): any;
    clicked(): any;
    toggled(): any;
    setChecked(): any;
    addSpace(): any;
    pressed(): any;
    released(): any;
    clicked(): any;
    buttonPressed(): any;
    buttonReleased(): any;
    buttonClicked(): any;
}
declare class DzBackdrop extends DzElement {
    elementID: number;
    flipHorizontal: boolean;
    flipVertical: boolean;
    rotation: number;
    backgroundColor: QObject;
    visible: boolean;
    visibleInRender: boolean;
    NO_ROTATION: number;
    ROTATE_LEFT_90: number;
    ROTATE_RIGHT_90: number;
    ROTATE_180: number;
    propertyListInTreeChanged(): any;
    privatePropertyListInTreeChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    drawnDataChanged(): void;
    backgroundColorChanged(): any;
    visiblityChanged(): any;
    setTexture(map: DzTexture): void;
    showOptions(parent: QWidget): void;
    showOptions(parent: QWidget): void;
    clear(): void;
    getMaterial(): DzMaterial;
    getTexture(): DzTexture;
    getBackgroundColorControl(): any;
    getRotationControl(): DzEnumProperty;
    getVerticalFlipControl(): DzBoolProperty;
    getHorizontalFlipControl(): DzBoolProperty;
    getVisibleControl(): any;
    getVisibleInRenderControl(): any;
    adjustRenderAspectRatioToMatchTexture(): any;
    adjustRenderDimensionsToMatchTexture(): any;
}
declare class DzTimeRange {
    objectName: string;
    start: number;
    end: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    getDuration(): DzTime;
    isEmpty(): boolean;
    isIncluded(t: DzTime): boolean;
    isIncluded(iv: DzTimeRange): boolean;
    isIncluded(t: DzTime): boolean;
    isIncluded(iv: DzTimeRange): boolean;
    overlaps(iv: DzTimeRange): boolean;
    add(): any;
    subtract(): any;
    include(t: DzTime): void;
    include(interval: DzTimeRange): void;
    include(t: DzTime): void;
    include(interval: DzTimeRange): void;
    intersect(interval: DzTimeRange): void;
    extendEndsBy(val: DzTime): void;
    makeEmpty(): void;
}
declare class DzPropertyGroupTree extends DzBase {
    childListChanged(): void;
    treeChanged(): void;
    treeSorted(): any;
    propertyVisiblityChanged(): any;
    getAllPaths(): String[];
    getOwner(): DzElement;
    getFirstChild(): DzPropertyGroup;
    findChild(name: QString): DzPropertyGroup;
    moveChildToIndex(childName: QString, newIndex: number): boolean;
    isPrivate(): boolean;
    setIsPrivate(onoff: boolean): void;
    getDefaultGroup(): DzPropertyGroup;
    sortGroups(): void;
    findProperty(): any;
}
declare class DzRotationOrder {
    objectName: string;
    order: number;
    firstAxis: number;
    secondAxis: number;
    thirdAxis: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): QString;
}
declare class DzObject extends DzElement {
    elementID: number;
    propertyListInTreeChanged(): any;
    privatePropertyListInTreeChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    modifierAdded(mod: DzModifier): void;
    modifierRemoved(mod: DzModifier): void;
    aboutToAddModifier(): any;
    modifierStackChanged(): void;
    shapeAdded(shape: DzShape): void;
    shapeRemoved(shape: DzShape): void;
    currentShapeSwitched(): void;
    materialListChanged(): void;
    materialSelectionChanged(): void;
    drawnDataChanged(): void;
    uvsChanged(): void;
    cachedGeomInvalidated(): void;
    cachedGeomUpdated(): void;
    cachedGeomFinalized(): void;
    shapeTopologyChanged(): void;
    aboutToDelete(): void;
    aboutToFinalize(): any;
    materialSelectionSetsChanged(): any;
    cahceTopologyChanged(): any;
    modifierDuplicateSignal(): any;
    addShape(shape: DzShape, index: number): DzError;
    addShape(shape: DzShape, index: number): DzError;
    removeShape(index: number): DzError;
    moveShape(shape: DzShape, index: number): DzError;
    moveShape(shape: DzShape, index: number): DzError;
    removeAllShapes(): DzError;
    addModifier(modifier: DzModifier, index: number): DzError;
    addModifier(modifier: DzModifier, index: number): DzError;
    removeModifier(modifier: DzModifier): DzError;
    moveModifier(modifier: DzModifier, index: number): DzError;
    moveModifier(modifier: DzModifier, index: number): DzError;
    removeAllModifiers(): DzError;
    invalidateCache(): void;
    forceCacheUpdate(node: DzNode, isRender: boolean): void;
    forceCacheUpdate(node: DzNode, isRender: boolean): void;
    buildFilteredGeometry(node: DzNode, filter: DzAbstractBuildGeometryFilter, finalizeGeom: boolean, finalGeom: DzVertexMeshPtr): void;
    getCurrentShape(): DzShape;
    getNumShapes(): number;
    getShape(which: number): DzShape;
    getCachedGeom(): DzVertexMesh;
    getNumModifiers(): number;
    getModifier(which: number): DzModifier;
    findModifier(name: QString): DzModifier;
    findModifierIndex(mod: DzModifier): number;
    getGeometryControl(): DzEnumProperty;
    getBoundingBox(): DzBox3;
    getLocalBoundingBox(): DzBox3;
    getLocalOrientedBox(): DzOrientedBox3;
    doModifierDuplicate(): any;
    modifierDuplicate(): any;
}
declare class DzOrientedBox3 {
    objectName: string;
    localBox: QObject;
    transform: QObject;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
}
declare class DzMatrix3 {
    objectName: string;
    m11: number;
    m12: number;
    m13: number;
    m14: number;
    m21: number;
    m22: number;
    m23: number;
    m24: number;
    m31: number;
    m32: number;
    m33: number;
    m34: number;
    isIdentity: boolean;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    inverse(): DzMatrix3;
    orthogonal(): boolean;
    multMatrixVec(): any;
    multiply(): any;
    makeIdentity(): void;
    noTrans(): void;
    noRot(): void;
    noScale(): void;
    orthogonalize(): void;
    setTrans(pnt: DzVec3): void;
    translate(v: DzVec3): void;
    preTranslate(v: DzVec3): void;
    rotateX(radians: number): void;
    rotateY(radians: number): void;
    rotateZ(radians: number): void;
    rotate(rot: DzQuat): void;
    preRotateX(radians: number): void;
    preRotateY(radians: number): void;
    preRotateZ(radians: number): void;
    preRotate(rot: DzQuat): void;
    scale(vec: DzVec3, affectTrans: boolean): void;
    scale(scale: number, affectTrans: boolean): void;
    scale(scale: number, direction: DzVec3, affectTrans: boolean): void;
    scale(vec: DzVec3, affectTrans: boolean): void;
    scale(scale: number, affectTrans: boolean): void;
    scale(scale: number, direction: DzVec3, affectTrans: boolean): void;
}
declare class DzQuat {
    objectName: string;
    x: number;
    y: number;
    z: number;
    w: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    isIdentity(): boolean;
    inverse(): DzQuat;
    multVec(src: DzVec3): DzVec3;
    multiply(): any;
    getValue(m: DzMatrix3): void;
    getValue(m: DzMatrix4): void;
    getValue(order: DzRotationOrder, angles: DzVec3): void;
    getValue(axis: DzVec3, radians: number): void;
    getValue(vec: DzVec3): void;
    getValue(q: number, q1: number, q2: number, q3: number): void;
    getValue(vec: number[]): void;
    getXAxis(vec: DzVec3): void;
    getYAxis(vec: DzVec3): void;
    getZAxis(vec: DzVec3): void;
    invert(): void;
    makeClosest(r: DzQuat): void;
    scaleAngle(scaleFactor: number): void;
    makeIdentity(): void;
    normalize(): void;
    setValue(order: DzRotationOrder, angles: DzVec3): void;
    setValue(mtx: DzMatrix3): void;
    setValue(mtx: DzMatrix4): void;
    setValue(quat: DzQuat): void;
    setValue(axis: DzVec3, radians: number): void;
    setValue(vec: DzVec3): void;
    setValue(xAxis: DzVec3, yAxis: DzVec3): void;
    setValue(vec: number[], normalize: boolean): void;
    setValue(q: number, q1: number, q2: number, q3: number, normalize: boolean): void;
    setValue(axis: number, radians: number): void;
    setValue(order: DzRotationOrder, angles: DzVec3): void;
    setValue(mtx: DzMatrix3): void;
    setValue(mtx: DzMatrix4): void;
    setValue(quat: DzQuat): void;
    setValue(axis: DzVec3, radians: number): void;
    setValue(vec: DzVec3): void;
    setValue(xAxis: DzVec3, yAxis: DzVec3): void;
    setValue(vec: number[], normalize: boolean): void;
    setValue(q: number, q1: number, q2: number, q3: number, normalize: boolean): void;
    setValue(axis: number, radians: number): void;
    setValue(order: DzRotationOrder, angles: DzVec3): void;
    setValue(mtx: DzMatrix3): void;
    setValue(mtx: DzMatrix4): void;
    setValue(quat: DzQuat): void;
    setValue(axis: DzVec3, radians: number): void;
    setValue(vec: DzVec3): void;
    setValue(xAxis: DzVec3, yAxis: DzVec3): void;
    setValue(vec: number[], normalize: boolean): void;
    setValue(q: number, q1: number, q2: number, q3: number, normalize: boolean): void;
    setValue(axis: number, radians: number): void;
    setValue(order: DzRotationOrder, angles: DzVec3): void;
    setValue(mtx: DzMatrix3): void;
    setValue(mtx: DzMatrix4): void;
    setValue(quat: DzQuat): void;
    setValue(axis: DzVec3, radians: number): void;
    setValue(vec: DzVec3): void;
    setValue(xAxis: DzVec3, yAxis: DzVec3): void;
    setValue(vec: number[], normalize: boolean): void;
    setValue(q: number, q1: number, q2: number, q3: number, normalize: boolean): void;
    setValue(axis: number, radians: number): void;
}
declare class DzFloatProperty extends DzNumericProperty {
    emitValueChangedOnSceneClear: boolean;
    LINEAR_INTERP: number;
    CONSTANT_INTERP: number;
    TCB_INTERP: number;
    HERMITE_INTERP: number;
    NON_TRANSFORM: number;
    SCALE: number;
    TRANSLATE: number;
    ROT_FIRST_AXIS: number;
    ROT_SECOND_AXIS: number;
    ROT_THIRD_AXIS: number;
    NO_INTEREST: number;
    X_INTEREST: number;
    Y_INTEREST: number;
    Z_INTEREST: number;
    ALL_INTEREST: number;
    dynamicallyHiddenChanged(): any;
    dynamicallyAutoFollowChanged(): any;
    controllerListChanged(): any;
    slaveControllerListChanged(): any;
    aliasListChanged(): any;
    keysAreClamped(): any;
    setKeysAreClamped(): any;
    toggleKeysAreClamped(): any;
    setDynamicallyHidden(): any;
    setDynamicallyAutoFollow(): any;
    currentValueIsDefinitionValue(): any;
    doCopyBaseData(): any;
    getEmitValueChangedOnSceneClear(): any;
    setEmitValueChangedOnSceneClear(): any;
    isDynamicallyHidden(): any;
    isDynamicallyAutoFollow(): any;
    emitRemoved(): any;
    invalidateCacheValue(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    setWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    isMappableChanged(): any;
    defaultMapGammaChanged(): any;
    defaultMapTextureTypeChanged(): any;
    textureModifierChanged(): any;
    textureModifierFlagsChanged(): any;
    getDefaultMapGamma(): any;
    setDefaultMapGamma(): any;
    getDefaultMapTextureType(): any;
    setDefaultMapTextureType(): any;
    setTextureModifier(): any;
    getTextureModifier(): any;
    setTextureModifierFlags(): any;
    getTextureModifierFlags(): any;
    getNDoubleValue(): any;
    getNDoubleValue(): any;
    getNValueCount(): any;
    getValueAsFloatColor(): any;
    getValueAsFloatColor(): any;
    getValueAsVec3(): any;
    getValueAsVec3(): any;
    getValueAsVec2(): any;
    getValueAsVec2(): any;
    getValueAsInt2(): any;
    getValueAsInt2(): any;
    getValueAsDouble(): any;
    getValueAsDouble(): any;
    emitDefaultMapGammaChanged(): any;
    emitDefaultMapTextureTypeChanged(): any;
    emitTextureModifierChanged(): any;
    emitTextureModifierFlagsChanged(): any;
    emitIsMappableChanged(): any;
    displayAsPercentChanged(): void;
    adjustValue(tm: DzTime, val: number): number;
    adjustValue(val: number): number;
    adjustValue(tm: DzTime, val: number): number;
    adjustValue(val: number): number;
    setValue(tm: DzTime, val: number, interp?: number): void;
    setValue(val: number): void;
    setDefaultValue(val: number): void;
    setKeyValue(i: number, val: number): void;
    setKeyInterpolation(i: number, interp: number): void;
    setKeyInterpolation(i: number, interp: number): void;
    setKeyInterpolation(i: number, interp: number): void;
    setKeyInterpolation(i: number, interp: number): void;
    setSensitivity(sens: number): void;
    setDisplayAsPercent(onOff: boolean): void;
    multiply(val: number, applyToDefault: boolean): void;
    multiply(val: number, applyToDefault: boolean): void;
    divide(val: number, applyToDefault: boolean): void;
    divide(val: number, applyToDefault: boolean): void;
    add(val: number, applyToDefault: boolean): void;
    add(val: number, applyToDefault: boolean): void;
    subtract(val: number, applyToDefault: boolean): void;
    subtract(val: number, applyToDefault: boolean): void;
    setTransformType(type: number): void;
    getRawValue(tm: DzTime): number;
    getRawValue(): number;
    getRawValue(tm: DzTime): number;
    getRawValue(): number;
    getValue(tm: DzTime): number;
    getValue(): number;
    getValue(tm: DzTime): number;
    getValue(): number;
    getLocalValue(tm: DzTime): number;
    getLocalValue(): number;
    getLocalValue(tm: DzTime): number;
    getLocalValue(): number;
    getDefaultValue(): number;
    getKeyValue(i: number): number;
    getKeyInterpolationType(i: number, param: number): number;
    getKeyInterpolationType(i: number, param: number): number;
    getKeyInterpolationType(i: number, param: number): number;
    getKeyInterpolationType(i: number, param: number): number;
    getDisplayAsPercent(): boolean;
    getSensitivity(): number;
    getTransformType(): number;
    getScaledFollowValue(): any;
    emitDisplayAsPercentChanged(): void;
}
declare class DzFloatColorProperty extends DzFloatProperty {
    setColorValue(color: QColor): any;
    setColorValue(time: DzTime, color: QColor): any;
    getColorValue(): QColor;
}
declare class DzBoolProperty extends DzIntProperty {
    emitValueChangedOnSceneClear: boolean;
    NO_INTEREST: number;
    X_INTEREST: number;
    Y_INTEREST: number;
    Z_INTEREST: number;
    ALL_INTEREST: number;
    dynamicallyHiddenChanged(): any;
    dynamicallyAutoFollowChanged(): any;
    controllerListChanged(): any;
    slaveControllerListChanged(): any;
    aliasListChanged(): any;
    keysAreClamped(): any;
    setKeysAreClamped(): any;
    toggleKeysAreClamped(): any;
    setDynamicallyHidden(): any;
    setDynamicallyAutoFollow(): any;
    currentValueIsDefinitionValue(): any;
    doCopyBaseData(): any;
    getEmitValueChangedOnSceneClear(): any;
    setEmitValueChangedOnSceneClear(): any;
    isDynamicallyHidden(): any;
    isDynamicallyAutoFollow(): any;
    emitRemoved(): any;
    invalidateCacheValue(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    setWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    isMappableChanged(): any;
    defaultMapGammaChanged(): any;
    defaultMapTextureTypeChanged(): any;
    textureModifierChanged(): any;
    textureModifierFlagsChanged(): any;
    getDefaultMapGamma(): any;
    setDefaultMapGamma(): any;
    getDefaultMapTextureType(): any;
    setDefaultMapTextureType(): any;
    setTextureModifier(): any;
    getTextureModifier(): any;
    setTextureModifierFlags(): any;
    getTextureModifierFlags(): any;
    getNDoubleValue(): any;
    getNDoubleValue(): any;
    getNValueCount(): any;
    getValueAsFloatColor(): any;
    getValueAsFloatColor(): any;
    getValueAsVec3(): any;
    getValueAsVec3(): any;
    getValueAsVec2(): any;
    getValueAsVec2(): any;
    getValueAsInt2(): any;
    getValueAsInt2(): any;
    getValueAsDouble(): any;
    getValueAsDouble(): any;
    emitDefaultMapGammaChanged(): any;
    emitDefaultMapTextureTypeChanged(): any;
    emitTextureModifierChanged(): any;
    emitTextureModifierFlagsChanged(): any;
    emitIsMappableChanged(): any;
    setBoolValue(tm: DzTime, val: boolean): void;
    setBoolValue(val: boolean): void;
    setBoolValue(tm: DzTime, val: boolean): void;
    setBoolValue(val: boolean): void;
    setDefaultBoolValue(val: boolean): void;
    setKeyBoolValue(i: number, val: boolean): void;
    getBoolValue(tm: DzTime): boolean;
    getBoolValue(): boolean;
    getBoolValue(tm: DzTime): boolean;
    getBoolValue(): boolean;
    getDefaultBoolValue(): boolean;
    getRawBoolValue(tm: DzTime): boolean;
    getRawBoolValue(): boolean;
    getRawBoolValue(tm: DzTime): boolean;
    getRawBoolValue(): boolean;
    getKeyBoolValue(i: number): boolean;
}
declare class DzEnumProperty extends DzIntProperty {
    emitValueChangedOnSceneClear: boolean;
    NO_INTEREST: number;
    X_INTEREST: number;
    Y_INTEREST: number;
    Z_INTEREST: number;
    ALL_INTEREST: number;
    dynamicallyHiddenChanged(): any;
    dynamicallyAutoFollowChanged(): any;
    controllerListChanged(): any;
    slaveControllerListChanged(): any;
    aliasListChanged(): any;
    keysAreClamped(): any;
    setKeysAreClamped(): any;
    toggleKeysAreClamped(): any;
    setDynamicallyHidden(): any;
    setDynamicallyAutoFollow(): any;
    currentValueIsDefinitionValue(): any;
    doCopyBaseData(): any;
    getEmitValueChangedOnSceneClear(): any;
    setEmitValueChangedOnSceneClear(): any;
    isDynamicallyHidden(): any;
    isDynamicallyAutoFollow(): any;
    emitRemoved(): any;
    invalidateCacheValue(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    setWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    isMappableChanged(): any;
    defaultMapGammaChanged(): any;
    defaultMapTextureTypeChanged(): any;
    textureModifierChanged(): any;
    textureModifierFlagsChanged(): any;
    getDefaultMapGamma(): any;
    setDefaultMapGamma(): any;
    getDefaultMapTextureType(): any;
    setDefaultMapTextureType(): any;
    setTextureModifier(): any;
    getTextureModifier(): any;
    setTextureModifierFlags(): any;
    getTextureModifierFlags(): any;
    getNDoubleValue(): any;
    getNDoubleValue(): any;
    getNValueCount(): any;
    getValueAsFloatColor(): any;
    getValueAsFloatColor(): any;
    getValueAsVec3(): any;
    getValueAsVec3(): any;
    getValueAsVec2(): any;
    getValueAsVec2(): any;
    getValueAsInt2(): any;
    getValueAsInt2(): any;
    getValueAsDouble(): any;
    getValueAsDouble(): any;
    emitDefaultMapGammaChanged(): any;
    emitDefaultMapTextureTypeChanged(): any;
    emitTextureModifierChanged(): any;
    emitTextureModifierFlagsChanged(): any;
    emitIsMappableChanged(): any;
    itemListChanged(): void;
    addItem(item: QString, index: number): number;
    addItem(item: QString, index: number): number;
    removeItem(index: number): boolean;
    removeAllItems(): void;
    replaceItem(index: number, item: QString): boolean;
    setValueFromString(tm: DzTime, str: QString): boolean;
    setValueFromString(str: QString): boolean;
    setValueFromString(tm: DzTime, str: QString): boolean;
    setValueFromString(str: QString): boolean;
    setItems(): any;
    getDefaultStringValue(): QString;
    getRawStringValue(tm: DzTime): QString;
    getRawStringValue(): QString;
    getRawStringValue(tm: DzTime): QString;
    getRawStringValue(): QString;
    getKeyStringValue(i: number): QString;
    getNumItems(): number;
    getItem(i: number): QString;
    getUniqueItemString(item: QString): QString;
    findItemString(str: QString): number;
    emitItemListChanged(): void;
}
declare class DzNumericNodeProperty extends DzFloatProperty {
    nodeChanged(node: DzNode): void;
    invalidWithoutNodeChanged(onOff: boolean): void;
    setMustHaveNode(onOff: boolean): void;
    setNode(node: DzNode): void;
    isInvalidWithoutNode(): boolean;
    redirectNodes(): any;
    emitNodeChanged(node: DzNode): void;
    emitInvalidWithoutNodeChanged(onOff: boolean): void;
}
declare class DzPresentation extends DzBase {
    type: string;
    label: string;
    description: string;
    iconLarge: string;
    iconSmall: string;
    colorA: QObject;
    colorB: QObject;
    autoFitBase: string;
    preferredBase: string;
    iconReady(): void;
    attributeChanged(): void;
}
declare class DzDockArea extends QWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    getNumColumns(): number;
    getColumn(which: number): DzDockAreaColumn;
}
declare class DzViewportMgr extends QWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    NO_PANES: number;
    SINGLE_PANE: number;
    LEFT_RIGHT: number;
    TOP_BOTTOM: number;
    LEFT2_RIGHT: number;
    LEFT3_RIGHT: number;
    LEFT_RIGHT2: number;
    LEFT_RIGHT3: number;
    TOP2_BOTTOM: number;
    TOP3_BOTTOM: number;
    TOP_BOTTOM2: number;
    TOP_BOTTOM3: number;
    FOUR_PANE: number;
    NUM_LAYOUTS: number;
    QDOff: number;
    QDWire: number;
    QDSmooth: number;
    NoOperation: number;
    OrbitCamera: number;
    RotateCamera: number;
    PanCamera: number;
    DollyCamera: number;
    BankCamera: number;
    ZoomDCamera: number;
    ZoomFCamera: number;
    Node: number;
    SkeletonThenNode: number;
    Skeleton: number;
    Nested: number;
    Flat: number;
    NoAccel: number;
    LeftClick: number;
    RightClick: number;
    MidClick: number;
    AltLeftClick: number;
    AltRightClick: number;
    AltMidClick: number;
    CtrlLeftClick: number;
    CtrlRightClick: number;
    CtrlMidClick: number;
    ShiftLeftClick: number;
    ShiftRightClick: number;
    ShiftMidClick: number;
    CtrlAltLeftClick: number;
    CtrlAltRightClick: number;
    CtrlAltMidClick: number;
    CtrlShiftLeftClick: number;
    CtrlShiftRightClick: number;
    CtrlShiftMidClick: number;
    AltShiftLeftClick: number;
    AltShiftRightClick: number;
    AltShiftMidClick: number;
    CtrlAltShiftLeftClick: number;
    CtrlAltShiftRightClick: number;
    CtrlAltShiftMidClick: number;
    NoModifier: number;
    Alt: number;
    Shift: number;
    Ctrl: number;
    CtrlAlt: number;
    CtrlShift: number;
    CtrlAltShift: number;
    ShiftAlt: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    toolListChanged(): void;
    activeToolSwitched(): void;
    activeViewSwitched(): void;
    activeViewResized(): void;
    propagateBackgroundColorChanged(onOff: boolean): void;
    viewLayoutChanged(): void;
    contextMenuAboutToShow(menu: DzMenu, view: Dz3DViewport, pos: QPoint): void;
    viewportCameraListChanged(): void;
    redrawsLocked(onOff: boolean): void;
    manipStarted(): void;
    manipFinished(): void;
    quickDrawModeChanged(mode: number): void;
    subDManipulationChanged(obj: boolean): void;
    accelChanged(operation: number, accel: number): void;
    acceleratorsChanged(): void;
    invertMouseWheelChanged(onOff: boolean): void;
    nodeClickModeChanged(obj: number): void;
    regionClickModeChanged(obj: number): void;
    graftDrawingChanged(): void;
    manipulationBindingChanged(obj: boolean): void;
    activeToolDrawnDataChanged(): any;
    acitve3DViewCurrentDimensionsChanged(): any;
    drawElementsListChanged(): any;
    setLayout(val: number): void;
    resetViewCameras(): void;
    setActiveViewport(activeView: DzViewport): void;
    setPropagateBackgroundColor(onOff: boolean): void;
    repaintActive3DViewport(): void;
    setActiveTool(tool: DzViewTool): void;
    setActiveTool(which: number): void;
    setActiveTool(tool: DzViewTool): void;
    setActiveTool(which: number): void;
    activateNextTool(): void;
    activatePrevTool(): void;
    setViewRatios(hSingle: number, h1: number, h2: number, vSingle: number, v1: number, v2: number): void;
    setMouseBtnAccelerator(operation: number, accel: number): void;
    validateMouseBtnAccelerator(accel: number): boolean;
    validateMouseWheelAccelerator(accel: number): boolean;
    setInvertMouseWheel(onOff: boolean): void;
    setNodeClickMode(mode: number): void;
    getNodeClickMode(): number;
    setRegionClickMode(mode: number): void;
    getRegionClickMode(): number;
    getNumViews(): number;
    getView(which: number): DzView;
    getViewIcon(): any;
    getViewDescription(): any;
    getNumUserDrawStyles(): number;
    getUserDrawStyle(which: number): DzUserDrawStyle;
    findUserDrawStyle(): any;
    getActiveViewportDimensionsController(): any;
    getActiveViewport(): DzViewport;
    getNumViewports(): any;
    getNumDefaultViewports(): any;
    getNumCustomViewports(): any;
    getViewport(which: number): DzViewport;
    getDefaultViewport(): any;
    getCustomViewport(): any;
    getNumVisibleViewports(): number;
    getNumVisibleDefaultViewports(): any;
    getNumVisibleCustomViewports(): any;
    getLayout(): number;
    getPropagateBackgroundColor(): boolean;
    getNumTools(): number;
    getTool(i: number): DzViewTool;
    getActiveTool(): DzViewTool;
    findTool(className: QString): DzViewTool;
    getOverrideTool(): any;
    setOverrideTool(): any;
    clearOverrideTool(): any;
    getNumViewCameras(): number;
    getViewCamera(type: number): DzCamera;
    getViewCamera(which: number): DzCamera;
    getViewCamera(type: number): DzCamera;
    getViewCamera(which: number): DzCamera;
    getMouseBtnAcceleratorString(accel: number): QString;
    getMouseBtnAcceleratorString(operation: number): QString;
    getMouseBtnAcceleratorString(accel: number): QString;
    getMouseBtnAcceleratorString(operation: number): QString;
    getMouseBtnAccelerator(operation: number): number;
    getMouseBtnAccelerator(button: number, modifiers: number): number;
    getMouseBtnAccelerator(str: QString): number;
    getMouseBtnAccelerator(mouseBtn: number, ctrl: boolean, alt: boolean, shift: boolean): number;
    getMouseBtnAccelerator(operation: number): number;
    getMouseBtnAccelerator(button: number, modifiers: number): number;
    getMouseBtnAccelerator(str: QString): number;
    getMouseBtnAccelerator(mouseBtn: number, ctrl: boolean, alt: boolean, shift: boolean): number;
    getMouseBtnAccelerator(operation: number): number;
    getMouseBtnAccelerator(button: number, modifiers: number): number;
    getMouseBtnAccelerator(str: QString): number;
    getMouseBtnAccelerator(mouseBtn: number, ctrl: boolean, alt: boolean, shift: boolean): number;
    getMouseBtnAccelerator(operation: number): number;
    getMouseBtnAccelerator(button: number, modifiers: number): number;
    getMouseBtnAccelerator(str: QString): number;
    getMouseBtnAccelerator(mouseBtn: number, ctrl: boolean, alt: boolean, shift: boolean): number;
    getOperation(accel: number): number;
    getInvertMouseWheel(): boolean;
    getMouseModifierString(accel: number): QString;
    getMouseModifier(modifiers: number): number;
    getMouseModifier(ctrl: boolean, alt: boolean, shift: boolean): number;
    getMouseModifier(str: QString): number;
    getMouseModifier(modifiers: number): number;
    getMouseModifier(ctrl: boolean, alt: boolean, shift: boolean): number;
    getMouseModifier(str: QString): number;
    getMouseModifier(modifiers: number): number;
    getMouseModifier(ctrl: boolean, alt: boolean, shift: boolean): number;
    getMouseModifier(str: QString): number;
    setUsePerPixelLighting(): any;
    getUsePerPixelLighting(): any;
    applyStyleColors(): any;
}
declare class DzActionMgr extends QMenuBar {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    defaultUp: boolean;
    nativeMenuBar: boolean;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    customActionListChanged(): void;
    customActionAdded(name: QString): void;
    customActionRemoved(name: QString): void;
    setAccel(className: QString, key: QKeySequence): void;
    setAccel(className: QString, key: QString): void;
    unsetAccel(key: QKeySequence): void;
    unsetAccel(key: QString): void;
    addCustomAction(text: QString, desc: QString, script: QString): QString;
    addCustomAction(text: QString, desc: QString, script: QString): QString;
    addCustomAction(text: QString, desc: QString, script: QString): QString;
    addCustomAction(text: QString, desc: QString, script: QString): QString;
    setCustomActionText(which: number, text: QString): void;
    setCustomActionDesc(which: number, desc: QString): void;
    setCustomActionScript(which: number, script: QString, isFile: boolean): void;
    setCustomActionScript(which: number, script: QString, isFile: boolean): void;
    setCustomActionAccel(which: number, shortcut: QKeySequence): void;
    setCustomActionAccel(which: number, shortcut: QString): void;
    setCustomActionIcon(which: number, iconFile: QString): void;
    setCustomActionShowTextWithIcon(which: number, onOff: boolean): void;
    removeCustomAction(which: number): void;
    removeAllCustomActions(): void;
    getCustomAction(which: number): DzAction;
    getCustomAction(name: QString): number;
    loadInterfaceFile(filename: QString): boolean;
    loadInterfaceFile(filename: QString): boolean;
    getNumActions(): number;
    getAction(which: number): DzAction;
    findAction(className: QString): DzAction;
    getNumPersistentMenus(): number;
    getPersistentMenu(which: number): DzPersistentMenu;
    findPersistentMenu(className: QString): DzPersistentMenu;
    getNumCustomActions(): number;
    findCustomAction(name: QString): number;
    getCustomActionName(which: number): QString;
    getCustomActionText(which: number): QString;
    getCustomActionDesc(which: number): QString;
    getCustomActionScript(which: number): QString;
    getCustomActionScript(which: number, script: QString, isFile: boolean): void;
    getCustomActionFile(which: number): QString;
    getCustomActionShortcut(which: number): QString;
    getCustomActionIcon(which: number): QString;
    saveInterfaceFiles(): boolean;
    saveMenusFile(filename: QString): boolean;
    saveToolBarsFile(filename: QString): boolean;
    saveActionsFile(filename: QString): boolean;
    saveCustomActionsFile(filename: QString): boolean;
    getMenu(): DzActionMenu;
    setActiveMenu(menu: DzActionMenu): void;
    getActiveMenu(): DzActionMenu;
    clearActiveMenu(): void;
    legalizeName(): any;
}
declare class DzPaneMgr extends QWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    NO_DOCKING: number;
    DOCK_LEFT: number;
    DOCK_TOP: number;
    DOCK_RIGHT: number;
    DOCK_BOTTOM: number;
    DOCK_CENTER: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    layoutListChanged(): void;
    activeLayoutAboutToChange(newLayoutIdx: number): void;
    activeLayoutChanged(which: number): void;
    toolbarListChanged(): void;
    activityBarEnabled(onOff: boolean): void;
    layoutRestored(filename: QString): void;
    orientTabsAlongTopChanged(onOff: boolean): void;
    workflowAssistanceModeChanged(): void;
    workflowAssistanceEnableStateChanged(onOff: boolean): void;
    setSessionLayout(filename: QString): DzError;
    saveLayout(filename: QString, description: QString): DzError;
    saveLayout(): void;
    saveLayout(filename: QString, description: QString): DzError;
    saveLayout(): void;
    restoreLayout(filename: QString): DzError;
    restoreLayout(filename: QString, executeScript: boolean): DzError;
    restoreLayout(root: QDomElement): void;
    restoreLayout(): void;
    restoreLayout(filename: QString): DzError;
    restoreLayout(filename: QString, executeScript: boolean): DzError;
    restoreLayout(root: QDomElement): void;
    restoreLayout(): void;
    showPane(pane: DzPane): DzError;
    showPane(className: QString): DzError;
    showPane(pane: DzPane): DzError;
    showPane(className: QString): DzError;
    showAllPanes(): void;
    hidePane(pane: DzPane): DzError;
    hidePane(className: QString): DzError;
    hidePane(pane: DzPane): DzError;
    hidePane(className: QString): DzError;
    hideAllPanes(): void;
    togglePane(pane: DzPane): DzError;
    togglePane(className: QString): DzError;
    togglePane(index: number): DzError;
    togglePane(pane: DzPane): DzError;
    togglePane(className: QString): DzError;
    togglePane(index: number): DzError;
    togglePane(pane: DzPane): DzError;
    togglePane(className: QString): DzError;
    togglePane(index: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    tearOffPane(pane: DzPane, x: number, y: number): DzError;
    tearOffPane(className: QString, x: number, y: number): DzError;
    tearOffPane(index: number, x: number, y: number): DzError;
    showPaneGroup(group: DzPaneGroup): DzError;
    showPaneGroup(which: number): DzError;
    showPaneGroup(group: DzPaneGroup): DzError;
    showPaneGroup(which: number): DzError;
    hidePaneGroup(group: DzPaneGroup): DzError;
    hidePaneGroup(which: number): DzError;
    hidePaneGroup(group: DzPaneGroup): DzError;
    hidePaneGroup(which: number): DzError;
    clearAllGroups(): void;
    movePaneGroup(group: DzPaneGroup, dock: number): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number, index: number, newLine: boolean): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number, index: number, newLine: boolean): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number, index: number, newLine: boolean): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number): DzError;
    movePaneGroup(group: DzPaneGroup, dock: number, index: number, newLine: boolean): DzError;
    createToolBar(name: QString): DzToolBar;
    removeToolBar(name: QString): void;
    removeAllToolBars(): void;
    hideAllToolBars(): void;
    createActivityLayout(name: QString, description: QString): DzActivityLayout;
    addActivityLayout(layout: DzActivityLayout): void;
    removeActivityLayout(name: QString): boolean;
    removeActivityLayout(which: number): boolean;
    removeActivityLayout(name: QString): boolean;
    removeActivityLayout(which: number): boolean;
    removeAllActivityLayouts(): void;
    setActiveActivityLayout(which: DzActivityLayout): void;
    setActiveActivityLayout(which: number): void;
    setActiveActivityLayout(which: DzActivityLayout): void;
    setActiveActivityLayout(which: number): void;
    enableActivityBar(onOff: boolean): void;
    setActivityBarImage(img: QString): void;
    loadNextActivityBarImage(): void;
    setPaneEnabled(pane: DzPane, enabled: boolean): DzError;
    setPaneEnabled(className: QString, enabled: boolean): DzError;
    setPaneEnabled(pane: DzPane, enabled: boolean): DzError;
    setPaneEnabled(className: QString, enabled: boolean): DzError;
    getSessionLayout(): QString;
    getDefaultLayoutNames(): String[];
    getDefaultLayout(): QString;
    getSimpleLayout(): QString;
    getBasicLayout(): QString;
    getStandardLayout(): QString;
    getAdvancedLayout(): QString;
    getProLayout(): any;
    getNumPanes(): number;
    getPaneList(): QObject[];
    getPaneGroupList(): QObject[];
    findPane(className: QString): DzPane;
    getNumPaneGroups(): number;
    getPaneGroup(which: number): DzPaneGroup;
    isUnpinnedMenu(pane: DzPane): boolean;
    getNumToolBars(): number;
    getToolBar(i: number): DzToolBar;
    findToolBar(name: QString): DzToolBar;
    getNumDockBars(): number;
    getDockBar(i: number): DzDockBar;
    findDockBar(className: QString): DzDockBar;
    findDockBarByName(name: QString): DzDockBar;
    getNumActivityLayouts(): number;
    getActivityLayout(which: number): DzActivityLayout;
    findActivityLayout(name: QString): DzActivityLayout;
    getActiveActivityLayout(): DzActivityLayout;
    getActiveActivityLayoutIndex(): number;
    isActivityBarEnabled(): boolean;
    getActivityBarImage(): QString;
    getActivityBarImageList(): String[];
    createEmptyPaneGroup(): DzPaneGroup;
    closeAllPaneGroupDlgs(): void;
    getPaneGroupDlg(which: number): DzPaneGroupDlg;
    getNumPaneGroupDlgs(): number;
    addPaneGroupDlg(dlg: DzPaneGroupDlg): void;
    removePaneGroupDlg(dlg: DzPaneGroupDlg): void;
    removePaneGroup(group: DzPaneGroup): void;
    setShowLessonStrip(onOff: boolean): void;
    getShowLessonStrip(): boolean;
    selectLesson(path: QString): boolean;
    setOrientTabsAlongTop(onOff: boolean): void;
    getOrientTabsAlongTop(): boolean;
    setUseWorkflowAssistance(onOff: boolean): void;
    getUseWorkflowAssistance(): boolean;
}
declare class DzInteractiveLessonMgr {
    objectName: string;
    progressWidth: number;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    started(): any;
    stepped(): any;
    stopped(): any;
    skipped(): any;
    begin(): any;
    stop(): any;
    scheduleStop(): any;
    skip(): any;
    scheduleSkip(): any;
    isRunning(): any;
    currentPath(): any;
    currentIndex(): any;
    currentType(): any;
    currentQuery(): any;
    menuHook(): any;
    menuHook(): any;
    iterate(): any;
    instructionTypes(): any;
    getInstruction(): any;
    getInstruction(): any;
    getInstruction(): any;
    getWidgetInstruction(): any;
    getWidgetInstruction(): any;
    getWidgetInstruction(): any;
    getActionInstruction(): any;
    getActionInstruction(): any;
    getActionInstruction(): any;
    getActivityInstruction(): any;
    getActivityInstruction(): any;
    getActivityInstruction(): any;
    getLayoutInstruction(): any;
    getLayoutInstruction(): any;
    getLayoutInstruction(): any;
    getDisplayInstruction(): any;
    getDisplayInstruction(): any;
    getRecordedInstructions(): any;
    startRecording(): any;
    finishRecording(): any;
    inherits(): any;
    className(): any;
}
declare class DzContentFolder extends DzBase {
    fullPath: string;
    folderName: string;
    label: string;
    icon: QObject;
    foldersAreLoaded: boolean;
    filesAreLoaded: boolean;
    canAddSubFolder: boolean;
    folderType: number;
    canDelete: boolean;
    canRename: boolean;
    isBuiltInContentFolder: boolean;
    NATIVE_TYPE: number;
    POSER_TYPE: number;
    IMPORT_TYPE: number;
    addedFolder(newFolder: DzContentFolder): void;
    removedFolder(folder: DzContentFolder): void;
    folderListChanged(): void;
    fileListChanged(): void;
    getParent(): DzContentFolder;
    refresh(reloadIcons: boolean): boolean;
    refresh(reloadIcons: boolean): boolean;
    getFirstFolder(): DzContentFolder;
    getFirstHiddenFolder(): DzContentFolder;
    getNext(): DzContentFolder;
    getFirstFile(): DzContentFile;
    getFirstHiddenFile(): DzContentFile;
    canMoveFile(file: DzContentFilePtr): boolean;
    canMoveFiles(files: DzContentFilePtr[]): boolean;
    moveFile(file: DzContentFilePtr): boolean;
    moveFiles(files: DzContentFilePtr[]): boolean;
    copyFile(file: DzContentFilePtr): boolean;
    copyFile(srcFilename: QString, tgtFilename: QString): boolean;
    copyFiles(files: DzContentFilePtr[]): boolean;
    hasSubFolders(): boolean;
    addSubFolder(folderName: QString): boolean;
    deleteFolder(): boolean;
    rename(newName: QString): boolean;
    isModifiable(): boolean;
}
declare class DzContentReplaceMgr extends QObject {
    ALWAYS_REPLACE: number;
    NEVER_REPLACE: number;
    ASK_WHEN_MATCHING: number;
    ASK_TO_REPLACE: number;
    contentReplaceModeChanged(mode: number): void;
    getReplaceMode(): number;
    setReplaceMode(mode: number): void;
    getNewContentPath(): QString;
    setNewContentPath(contentPath: QString): void;
    getNewContentType(): QString;
    setNewContentType(contentType: QString): void;
    getReplaceNodes(replaceNodes: DzNode[]): void;
    setReplaceNodes(replaceNodes: DzNode[]): void;
    getPotentialReplaceNodes(potentialReplaceNodes: DzNode[], baseNode: DzNode): void;
    getDefaultReplaceNodes(defaultReplaceNodes: DzNode[], baseNode: DzNode): void;
    updateReplaceNodes(baseNode: DzNode): void;
    removeReplaceNodes(): void;
    clearReplaceData(): void;
    initReplaceForContentLoad(path: QString, baseNode: DzNode): void;
    doReplace(): void;
}
declare class DzTopLevelAssetContainer extends DzAbstractAssetContainer {
    id: string;
    icon: QObject;
    tooltip: string;
    canCopyContainers: boolean;
    canInsertSubContainer: boolean;
    canDeleteContainer: boolean;
    canRenameContainer: boolean;
    canModifyAssets: boolean;
    useCount: number;
}
declare class DzCategoryAssetContainer extends DzAbstractAssetContainer {
    id: string;
    icon: QObject;
    tooltip: string;
    canCopyContainers: boolean;
    canInsertSubContainer: boolean;
    canDeleteContainer: boolean;
    canRenameContainer: boolean;
    canModifyAssets: boolean;
    useCount: number;
    updateChildren(): boolean;
    getIconForStandardCategory(folder: DzCategoryAssetContainer): DzPixmapPair;
    getCategoryTable(): DzDBCategoriesTable;
}
declare class DzIrayRenderer {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    aboutToRender(): any;
    renderFinished(): any;
    imagePrepared(): any;
    IPRRenderHandlerChanged(): any;
    shapeRenderBeginning(): any;
    shapeRenderFinished(): any;
    rendererModeChanged(): any;
    render(): any;
    customRender(): any;
    prepareImage(): any;
    compileShader(): any;
    compileShader(): any;
    getShaderInfo(): any;
    killRender(): any;
    bake(): any;
    autoBake(): any;
    stopBaking(): any;
    saveBakeImage(): any;
    textureConvert(): any;
    getShaderCompilerPath(): any;
    getTextureUtilityPath(): any;
    getShaderSearchPaths(): any;
    processShaderName(): any;
    getShaderPath(): any;
    getShaderPath(): any;
    getShaderFileName(): any;
    getShaderExtension(): any;
    isRendering(): any;
    getCurrentNode(): any;
    getIPRRenderHandler(): any;
    setIPRRenderHandler(): any;
    addRenderElements(): any;
    getRendererMode(): any;
    isIPRRendering(): any;
    getPropertyHolder(): any;
    inherits(): any;
    className(): any;
}
declare class DzRenderOptions extends QObject {
    renderImgToId: number;
    renderMovToId: number;
    renderImgFilename: string;
    renderMovFilename: string;
    renderSerFilename: string;
    lastRenderImgFilename: string;
    lastRenderMovFilename: string;
    lastRenderSerFilename: string;
    renderViewport: boolean;
    isAspectConstrained: boolean;
    aspect: number;
    aspectWidth: number;
    aspectHeight: number;
    imageSize: QObject;
    renderType: number;
    renderStyle: number;
    rayTraceDepth: number;
    openGLPasses: number;
    useGLSL: boolean;
    isCurrentFrameRender: boolean;
    getStartTime: QObject;
    startTime: QObject;
    getEndTime: QObject;
    endTime: QObject;
    useMotionBlur: boolean;
    motionBlurPct: number;
    motionBlurSamples: number;
    motionBlurOffset: number;
    xPixelSamples: number;
    yPixelSamples: number;
    shadowSamples: number;
    shadingRate: number;
    doubleSided: boolean;
    gain: number;
    gamma: number;
    pixelFilter: number;
    xFilterWidth: number;
    yFilterWidth: number;
    showPreview: boolean;
    gammaCorrection: number;
    ScreenShot: number;
    HardwareAssisted: number;
    Software: number;
    ActiveView: number;
    NewWindow: number;
    DirectToFile: number;
    MovieFile: number;
    ImageSeries: number;
    Normal: number;
    Cartoon: number;
    Box: number;
    Triangle: number;
    CatmullRom: number;
    Gaussian: number;
    Sinc: number;
    GCOff: number;
    GCOn: number;
    aspectChanged(val: number): void;
    aspectChanged(w: number, h: number): void;
    aspectChanged(val: number): void;
    aspectChanged(w: number, h: number): void;
    renderImgTargetChanged(id: number): void;
    renderMovTargetChanged(id: number): void;
    renderImgFilenameChanged(filename: QString): void;
    renderMovFilenameChanged(filename: QString): void;
    renderSerFilenameChanged(filename: QString): void;
    renderViewportChanged(onOff: boolean): void;
    aspectConstrainChanged(onOff: boolean): void;
    imageSizeChanged(size: QSize): void;
    renderTypeChanged(type: number): void;
    renderStyleChanged(style: number): void;
    rayTraceDepthChanged(depth: number): void;
    openGLPassesChanged(passes: number): void;
    useGLSLChanged(onOff: boolean): void;
    renderCurrentFrameChanged(onOff: boolean): void;
    startTimeChanged(time: DzTime): void;
    endTimeChanged(time: DzTime): void;
    useMotionBlurChanged(onOff: boolean): void;
    motionBlurPctChanged(pct: number): void;
    motionBlurOffsetChanged(offset: number): void;
    motionBlurSamplesChanged(samples: number): void;
    xPixelSamplesChanged(samples: number): void;
    yPixelSamplesChanged(samples: number): void;
    shadowSamplesChanged(samples: number): void;
    shadingRateChanged(rate: number): void;
    doubleSidedChanged(onOff: boolean): void;
    gainChanged(gain: number): void;
    gammaChanged(gamma: number): void;
    pixelFilterChanged(filter: number): void;
    gammaCorrectionChanged(): any;
    xFilterWidthChanged(width: number): void;
    yFilterWidthChanged(width: number): void;
    showPreviewChanged(onoff: boolean): void;
    settingsChanged(): void;
    defaultsRestored(): void;
    setAspectRatio(widthRatio: number, heightRatio: number): void;
    applyChanges(): void;
    resetOptions(): void;
    restoreDefaultSettings(): void;
    setToDefaults(): void;
    gammaCorrectColor(): any;
}
declare class DzRenderOptionsHelper {
    objectName: string;
    name: string;
    elementID: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    propertyAdded(): any;
    propertyRemoved(): any;
    propertyListChanged(): any;
    propertyListInTreeChanged(): any;
    propertyTreeChanged(): any;
    privatePropertyAdded(): any;
    privatePropertyRemoved(): any;
    privatePropertyListChanged(): any;
    privatePropertyListInTreeChanged(): any;
    privatePropertyTreeChanged(): any;
    labelChanged(): any;
    parentChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    setAttributes(): any;
    setName(): any;
    setLabel(): any;
    update(): any;
    clearAnimData(): any;
    clearAllAnimData(): any;
    addProperty(): any;
    insertProperty(): any;
    removeProperty(): any;
    removeProperty(): any;
    moveProperty(): any;
    addPrivateProperty(): any;
    insertPrivateProperty(): any;
    removePrivateProperty(): any;
    removePrivateProperty(): any;
    movePrivateProperty(): any;
    addDataItem(): any;
    removeDataItem(): any;
    deleteDataItem(): any;
    copyFrom(): any;
    setLoadScript(): any;
    beginEdit(): any;
    finishEdit(): any;
    cancelEdit(): any;
    shouldSortOnLoad(): any;
    getLabel(): any;
    getAttributes(): any;
    getNumProperties(): any;
    getProperty(): any;
    getPropertyList(): any;
    isPropertyNameUnique(): any;
    isPropertyNameUnique(): any;
    findProperty(): any;
    findProperty(): any;
    findPropertyByLabel(): any;
    findPropertyByLabel(): any;
    getPropertyGroups(): any;
    findMatchingProperty(): any;
    getNumPrivateProperties(): any;
    getPrivateProperty(): any;
    getPrivatePropertyList(): any;
    isPrivatePropertyNameUnique(): any;
    isPrivatePropertyNameUnique(): any;
    findPrivateProperty(): any;
    findPrivateProperty(): any;
    findPrivatePropertyByLabel(): any;
    findPrivatePropertyByLabel(): any;
    getPrivatePropertyGroups(): any;
    getNumDataItems(): any;
    getDataItem(): any;
    getDataItemList(): any;
    isDataItemNameUnique(): any;
    isDataItemNameUnique(): any;
    findDataItem(): any;
    getLoadScript(): any;
    copyToClipboard(): any;
    copyToClipboard(): any;
    getNumElementChildren(): any;
    getElementChild(): any;
    getElementParent(): any;
    inEdit(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomData(): any;
    duplicateMissingProperties(): any;
    duplicateMissingPrivateProperties(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    autoHeadlampModeChanged(): any;
    getHeadlampaAutoMode(): any;
    setHeadlampAutoMode(): any;
    inherits(): any;
    className(): any;
}
declare class DzDelightRenderer {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    aboutToRender(): any;
    renderFinished(): any;
    imagePrepared(): any;
    IPRRenderHandlerChanged(): any;
    shapeRenderBeginning(): any;
    shapeRenderFinished(): any;
    rendererModeChanged(): any;
    render(): any;
    customRender(): any;
    prepareImage(): any;
    compileShader(): any;
    compileShader(): any;
    getShaderInfo(): any;
    killRender(): any;
    bake(): any;
    autoBake(): any;
    stopBaking(): any;
    saveBakeImage(): any;
    textureConvert(): any;
    getShaderCompilerPath(): any;
    getTextureUtilityPath(): any;
    getShaderSearchPaths(): any;
    processShaderName(): any;
    getShaderPath(): any;
    getShaderPath(): any;
    getShaderFileName(): any;
    getShaderExtension(): any;
    isRendering(): any;
    getCurrentNode(): any;
    getIPRRenderHandler(): any;
    setIPRRenderHandler(): any;
    addRenderElements(): any;
    getRendererMode(): any;
    resetIPRHandler(): any;
    inherits(): any;
    className(): any;
}
declare class DzTextureConvertorOptions {
    objectName: string;
    renderImgToId: number;
    renderMovToId: number;
    renderImgFilename: string;
    renderMovFilename: string;
    renderSerFilename: string;
    lastRenderImgFilename: string;
    lastRenderMovFilename: string;
    lastRenderSerFilename: string;
    renderViewport: boolean;
    isAspectConstrained: boolean;
    aspect: number;
    aspectWidth: number;
    aspectHeight: number;
    imageSize: QObject;
    renderType: number;
    renderStyle: number;
    rayTraceDepth: number;
    openGLPasses: number;
    useGLSL: boolean;
    isCurrentFrameRender: boolean;
    getStartTime: QObject;
    startTime: QObject;
    getEndTime: QObject;
    endTime: QObject;
    useMotionBlur: boolean;
    motionBlurPct: number;
    motionBlurSamples: number;
    motionBlurOffset: number;
    xPixelSamples: number;
    yPixelSamples: number;
    shadowSamples: number;
    shadingRate: number;
    doubleSided: boolean;
    gain: number;
    gamma: number;
    pixelFilter: number;
    xFilterWidth: number;
    yFilterWidth: number;
    showPreview: boolean;
    gammaCorrection: number;
    convertImgPath: string;
    imageType: string;
    presetId: number;
    hardwareCutOffSize: number;
    forceResize: boolean;
    ScreenShot: number;
    HardwareAssisted: number;
    Software: number;
    ActiveView: number;
    NewWindow: number;
    DirectToFile: number;
    MovieFile: number;
    ImageSeries: number;
    Normal: number;
    Cartoon: number;
    Box: number;
    Triangle: number;
    CatmullRom: number;
    Gaussian: number;
    Sinc: number;
    GCOff: number;
    GCOn: number;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    aspectChanged(): any;
    aspectChanged(): any;
    renderImgTargetChanged(): any;
    renderMovTargetChanged(): any;
    renderImgFilenameChanged(): any;
    renderMovFilenameChanged(): any;
    renderSerFilenameChanged(): any;
    renderViewportChanged(): any;
    aspectConstrainChanged(): any;
    imageSizeChanged(): any;
    renderTypeChanged(): any;
    renderStyleChanged(): any;
    rayTraceDepthChanged(): any;
    openGLPassesChanged(): any;
    useGLSLChanged(): any;
    renderCurrentFrameChanged(): any;
    startTimeChanged(): any;
    endTimeChanged(): any;
    useMotionBlurChanged(): any;
    motionBlurPctChanged(): any;
    motionBlurOffsetChanged(): any;
    motionBlurSamplesChanged(): any;
    xPixelSamplesChanged(): any;
    yPixelSamplesChanged(): any;
    shadowSamplesChanged(): any;
    shadingRateChanged(): any;
    doubleSidedChanged(): any;
    gainChanged(): any;
    gammaChanged(): any;
    pixelFilterChanged(): any;
    gammaCorrectionChanged(): any;
    xFilterWidthChanged(): any;
    yFilterWidthChanged(): any;
    showPreviewChanged(): any;
    settingsChanged(): any;
    defaultsRestored(): any;
    setAspectRatio(): any;
    applyChanges(): any;
    resetOptions(): any;
    restoreDefaultSettings(): any;
    setToDefaults(): any;
    gammaCorrectColor(): any;
    imageTypeChanged(): any;
    inherits(): any;
    className(): any;
}
declare class Dz3DelightTextureBaker {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    autoBake(): any;
    manualBake(): any;
    refreshBakeTextures(): any;
    packImageFiles(): any;
    extractImageFiles(): any;
    finishBaking(): any;
    autoBakeOnMaterialSettingsChanged(): any;
    sceneLoadStarting(): any;
    sceneLoaded(): any;
    sceneCleared(): any;
    sceneClearStarting(): any;
    sceneFilenameChanged(): any;
    saveFileFinished(): any;
    autoBakeChanged(): any;
    useBakeChanged(): any;
    inherits(): any;
    className(): any;
}
declare class QRectWrapper {
    objectName: string;
    bottom: number;
    center: QObject;
    height: number;
    left: number;
    right: number;
    top: number;
    width: number;
    x: number;
    y: number;
    name: string;
}
declare class DzDefaultMaterial extends DzMaterial {
    elementID: number;
    renderPriority: number;
    propertyListInTreeChanged(): any;
    privatePropertyListInTreeChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    calcNeedsPtexSignal(): any;
    tagsChanged(): any;
    isOpaque(): boolean;
    getTags(): any;
    getTagsControl(): any;
    needsPtex(): any;
    duplicateOrDefaultMaterial(): any;
    calcNeedsPtex(): any;
    setDiffuseStrength(val: number): void;
    setDiffuseValueMap(img: DzTexture): void;
    setAmbientStrength(val: number): void;
    setAmbientValueMap(img: DzTexture): void;
    setAmbientColor(color: QColor): void;
    setAmbientColorMap(img: DzTexture): void;
    setBumpMap(img: DzTexture): void;
    setBumpStrength(val: number): void;
    setBumpMin(val: number): void;
    setBumpMax(val: number): void;
    setDisplacementMap(img: DzTexture): void;
    setDisplacementStrength(val: number): void;
    setDisplacementMin(val: number): void;
    setDisplacementMax(val: number): void;
    setReflectionColor(color: QColor): void;
    setReflectionMap(img: DzTexture): void;
    setReflectionStrength(val: number): void;
    setReflectionValueMap(img: DzTexture): void;
    setRefractionColor(color: QColor): void;
    setRefractionColorMap(img: DzTexture): void;
    setRefractionStrength(val: number): void;
    setRefractionValueMap(img: DzTexture): void;
    setSheenColor(): any;
    setSheenColorMap(): any;
    setScatterColor(): any;
    setScatterColorMap(): any;
    setThickness(): any;
    setThicknessValueMap(): any;
    setIndexOfRefraction(val: number): void;
    setSurfaceType(val: number): void;
    setGlossinessStrength(size: number): void;
    setGlossinessValueMap(img: DzTexture): void;
    setMultThroughOpacity(onOff: boolean): void;
    setSpecularStrength(size: number): void;
    setSpecularValueMap(img: DzTexture): void;
    setSpecularColor(color: QColor): void;
    setSpecularColorMap(img: DzTexture): void;
    setNormalValueMap(img: DzTexture): void;
    setHorizontalTiles(tiles: number): void;
    setVerticalTiles(tiles: number): void;
    setHorizontalOffset(offset: number): void;
    setVerticalOffset(offset: number): void;
    getDiffuseStrength(): number;
    getDiffuseValueMap(): DzTexture;
    getAmbientStrength(): number;
    getAmbientValueMap(): DzTexture;
    getAmbientColor(): QColor;
    getAmbientColorMap(): DzTexture;
    getBumpStrength(): number;
    getBumpMap(): DzTexture;
    getBumpMin(): number;
    getBumpMax(): number;
    getDisplacementStrength(): number;
    getDisplacementMin(): number;
    getDisplacementMax(): number;
    getDisplacementMap(): DzTexture;
    getReflectionColor(): QColor;
    getReflectionMap(): DzTexture;
    getReflectionStrength(): number;
    getReflectionValueMap(): DzTexture;
    getRefractionColor(): QColor;
    getRefractionColorMap(): DzTexture;
    getRefractionStrength(): number;
    getRefractionValueMap(): DzTexture;
    getSheenColor(): any;
    getSheenColorMap(): any;
    getScatterColor(): any;
    getScatterColorMap(): any;
    getThickness(): any;
    getThicknessValueMap(): any;
    getIndexOfRefraction(): number;
    getSurfaceType(): number;
    isMultThroughOpacity(): boolean;
    getSpecularColor(): QColor;
    getSpecularColorMap(): DzTexture;
    getSpecularStrength(): number;
    getSpecularValueMap(): DzTexture;
    getGlossinessStrength(): number;
    getGlossinessValueMap(): DzTexture;
    getNormalValueMap(): DzTexture;
    getHorizontalOffset(): number;
    getHorizontalTiles(): number;
    getVerticalOffset(): number;
    getVerticalTiles(): number;
    getDiffuseColorControl(): DzColorProperty;
    getDiffuseStrengthControl(): DzFloatProperty;
    getAmbientColorControl(): DzColorProperty;
    getAmbientStrengthControl(): DzFloatProperty;
    getSpecularColorControl(): DzColorProperty;
    getSpecularStrengthControl(): DzFloatProperty;
    getGlossinessControl(): DzFloatProperty;
    getOpacityControl(): DzFloatProperty;
    getBumpControl(): DzFloatProperty;
    getBumpMinControl(): DzFloatProperty;
    getBumpMaxControl(): DzFloatProperty;
    getDisplacementControl(): DzFloatProperty;
    getDisplacementMinControl(): DzFloatProperty;
    getDisplacementMaxControl(): DzFloatProperty;
    getReflectionColorControl(): DzColorProperty;
    getReflectionStrengthControl(): DzFloatProperty;
    getRefractionColorControl(): DzColorProperty;
    getRefractionStrengthControl(): DzFloatProperty;
    getSheenColorControl(): any;
    getScatterColorControl(): any;
    getThicknessControl(): any;
    getIndexOfRefractionControl(): DzFloatProperty;
    getSurfaceTypeControl(): DzEnumProperty;
    getMultThroughOpacityControl(): DzBoolProperty;
    getNormalValueMapControl(): DzImageProperty;
    getHorizontalTilesControl(): DzFloatProperty;
    getHorizontalOffsetControl(): DzFloatProperty;
    getVerticalTilesControl(): DzFloatProperty;
    getVerticalOffsetControl(): DzFloatProperty;
}
declare class DzColorProperty extends DzIntProperty {
    emitValueChangedOnSceneClear: boolean;
    HSV: number;
    HSL: number;
    RGB: number;
    NO_INTEREST: number;
    X_INTEREST: number;
    Y_INTEREST: number;
    Z_INTEREST: number;
    ALL_INTEREST: number;
    dynamicallyHiddenChanged(): any;
    dynamicallyAutoFollowChanged(): any;
    controllerListChanged(): any;
    slaveControllerListChanged(): any;
    aliasListChanged(): any;
    keysAreClamped(): any;
    setKeysAreClamped(): any;
    toggleKeysAreClamped(): any;
    setDynamicallyHidden(): any;
    setDynamicallyAutoFollow(): any;
    currentValueIsDefinitionValue(): any;
    doCopyBaseData(): any;
    getEmitValueChangedOnSceneClear(): any;
    setEmitValueChangedOnSceneClear(): any;
    isDynamicallyHidden(): any;
    isDynamicallyAutoFollow(): any;
    emitRemoved(): any;
    invalidateCacheValue(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    setWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    isMappableChanged(): any;
    defaultMapGammaChanged(): any;
    defaultMapTextureTypeChanged(): any;
    textureModifierChanged(): any;
    textureModifierFlagsChanged(): any;
    getDefaultMapGamma(): any;
    setDefaultMapGamma(): any;
    getDefaultMapTextureType(): any;
    setDefaultMapTextureType(): any;
    setTextureModifier(): any;
    getTextureModifier(): any;
    setTextureModifierFlags(): any;
    getTextureModifierFlags(): any;
    getNDoubleValue(): any;
    getNDoubleValue(): any;
    getNValueCount(): any;
    getValueAsFloatColor(): any;
    getValueAsFloatColor(): any;
    getValueAsVec3(): any;
    getValueAsVec3(): any;
    getValueAsVec2(): any;
    getValueAsVec2(): any;
    getValueAsInt2(): any;
    getValueAsInt2(): any;
    getValueAsDouble(): any;
    getValueAsDouble(): any;
    emitDefaultMapGammaChanged(): any;
    emitDefaultMapTextureTypeChanged(): any;
    emitTextureModifierChanged(): any;
    emitTextureModifierFlagsChanged(): any;
    emitIsMappableChanged(): any;
    animationBlendModeChanged(): any;
    setColorValue(tm: DzTime, val: QColor): void;
    setColorValue(val: QColor): void;
    setColorValue(tm: DzTime, val: QColor): void;
    setColorValue(val: QColor): void;
    setDefaultColorValue(val: QColor): void;
    setKeyColorValue(i: number, val: QColor): void;
    getColorValue(tm: DzTime): QColor;
    getColorValue(): QColor;
    getColorValue(tm: DzTime): QColor;
    getColorValue(): QColor;
    getDefaultColorValue(): QColor;
    getRawColorValue(tm: DzTime): QColor;
    getRawColorValue(): QColor;
    getRawColorValue(tm: DzTime): QColor;
    getRawColorValue(): QColor;
    getKeyColorValue(i: number): QColor;
    animationBlendModeToStr(): any;
    animationBlendModeFromStr(): any;
    setAnimationBlendMode(): any;
    getAnimationBlendMode(): any;
    emitAnimationBlendModeChanged(): any;
}
declare class DzActiveViewportDimensionsController {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    currentValueChanged(): any;
    invalidateDimensions(): any;
    inherits(): any;
    className(): any;
}
declare class DzViewport extends QFrame {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    NoFrame: number;
    Box: number;
    Panel: number;
    WinPanel: number;
    HLine: number;
    VLine: number;
    StyledPanel: number;
    Plain: number;
    Raised: number;
    Sunken: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    viewChanged(view: DzView): void;
    dimensionsChanged(): void;
    view3dCurrentDimensionsChanged(): any;
    setView(view: DzView): void;
    isCustom(): any;
    get3DViewport(): Dz3DViewport;
    getManager(): DzViewportMgr;
    getView(): DzView;
    setViewVisible(): any;
    interactiveLessonQuery(): any;
}
declare class DzUniversalTool {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    drawnDataChanged(): any;
    activated(): any;
    deactivated(): any;
    rebuildMenu(): any;
    getOptionsMenu(): any;
    changedLineWidth(): any;
    lineWidth(): any;
    setLineWidth(): any;
    getNodeClickMode(): any;
    changedSpace(): any;
    changedTransMaster(): any;
    changedTransX(): any;
    changedTransY(): any;
    changedTransZ(): any;
    changedTransAux(): any;
    changedRotMaster(): any;
    changedRotX(): any;
    changedRotY(): any;
    changedRotZ(): any;
    changedRotFree(): any;
    changedRotCam(): any;
    changedScaleMaster(): any;
    changedScaleX(): any;
    changedScaleY(): any;
    changedScaleZ(): any;
    changedScaleAux(): any;
    changedGuides(): any;
    changedGuidesColor(): any;
    changedSnapTrans(): any;
    changedSnapRot(): any;
    changedSnapScale(): any;
    changedSnapValueTrans(): any;
    changedSnapValueRot(): any;
    changedSnapValueScale(): any;
    changedShowPins(): any;
    changedShowHome(): any;
    space(): any;
    spaceAdjusted(): any;
    transMaster(): any;
    transX(): any;
    transY(): any;
    transZ(): any;
    transAux(): any;
    rotMaster(): any;
    rotX(): any;
    rotY(): any;
    rotZ(): any;
    rotFree(): any;
    rotCam(): any;
    scaleMaster(): any;
    scaleX(): any;
    scaleY(): any;
    scaleZ(): any;
    scaleAux(): any;
    snapTrans(): any;
    snapRot(): any;
    snapScale(): any;
    guides(): any;
    guidesColor(): any;
    snapValueTrans(): any;
    snapValueRot(): any;
    snapValueScale(): any;
    showHome(): any;
    showPins(): any;
    setSpace(): any;
    enableTransMaster(): any;
    enableTransX(): any;
    enableTransY(): any;
    enableTransZ(): any;
    enableTransAux(): any;
    enableRotMaster(): any;
    enableRotX(): any;
    enableRotY(): any;
    enableRotZ(): any;
    enableRotFree(): any;
    enableRotCam(): any;
    enableScaleMaster(): any;
    enableScaleX(): any;
    enableScaleY(): any;
    enableScaleZ(): any;
    enableScaleAux(): any;
    enableSnapTrans(): any;
    enableSnapRot(): any;
    enableSnapScale(): any;
    enableGuides(): any;
    setGuidesColor(): any;
    setSnapValueTrans(): any;
    setSnapValueRot(): any;
    setSnapValueScale(): any;
    enableShowHome(): any;
    enableShowPins(): any;
    stylize(): any;
    inherits(): any;
    className(): any;
}
declare class DzActionMenu extends QObject {
    menuType: number;
    CustomMenu: number;
    PaneMenu: number;
    ViewToolMenu: number;
    SaveAsMenu: number;
    OpenRecentMenu: number;
    itemListChanged(): void;
    clear(): void;
    insertItem(item: DzActionMenuItem, at: number): void;
    insertItem(item: DzActionMenuItem, at: number): void;
    removeItem(item: DzActionMenuItem): void;
    insertAction(action: QString, at: number): void;
    insertAction(action: QString, at: number): void;
    insertCustomAction(action: QString, at: number): void;
    insertCustomAction(action: QString, at: number): void;
    insertFileOpenAction(): any;
    insertFileOpenAction(): any;
    insertFileOpenAction(): any;
    insertFileMergeAction(): any;
    insertFileMergeAction(): any;
    insertFileMergeAction(): any;
    insertMenu(text: QString, menu: DzActionMenu, at: number): void;
    insertMenu(text: QString, menu: DzActionMenu, at: number): void;
    insertSeparator(where: number): void;
    insertSeparator(where: number): void;
    getSubMenu(name: QString): DzActionMenu;
    simplifySeparators(): void;
    hasItems(): boolean;
    getNumItems(): number;
    getItem(which: number): DzActionMenuItem;
    getItemList(): QObject[];
    findSubMenu(name: QString): DzActionMenu;
    exec(pos: QPoint): void;
    exec(): void;
    exec(pos: QPoint): void;
    exec(): void;
    getMenu(): QMenu;
}
declare class DzActivityLayout extends DzRefCountedItem {
    label: string;
    description: string;
    labelChanged(label: QString): void;
    setToolbarEnabled(toolbar: QString, onOff: boolean): void;
    isToolBarEnabled(toolbar: QString): boolean;
    clearMemorizedState(): void;
}
declare class QSizeWrapper {
    objectName: string;
    width: number;
    height: number;
    name: string;
}
declare class DzDBCategoriesTableWrapper {
    objectName: string;
    rowID: number;
    categoryName: string;
    isVendor: boolean;
    isUnassigned: boolean;
    newCount: number;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    getIsDirty(): any;
    getWasFetched(): any;
    insert(): any;
    insertDirect(): any;
    update(): any;
    fetch(): any;
    removeObj(): any;
    markChanged(): any;
    updateList(): any;
    insertList(): any;
    insertList(): any;
    getCategoryParent(): any;
    setCategoryParent(): any;
    getCategoryIDPath(): any;
    getCategoryPath(): any;
    isChildOfCategory(): any;
    createdByFind(): any;
    getSubCategories(): any;
    createSubCategory(): any;
    createSubCategory(): any;
    addSubCategory(): any;
    addContent(): any;
    addContent(): any;
    removeContent(): any;
    removeContent(): any;
    removeContentIfVendor(): any;
    getContent(): any;
    getContentInstances(): any;
    findCategory(): any;
    findCategory(): any;
    findCategory(): any;
    inherits(): any;
    className(): any;
}
declare class DzIrayPropertyHolder {
    objectName: string;
    name: string;
    elementID: number;
    renderToCanvases: boolean;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    propertyAdded(): any;
    propertyRemoved(): any;
    propertyListChanged(): any;
    propertyListInTreeChanged(): any;
    propertyTreeChanged(): any;
    privatePropertyAdded(): any;
    privatePropertyRemoved(): any;
    privatePropertyListChanged(): any;
    privatePropertyListInTreeChanged(): any;
    privatePropertyTreeChanged(): any;
    labelChanged(): any;
    parentChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    setAttributes(): any;
    setName(): any;
    setLabel(): any;
    update(): any;
    clearAnimData(): any;
    clearAllAnimData(): any;
    addProperty(): any;
    insertProperty(): any;
    removeProperty(): any;
    removeProperty(): any;
    moveProperty(): any;
    addPrivateProperty(): any;
    insertPrivateProperty(): any;
    removePrivateProperty(): any;
    removePrivateProperty(): any;
    movePrivateProperty(): any;
    addDataItem(): any;
    removeDataItem(): any;
    deleteDataItem(): any;
    copyFrom(): any;
    setLoadScript(): any;
    beginEdit(): any;
    finishEdit(): any;
    cancelEdit(): any;
    shouldSortOnLoad(): any;
    getLabel(): any;
    getAttributes(): any;
    getNumProperties(): any;
    getProperty(): any;
    getPropertyList(): any;
    isPropertyNameUnique(): any;
    isPropertyNameUnique(): any;
    findProperty(): any;
    findProperty(): any;
    findPropertyByLabel(): any;
    findPropertyByLabel(): any;
    getPropertyGroups(): any;
    findMatchingProperty(): any;
    getNumPrivateProperties(): any;
    getPrivateProperty(): any;
    getPrivatePropertyList(): any;
    isPrivatePropertyNameUnique(): any;
    isPrivatePropertyNameUnique(): any;
    findPrivateProperty(): any;
    findPrivateProperty(): any;
    findPrivatePropertyByLabel(): any;
    findPrivatePropertyByLabel(): any;
    getPrivatePropertyGroups(): any;
    getNumDataItems(): any;
    getDataItem(): any;
    getDataItemList(): any;
    isDataItemNameUnique(): any;
    isDataItemNameUnique(): any;
    findDataItem(): any;
    getLoadScript(): any;
    copyToClipboard(): any;
    copyToClipboard(): any;
    getNumElementChildren(): any;
    getElementChild(): any;
    getElementParent(): any;
    inEdit(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomData(): any;
    duplicateMissingProperties(): any;
    duplicateMissingPrivateProperties(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    settingsChanged(): any;
    toneMapperChanged(): any;
    environmentChanged(): any;
    renderOptionsChanged(): any;
    renderModeChanged(): any;
    canvasDefitionListChanged(): any;
    canvasNameChanged(): any;
    canvasTypeChanged(): any;
    renderToCanvasesChanged(): any;
    nodeListChanged(): any;
    idListChanged(): any;
    renderContextOptionsChanged(): any;
    activeCanvasChanged(): any;
    getMaxSamples(): any;
    getRenderMode(): any;
    getNumCanvasDefinitions(): any;
    getCanvasDefinition(): any;
    findCanvasDefition(): any;
    findCanvasDefition(): any;
    removeCanvasDefition(): any;
    removeCanvasDefition(): any;
    clearCanvasDefitions(): any;
    getAlphaType(): any;
    addNode(): any;
    removeNode(): any;
    hasNode(): any;
    removeList(): any;
    setNodes(): any;
    getNodes(): any;
    hasNodeList(): any;
    getLists(): any;
    clearNodeLists(): any;
    renameNodeList(): any;
    getExpandedLPE(): any;
    getExpandedLPE(): any;
    inherits(): any;
    className(): any;
}
declare class DzDelightIPRRenderHandler {
    objectName: string;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    renderStarted(): any;
    renderPaused(): any;
    renderRestarted(): any;
    renderFinished(): any;
    unsupportedEdit(): any;
    renderProgress(): any;
    render(): any;
    customRender(): any;
    addNode(): any;
    addLight(): any;
    activeCameraChanged(): any;
    isRendering(): any;
    stopRendering(): any;
    pauseRendering(): any;
    restartRendering(): any;
    isPaused(): any;
    emitRenderProgress(): any;
    lightAdded(): any;
    nodeAdded(): any;
    getRenderer(): any;
    inherits(): any;
    className(): any;
}
declare class DzPropertyGroup extends DzBase {
    parentChanged(newParent: DzPropertyGroup): void;
    addedChild(newChild: DzPropertyGroup): void;
    removedChild(child: DzPropertyGroup): void;
    childListChanged(): void;
    treeChanged(): void;
    propertyVisiblityChanged(): any;
    getAllPaths(): String[];
    getNumProperties(): number;
    getProperty(i: number): DzProperty;
    findProperty(): any;
    findProperty(): any;
    findProperty(): any;
    setUniquePropertyLabel(prop: DzProperty): void;
    movePropertyToIndex(prop: DzProperty, newIndex: number): boolean;
    movePropertyToIndex(propName: QString, newIndex: number): boolean;
    movePropertyToIndex(curIndex: number, newIndex: number): boolean;
    movePropertyToIndex(prop: DzProperty, newIndex: number): boolean;
    movePropertyToIndex(propName: QString, newIndex: number): boolean;
    movePropertyToIndex(curIndex: number, newIndex: number): boolean;
    indexOfProperty(prop: DzProperty): number;
    getPath(): QString;
    getParent(): DzPropertyGroup;
    findSibling(name: QString): DzPropertyGroup;
    getNextSibling(): DzPropertyGroup;
    getPreviousSibling(): any;
    getFirstChild(): DzPropertyGroup;
    findChild(name: QString): DzPropertyGroup;
    getTree(): DzPropertyGroupTree;
    moveChildToIndex(childName: QString, newIndex: number): boolean;
    getRegion(): DzGeometryRegion;
    isRegion(): boolean;
    setCollapsed(onOff: boolean): void;
    getCollapsed(): boolean;
    sort(): void;
    getDefaultGroupName(): any;
}
declare class QColorWrapper {
    objectName: string;
    red: number;
    blue: number;
    green: number;
    alpha: number;
    hue: number;
    name: string;
    rgb: number;
    saturation: number;
    value: number;
}
declare class DzStringProperty extends DzProperty {
    emitValueChangedOnSceneClear: boolean;
    dynamicallyHiddenChanged(): any;
    dynamicallyAutoFollowChanged(): any;
    controllerListChanged(): any;
    slaveControllerListChanged(): any;
    aliasListChanged(): any;
    keysAreClamped(): any;
    setKeysAreClamped(): any;
    toggleKeysAreClamped(): any;
    setDynamicallyHidden(): any;
    setDynamicallyAutoFollow(): any;
    currentValueIsDefinitionValue(): any;
    doCopyBaseData(): any;
    getEmitValueChangedOnSceneClear(): any;
    setEmitValueChangedOnSceneClear(): any;
    isDynamicallyHidden(): any;
    isDynamicallyAutoFollow(): any;
    emitRemoved(): any;
    invalidateCacheValue(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    setWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    setValue(val: QString): boolean;
    getValue(): QString;
    setAdvanceEditorWgtClass(): any;
    getAdvanceEditorWgtClass(): any;
}
declare class DzImageProperty extends DzProperty {
    emitValueChangedOnSceneClear: boolean;
    dynamicallyHiddenChanged(): any;
    dynamicallyAutoFollowChanged(): any;
    controllerListChanged(): any;
    slaveControllerListChanged(): any;
    aliasListChanged(): any;
    keysAreClamped(): any;
    setKeysAreClamped(): any;
    toggleKeysAreClamped(): any;
    setDynamicallyHidden(): any;
    setDynamicallyAutoFollow(): any;
    currentValueIsDefinitionValue(): any;
    doCopyBaseData(): any;
    getEmitValueChangedOnSceneClear(): any;
    setEmitValueChangedOnSceneClear(): any;
    isDynamicallyHidden(): any;
    isDynamicallyAutoFollow(): any;
    emitRemoved(): any;
    invalidateCacheValue(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    addValueToSettings(): any;
    addValueToSettings(): any;
    setValueFromSettings(): any;
    setValueFromSettings(): any;
    setWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    getWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    hasWidgetClassOverride(): any;
    defaultMapGammaChanged(): any;
    defaultMapTextureTypeChanged(): any;
    textureModifierChanged(): any;
    textureModifierFlagsChanged(): any;
    setValue(val: DzTexture): boolean;
    setValue(imgFile: QString): boolean;
    setValue(val: DzTexture): boolean;
    setValue(imgFile: QString): boolean;
    getValue(): DzTexture;
    getDefaultMapGamma(): any;
    setDefaultMapGamma(): any;
    getDefaultMapTextureType(): any;
    setDefaultMapTextureType(): any;
    setTextureModifier(): any;
    getTextureModifier(): any;
    setTextureModifierFlags(): any;
    getTextureModifierFlags(): any;
    emitDefaultMapGammaChanged(): any;
    emitDefaultMapTextureTypeChanged(): any;
    emitTextureModifierChanged(): any;
    emitTextureModifierFlagsChanged(): any;
}
declare class DzFloatColor {
    objectName: string;
    red: number;
    blue: number;
    green: number;
    alpha: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    getColor(): any;
    getGreyscale(): number;
    getGrayscale(): any;
    getMaxRGBValue(): any;
    getRelativeLuminance(): any;
    getRgba(): any;
    setRgba(): any;
    setValue(r: number, g: number, b: number, a: number): void;
    setValue(r: number, g: number, b: number, a: number): void;
    getHsv(): any;
    setHsv(): any;
    setHsv(): any;
    setHsv(): any;
    getHsl(): any;
    setHsl(): any;
    setHsl(): any;
    setHsl(): any;
    clampedMin(): any;
    clampedMin(): any;
    clampMin(): any;
    clampMin(): any;
    clampedMax(): any;
    clampedMax(): any;
    clampMax(): any;
    clampMax(): any;
    clamped(): any;
    clamped(): any;
    clamp(): any;
    clamp(): any;
    modulate(): any;
    modulate(): any;
    modulo(): any;
    modulo(): any;
    equals(): any;
    equals(): any;
    linearizeColor(): any;
    linearizeColor(): any;
    linearizeColor(): any;
    gammaColor(): any;
    gammaColor(): any;
    gammaColor(): any;
}
declare class DzVec2 {
    objectName: string;
    x: number;
    y: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    length(): any;
    lengthSquared(): any;
    normalized(): any;
    cross(): any;
    dot(): any;
    add(): any;
    subtract(): any;
    multiply(): any;
    divide(): any;
    makeZero(): any;
    makeIdentity(): any;
    negate(): any;
    setLength(): any;
    normalize(): any;
    square(): any;
    abs(): any;
}
declare class DzInt2 {
    objectName: string;
    x: number;
    y: number;
    width: number;
    height: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    inherits(): any;
    className(): any;
    toString(): any;
    length(): any;
    lengthSquared(): any;
    manhattanLength(): any;
    add(): any;
    subtract(): any;
    multiply(): any;
    divide(): any;
    isNull(): any;
    transpose(): any;
    makeZero(): any;
    makeIdentity(): any;
    negate(): any;
    setLength(): any;
    square(): any;
    abs(): any;
}
declare class Dz3DViewport extends QGLWidget {
    modal: boolean;
    windowModality: number;
    geometry: QObject;
    frameGeometry: QObject;
    normalGeometry: QObject;
    pos: QObject;
    frameSize: QObject;
    size: QObject;
    rect: QObject;
    childrenRect: QObject;
    childrenRegion: QObject;
    sizePolicy: QObject;
    minimumSize: QObject;
    maximumSize: QObject;
    minimumWidth: number;
    minimumHeight: number;
    maximumWidth: number;
    maximumHeight: number;
    sizeIncrement: QObject;
    baseSize: QObject;
    cursor: QObject;
    mouseTracking: boolean;
    isActiveWindow: boolean;
    focusPolicy: number;
    focus: boolean;
    contextMenuPolicy: number;
    updatesEnabled: boolean;
    visible: boolean;
    minimized: boolean;
    maximized: boolean;
    fullScreen: boolean;
    sizeHint: QObject;
    minimumSizeHint: QObject;
    acceptDrops: boolean;
    windowTitle: string;
    windowIcon: QObject;
    windowIconText: string;
    windowOpacity: number;
    windowModified: boolean;
    accessibleName: string;
    accessibleDescription: string;
    layoutDirection: number;
    autoFillBackground: boolean;
    styleSheet: string;
    locale: QObject;
    windowFilePath: string;
    inputMethodHints: number;
    background: QObject;
    floorStyle: number;
    shadeStyle: number;
    axesOn: boolean;
    aspectOn: boolean;
    thirdsGuideOn: boolean;
    showPoseTool: boolean;
    toolBarMode: number;
    NoFloor: number;
    WireFloor: number;
    SolidFloor: number;
    NO_FLOOR: number;
    WIRE_FLOOR: number;
    SOLID_FLOOR: number;
    WireBox: number;
    SolidBox: number;
    Wireframe: number;
    LitWireframe: number;
    HiddenLine: number;
    WireShaded: number;
    SmoothShaded: number;
    WireTextured: number;
    Textured: number;
    WIRE_BOX: number;
    SOLID_BOX: number;
    WIREFRAME: number;
    LIT_WIREFRAME: number;
    HIDDEN_LINE: number;
    WIRE_SHADED: number;
    SMOOTH_SHADED: number;
    WIRE_TEXTURED: number;
    TEXTURED: number;
    AnchorTopLeft: number;
    AnchorTopRight: number;
    AnchorBottomLeft: number;
    AnchorBottomRight: number;
    DockedToolBar: number;
    CameraCubeHUD: number;
    customContextMenuRequested(): any;
    setEnabled(): any;
    setDisabled(): any;
    setWindowModified(): any;
    setWindowTitle(): any;
    setStyleSheet(): any;
    setFocus(): any;
    update(): any;
    repaint(): any;
    setVisible(): any;
    setHidden(): any;
    show(): any;
    hide(): any;
    setShown(): any;
    showMinimized(): any;
    showMaximized(): any;
    showFullScreen(): any;
    showNormal(): any;
    close(): any;
    raise(): any;
    lower(): any;
    updateMicroFocus(): any;
    activeCameraChanged(cam: DzCamera): void;
    dimensionsChanged(): void;
    viewChanged(): void;
    drawStyleChanged(style: DzDrawStyle): void;
    contextMenuAboutToShow(menu: DzMenu, pos: QPoint): void;
    backgroundColorChanged(color: QColor): void;
    floorStyleChanged(style: number): void;
    axesOnChanged(onOff: boolean): void;
    aspectOnChanged(onOff: boolean): void;
    thirdsGuideOnChanged(): any;
    toolBarDocked(onOff: boolean): void;
    toolModeChanged(mode: number): void;
    activeCameraTransformChanged(): any;
    activeCameraProjectionChanged(): any;
    currentDimensionsChanged(): any;
    setDrawStyle(style: DzDrawStyle): void;
    setCamera(cam: DzCamera): void;
    setCamera(cam: QString): void;
    setCamera(cam: DzCamera): void;
    setCamera(cam: QString): void;
    aimCamera(): void;
    aimCameraAtPrimaryNode(): void;
    aimCameraAtBox(box: DzBox3): void;
    frameCamera(): void;
    frameCameraOnSelectedNodes(): void;
    frameCameraOnBox(box: DzBox3): void;
    resetCamera(): void;
    pickOnNode(pnt: QPoint, useSelectionMaps: boolean, region: DzGeometryRegion): DzNode;
    pickOnNode(pnt: QPoint, useSelectionMaps: boolean, region: DzGeometryRegion): DzNode;
    pickOnNode(pnt: QPoint, useSelectionMaps: boolean, region: DzGeometryRegion): DzNode;
    pickOnMaterial(pnt: QPoint): DzMaterial;
    pickOnFacet(pnt: QPoint, facetNode: DzNode): number;
    pickOnFacet(pnt: QPoint, facetNode: DzNode): number;
    pickOnGizmo(pnt: QPoint): number;
    pickNodes(area: QPolygonF, nodes: DzNode[], useSelectionMaps: boolean): void;
    pickNodes(area: QPolygonF, nodes: DzNode[], useSelectionMaps: boolean): void;
    pickMaterials(area: QPolygonF, mats: DzMaterial[]): void;
    pickFacets(area: QPolygonF, facets: number[], facetNode: DzNode): void;
    pickGizmos(area: QPolygonF, gizmos: number[]): void;
    appendHoverCursor(cursor: QCursor): void;
    updateGLOptions(): void;
    captureImage(): QImage;
    currentDimensions(): any;
    getViewport(): DzViewport;
    getCamera(): DzCamera;
    getAspectFrameRect(): QRect;
    isHardwareRenderable(): boolean;
    hardwareRender(handler: DzRenderHandler): boolean;
    renderThumbnail(handler: DzRenderHandler): boolean;
    mouseIsDown(): any;
    updateView(): void;
    removeCamera(cam: DzNode): void;
}
declare class DzDBObjectBasePtrListWrapper {
    objectName: string;
    length: number;
    name: string;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    at(): any;
    remove(): any;
    append(): any;
    inherits(): any;
    className(): any;
}
declare class DzBasicCamera extends DzCamera {
    frameWidth: number;
    focalDistance: number;
    focalLength: number;
    type: number;
    nearClippingPlane: number;
    farClippingPlane: number;
    useLocalDimensions: boolean;
    pixelsWidth: number;
    pixelsHeight: number;
    aspectWidth: number;
    aspectHeight: number;
    aspectRatio: number;
    proportionsConstrained: boolean;
    headlightMode: any;
    headlightOffset: QObject;
    isPerspective: boolean;
    currentViewWidth: number;
    currentViewHeight: number;
    fStop: number;
    depthOfField: boolean;
    FRONT_CAMERA: number;
    BACK_CAMERA: number;
    LEFT_CAMERA: number;
    RIGHT_CAMERA: number;
    TOP_CAMERA: number;
    BOTTOM_CAMERA: number;
    PERSPECTIVE_CAMERA: number;
    ORTHO_CAMERA: number;
    GENERAL_CAMERA: number;
    LOCAL_PIXEL_WIDTH: number;
    LOCAL_PIXEL_HEIGHT: number;
    LOCAL_ASPECT_WIDTH: number;
    LOCAL_ASPECT_HEIGHT: number;
    pixelDimensionsChanged(): any;
    dimensionsChanged(): any;
    useLocalDimensionsChanged(): any;
    pixelsWidthChanged(): any;
    pixelsHeightChanged(): any;
    aspectWidthChanged(): any;
    aspectHeightChanged(): any;
    proportionsConstrainedChanged(): any;
    frameWidthChanged(): any;
    headlightModeChanged(): any;
    headlightOffsetChanged(): any;
    updateDimensions(): any;
    shouldDoHeadLight(): any;
    fStopChanged(range: DzTimeRange): void;
    depthOfFieldChanged(): void;
    setType(type: number): void;
    getFocalDistChannel(): DzFloatProperty;
    getFocalLengthChannel(): DzFloatProperty;
    getFStopChannel(): DzFloatProperty;
    getFrameWidthChannel(): any;
    getDepthOfFieldChannel(): DzBoolProperty;
    getDisplayPersistenceChannel(): DzBoolProperty;
    getSightLineOpacityChannel(): DzFloatProperty;
    getFovColorChannel(): DzColorProperty;
    getFovLengthChannel(): DzFloatProperty;
    getFovOpacityChannel(): DzFloatProperty;
    getFocalPointScaleChannel(): DzFloatProperty;
    getDofVisibilityChannel(): DzBoolProperty;
    getDofColorChannel(): DzColorProperty;
    getDofOverlayColorChannel(): DzColorProperty;
    getDofOverlayOpacityChannel(): DzFloatProperty;
    getNearDofVisibilityChannel(): DzBoolProperty;
    getFarDofVisibilityChannel(): DzBoolProperty;
    getHeadlampIntensityControl(): any;
    getLensThicknessControl(): any;
    cursorToScene(x: number, y: number, z: number): DzVec3;
    cursorToRay(x: number, y: number): DzVec3;
    isAtDefaultSceneCameraValues(): boolean;
    isDefaultSceneCamera(): boolean;
    setIsDefaultSceneCamera(yesNo: boolean): void;
}
declare class DzHeadLight {
    objectName: string;
    name: string;
    elementID: number;
    renderPriority: number;
    assetIdAliases: QObject;
    nameAliases: QObject;
    assetId: string;
    frameWidth: number;
    focalDistance: number;
    focalLength: number;
    type: number;
    nearClippingPlane: number;
    farClippingPlane: number;
    useLocalDimensions: boolean;
    pixelsWidth: number;
    pixelsHeight: number;
    aspectWidth: number;
    aspectHeight: number;
    aspectRatio: number;
    proportionsConstrained: boolean;
    headlightMode: any;
    headlightOffset: QObject;
    None: number;
    DeepShadowMap: number;
    Raytraced: number;
    FRONT_CAMERA: number;
    BACK_CAMERA: number;
    LEFT_CAMERA: number;
    RIGHT_CAMERA: number;
    TOP_CAMERA: number;
    BOTTOM_CAMERA: number;
    PERSPECTIVE_CAMERA: number;
    ORTHO_CAMERA: number;
    GENERAL_CAMERA: number;
    LOCAL_PIXEL_WIDTH: number;
    LOCAL_PIXEL_HEIGHT: number;
    LOCAL_ASPECT_WIDTH: number;
    LOCAL_ASPECT_HEIGHT: number;
    destroyed(): any;
    destroyed(): any;
    deleteLater(): any;
    nameChanged(): any;
    className(): any;
    makePersistent(): any;
    inherits(): any;
    iskindof(): any;
    getName(): any;
    propertyAdded(): any;
    propertyRemoved(): any;
    propertyListChanged(): any;
    propertyListInTreeChanged(): any;
    propertyTreeChanged(): any;
    privatePropertyAdded(): any;
    privatePropertyRemoved(): any;
    privatePropertyListChanged(): any;
    privatePropertyListInTreeChanged(): any;
    privatePropertyTreeChanged(): any;
    labelChanged(): any;
    parentChanged(): any;
    mergeElementSignal(): any;
    duplicateElementSignal(): any;
    createElementCopySignal(): any;
    setAttributes(): any;
    setName(): any;
    setLabel(): any;
    update(): any;
    clearAnimData(): any;
    clearAllAnimData(): any;
    addProperty(): any;
    insertProperty(): any;
    removeProperty(): any;
    removeProperty(): any;
    moveProperty(): any;
    addPrivateProperty(): any;
    insertPrivateProperty(): any;
    removePrivateProperty(): any;
    removePrivateProperty(): any;
    movePrivateProperty(): any;
    addDataItem(): any;
    removeDataItem(): any;
    deleteDataItem(): any;
    copyFrom(): any;
    setLoadScript(): any;
    beginEdit(): any;
    finishEdit(): any;
    cancelEdit(): any;
    shouldSortOnLoad(): any;
    getLabel(): any;
    getAttributes(): any;
    getNumProperties(): any;
    getProperty(): any;
    getPropertyList(): any;
    isPropertyNameUnique(): any;
    isPropertyNameUnique(): any;
    findProperty(): any;
    findProperty(): any;
    findPropertyByLabel(): any;
    findPropertyByLabel(): any;
    getPropertyGroups(): any;
    findMatchingProperty(): any;
    getNumPrivateProperties(): any;
    getPrivateProperty(): any;
    getPrivatePropertyList(): any;
    isPrivatePropertyNameUnique(): any;
    isPrivatePropertyNameUnique(): any;
    findPrivateProperty(): any;
    findPrivateProperty(): any;
    findPrivatePropertyByLabel(): any;
    findPrivatePropertyByLabel(): any;
    getPrivatePropertyGroups(): any;
    getNumDataItems(): any;
    getDataItem(): any;
    getDataItemList(): any;
    isDataItemNameUnique(): any;
    isDataItemNameUnique(): any;
    findDataItem(): any;
    getLoadScript(): any;
    copyToClipboard(): any;
    copyToClipboard(): any;
    getNumElementChildren(): any;
    getElementChild(): any;
    getElementParent(): any;
    inEdit(): any;
    moveDataItemToIndex(): any;
    findDataItemIndex(): any;
    duplicateMissingCustomData(): any;
    duplicateMissingProperties(): any;
    duplicateMissingPrivateProperties(): any;
    duplicateMissingCustomDataWithContext(): any;
    duplicateMissingPropertiesWithContext(): any;
    duplicateMissingPrivatePropertiesWithContext(): any;
    doMergeElement(): any;
    doDuplicateElement(): any;
    mergeElement(): any;
    duplicateElement(): any;
    createElementCopy(): any;
    parentChanged(): any;
    transformChanged(): any;
    selected(): any;
    rotationOrderChanged(): any;
    childAdded(): any;
    childRemoved(): any;
    childListChanged(): any;
    objectChanged(): any;
    drawnDataChanged(): any;
    visibilityChanged(): any;
    selectabilityChanged(): any;
    aboutToBeRemoved(): any;
    removed(): any;
    added(): any;
    hiddenChanged(): any;
    riggingChanged(): any;
    materialListChanged(): any;
    materialSelectionChanged(): any;
    uvsChanged(): any;
    assetModified(): any;
    assetWasSaved(): any;
    boundBoxInvalidated(): any;
    aboutToDelete(): any;
    inheritScaleChanged(): any;
    materialSelectionSetsChanged(): any;
    childListOrderChanged(): any;
    promoteSelectionChanged(): any;
    topologyChanged(): any;
    objectDuplicateAndSetSignal(): any;
    modifierDuplicateFinished(): any;
    setManipOverColor(): any;
    clearManipOverColor(): any;
    update(): any;
    finalize(): any;
    finalize(): any;
    finalize(): any;
    select(): any;
    select(): any;
    setSelectable(): any;
    setVisible(): any;
    setRotationOrder(): any;
    setObject(): any;
    addNodeChild(): any;
    addNodeChild(): any;
    removeNodeChild(): any;
    removeNodeChild(): any;
    removeAllNodeChildren(): any;
    moveNodeChildToIndex(): any;
    moveNodeChildToIndex(): any;
    findChildIndex(): any;
    setWSTransform(): any;
    setWSTransform(): any;
    setWSPos(): any;
    setWSPos(): any;
    setWSRot(): any;
    setWSRot(): any;
    setWSScale(): any;
    setWSScale(): any;
    setLocalTransform(): any;
    setLocalTransform(): any;
    setLocalTransform(): any;
    setLocalTransform(): any;
    setToolLocalTransform(): any;
    setToolLocalTransform(): any;
    setLocalPos(): any;
    setLocalPos(): any;
    setLocalRot(): any;
    setLocalRot(): any;
    setToolLocalRot(): any;
    setToolLocalRot(): any;
    setLocalScale(): any;
    setLocalScale(): any;
    setLocalScale(): any;
    setLocalScale(): any;
    setOrientation(): any;
    setOrientation(): any;
    setOrientationAngles(): any;
    setOrientationAngles(): any;
    setOrigin(): any;
    setOrigin(): any;
    setEndPoint(): any;
    setEndPoint(): any;
    adjustOrientation(): any;
    adjustOrientationAngles(): any;
    adjustOrigin(): any;
    adjustEndPoint(): any;
    clearTransformData(): any;
    clearAllTransformData(): any;
    setInheritScale(): any;
    setPointAtTarget(): any;
    setPointAtStrength(): any;
    setHidden(): any;
    setPromoteSelection(): any;
    setRenderPriority(): any;
    setRenderPriority(): any;
    setVisibleInRender(): any;
    setSelectionMap(): any;
    setPresentation(): any;
    setPreviewBox(): any;
    modifyAsset(): any;
    modifyAsset(): any;
    invalidateBoundingBoxes(): any;
    invalidateBoundingBoxes(): any;
    getSkeleton(): any;
    getRotationOrder(): any;
    isSelected(): any;
    isSelectable(): any;
    isVisible(): any;
    isVisibileInRender(): any;
    castsShadow(): any;
    getObject(): any;
    getNumNodeChildren(): any;
    getNodeChild(): any;
    getNodeChildren(): any;
    getNodeChildren(): any;
    isNodeChild(): any;
    findNodeChild(): any;
    findNodeChild(): any;
    findNodeChildByAssetID(): any;
    findNodeChildByAssetID(): any;
    findNodeChildByAssetID(): any;
    findNodeChildByNameOrAlias(): any;
    findNodeChildByNameOrAlias(): any;
    getNodeParent(): any;
    isRootNode(): any;
    getLocalBoundingBox(): any;
    getLocalOrientedBox(): any;
    getWSBoundingBox(): any;
    getWSOrientedBox(): any;
    getPreviewBox(): any;
    getWSTransform(): any;
    getWSTransform(): any;
    getWSTransform(): any;
    getToolWSTransform(): any;
    getToolWSTransform(): any;
    getWSPos(): any;
    getWSPos(): any;
    getWSPos(): any;
    getWSRot(): any;
    getWSRot(): any;
    getWSRot(): any;
    getToolWSRot(): any;
    getToolWSRot(): any;
    getWSScale(): any;
    getWSScale(): any;
    getWSScale(): any;
    getLocalTransform(): any;
    getLocalTransform(): any;
    getLocalTransform(): any;
    getLocalPos(): any;
    getLocalPos(): any;
    getLocalPos(): any;
    getLocalRot(): any;
    getLocalRot(): any;
    getLocalRot(): any;
    getToolLocalRot(): any;
    getToolLocalRot(): any;
    getLocalScale(): any;
    getLocalScale(): any;
    getLocalScale(): any;
    getOrientation(): any;
    getOrientation(): any;
    updateOrientation(): any;
    getOrigin(): any;
    getOrigin(): any;
    getEndPoint(): any;
    getEndPoint(): any;
    getSelectionMap(): any;
    getXPosControl(): any;
    getYPosControl(): any;
    getZPosControl(): any;
    getXRotControl(): any;
    getYRotControl(): any;
    getZRotControl(): any;
    getScaleControl(): any;
    getXScaleControl(): any;
    getYScaleControl(): any;
    getZScaleControl(): any;
    getSelectabilityControl(): any;
    getVisibilityControl(): any;
    getRenderVisibilityControl(): any;
    getShadowControl(): any;
    getRenderPriorityControl(): any;
    getPointAtControl(): any;
    getOriginXControl(): any;
    getOriginYControl(): any;
    getOriginZControl(): any;
    getEndXControl(): any;
    getEndYControl(): any;
    getEndZControl(): any;
    getOrientXControl(): any;
    getOrientYControl(): any;
    getOrientZControl(): any;
    inheritsScale(): any;
    isHidden(): any;
    isInScene(): any;
    isSelectionPromoted(): any;
    getRenderPriority(): any;
    getPresentation(): any;
    getSelectionNode(): any;
    isBoneSelectingNode(): any;
    setInvisibleByGroup(): any;
    setUnselectableByGroup(): any;
    invisibleByGroup(): any;
    unselectableByGroup(): any;
    getWeightMapHandler(): any;
    doObjectDuplicateAndSet(): any;
    isEditorNode(): any;
    getToolXRotControl(): any;
    getToolYRotControl(): any;
    getToolZRotControl(): any;
    invalidateCache(): any;
    selectionMapModified(): any;
    updateTransform(): any;
    updateVis(): any;
    updateRenderable(): any;
    invalidateOrientation(): any;
    objectDuplicateAndSet(): any;
    handleRendererModeChanged(): any;
    projectionChanged(): any;
    focalDistanceChanged(): any;
    focalLengthChanged(): any;
    pixelDimensionsChanged(): any;
    aspectRatioChanged(): any;
    dimensionsChanged(): any;
    useLocalDimensionsChanged(): any;
    pixelsWidthChanged(): any;
    pixelsHeightChanged(): any;
    aspectWidthChanged(): any;
    aspectHeightChanged(): any;
    proportionsConstrainedChanged(): any;
    frameWidthChanged(): any;
    headlightModeChanged(): any;
    headlightOffsetChanged(): any;
    reset(): any;
    aimAt(): any;
    frame(): any;
    getHeadlight(): any;
    getFocalPoint(): any;
    getFieldOfView(): any;
    isViewCamera(): any;
    updateDimensions(): any;
    shouldDoHeadLight(): any;
    categoriesChanged(): any;
    isDirectional(): any;
    getWSDirection(): any;
    isAreaLight(): any;
    getDiffuseColor(): any;
    isOn(): any;
    getCategories(): any;
    getCategoriesControl(): any;
    getShadowType(): any;
    getShadowTypeControl(): any;
    getNearClippingPlane(): any;
    getFarClippingPlane(): any;
    getIntensity(): any;
    getIntensityScale(): any;
    getFlux(): any;
    getLightTempature(): any;
    getLightWidth(): any;
    getLightHeight(): any;
    getLightTwoSided(): any;
    photometricMode(): any;
    getLightGeometry(): any;
    renderEmitter(): any;
    getShadowColorControl(): any;
    getShadowIntensityControl(): any;
    getShadowBiasControl(): any;
    getShadowSoftnessControl(): any;
    getIlluminationControl(): any;
    getDiffuseColorControl(): any;
    getIntensityControl(): any;
    getIntensityScaleControl(): any;
    getLightGeometryControl(): any;
    getLightHeightControl(): any;
    getLightWidthControl(): any;
    getLightTwoSidedControl(): any;
    getPhotometricModeControl(): any;
    getRenderEmitterControl(): any;
    getLightFluxControl(): any;
    getLightTemperatureControl(): any;
    handlePhotometricModeChanged(): any;
    getCamera(): any;
    inherits(): any;
    className(): any;
}
declare class QPaintDevice extends QObject {
    devType(): number;
    getDC(): number;
    metric(metric: number): number;
    paintEngine(): QPaintEngine;
    paintingActive(): boolean;
    qt_paint_device_metric(device: QPaintDevice, metric: number): any;
    qwsDisplay(): QWSDisplay;
    releaseDC(hdc: number): void;
}
declare class QApplication extends QCoreApplication {
    aboutQt(): void;
    aboutToReleaseGpuResources(): void;
    aboutToUseGpuResources(): void;
    activeModalWidget(): QWidget;
    activePopupWidget(): QWidget;
    activeWindow(): QWidget;
    alert(widget: QWidget, duration: number): void;
    allWidgets(): QWidget[];
    autoMaximizeThreshold(): number;
    autoSipEnabled(): boolean;
    beep(): void;
    changeOverrideCursor(obj: QCursor): void;
    clipboard(): QClipboard;
    closeAllWindows(): void;
    colorSpec(): number;
    commitData(sm: QSessionManager): void;
    commitDataRequest(sessionManager: QSessionManager): void;
    cursorFlashTime(): number;
    desktop(): QDesktopWidget;
    desktopSettingsAware(): boolean;
    doubleClickInterval(): number;
    focusChanged(old: QWidget, now: QWidget): void;
    focusWidget(): QWidget;
    font(): QFont;
    font(obj: QWidget): QFont;
    font(className: string): QFont;
    font(): QFont;
    font(obj: QWidget): QFont;
    font(className: string): QFont;
    font(): QFont;
    font(obj: QWidget): QFont;
    font(className: string): QFont;
    fontDatabaseChanged(): void;
    fontMetrics(): QFontMetrics;
    globalStrut(): QSize;
    horizontalAlignment(align: number): any;
    inputContext(): QInputContext;
    isEffectEnabled(obj: number): boolean;
    isSessionRestored(): boolean;
    keyboardInputDirection(): number;
    keyboardInputInterval(): number;
    keyboardInputLocale(): QLocale;
    keyboardModifiers(): number;
    keypadNavigationEnabled(): boolean;
    lastWindowClosed(): void;
    layoutDirection(): number;
    mainWidget(): any;
    mouseButtons(): number;
    navigationMode(): number;
    overrideCursor(): QCursor;
    palette(): QPalette;
    palette(obj: QWidget): QPalette;
    palette(className: string): QPalette;
    palette(): QPalette;
    palette(obj: QWidget): QPalette;
    palette(className: string): QPalette;
    palette(): QPalette;
    palette(obj: QWidget): QPalette;
    palette(className: string): QPalette;
    platformNativeInterface(): QPlatformNativeInterface;
    queryKeyboardModifiers(): number;
    quitOnLastWindowClosed(): boolean;
    qwsDecoration(): QDecoration;
    qwsEventFilter(obj: QWSEvent): boolean;
    qwsProcessEvent(obj: QWSEvent): number;
    qwsSetCustomColors(colortable: QRgb, start: number, numColors: number): void;
    qwsSetDecoration(decoration: QString): QDecoration;
    qwsSetDecoration(obj: QDecoration): void;
    qwsSetDecoration(decoration: QString): QDecoration;
    qwsSetDecoration(obj: QDecoration): void;
    restoreOverrideCursor(): void;
    saveState(sm: QSessionManager): void;
    saveStateRequest(sessionManager: QSessionManager): void;
    sessionId(): QString;
    sessionKey(): QString;
    setActiveWindow(act: QWidget): void;
    setArgs(index: number, value: string): void;
    setAutoMaximizeThreshold(threshold: number): void;
    setAutoSipEnabled(enabled: boolean): void;
    setColorSpec(obj: number): void;
    setCursorFlashTime(obj: number): void;
    setDesktopSettingsAware(obj: boolean): void;
    setDoubleClickInterval(obj: number): void;
    setEffectEnabled(obj: number, enable: boolean): void;
    setFont(obj: QFont, className: string): void;
    setGlobalStrut(obj: QSize): void;
    setGraphicsSystem(obj: QString): void;
    setInputContext(obj: QInputContext): void;
    setKeyboardInputInterval(obj: number): void;
    setLayoutDirection(direction: number): void;
    setNavigationMode(mode: number): void;
    setOverrideCursor(obj: QCursor): void;
    setPalette(obj: QPalette, className: string): void;
    setQuitOnLastWindowClosed(quit: boolean): void;
    setStartDragDistance(l: number): void;
    setStartDragTime(ms: number): void;
    setStyle(obj: QString): QStyle;
    setStyle(obj: QStyle): void;
    setStyle(obj: QString): QStyle;
    setStyle(obj: QStyle): void;
    setStyleSheet(sheet: QString): void;
    setWheelScrollLines(obj: number): void;
    setWindowIcon(icon: QIcon): void;
    startDragDistance(): number;
    startDragTime(): number;
    style(): QStyle;
    styleSheet(): QString;
    syncX(): void;
    topLevelAt(p: QPoint): QWidget;
    topLevelWidgets(): QWidget[];
    type(): any;
    wheelScrollLines(): number;
    widgetAt(p: QPoint): QWidget;
    winFocus(widget: QWidget, focus: boolean): void;
    winMouseButtonUp(): void;
    windowIcon(): QIcon;
}
declare class DzBase extends DzSceneAsset {
    assertCast(className: string): DzBase;
    finishLoad(file: DzInFile): DzError;
    getClassFactory(): any;
    getName(): QString;
    getName(): QString;
    getName(): QString;
    getName(): QString;
    iskindof(clname: QString): boolean;
    loadSection(file: DzInFile, sectionID: number): void;
    makePersistent(obj: QObject): void;
    makePersistent(): void;
    makePersistent(obj: QObject): void;
    makePersistent(): void;
    nameChanged(name: QString): void;
    postLoadFile(file: DzInFile): void;
    save(file: DzOutFile): void;
    setName(newName: QString): void;
    setPointer(file: DzInFile, sectionID: number, pointerID: number, ptr: DzBase): void;
    setStorablePaths(path: QString): void;
    startLoad(file: DzInFile): void;
}
declare class DzSceneAsset extends DzRefCountedItem {
    assetLoaded(): void;
    assetNeedSave(): boolean;
    assetSaved(): void;
    getAssetFileInfo(): DzSceneAssetFileInfo;
    getAssetId(): QString;
    getAssetUri(): DzUri;
    getConstFileInfoData(info: DzSceneAssetFileInfo): any;
    getFallBackOffset(): number;
    getFileInfoData(info: DzSceneAssetFileInfo): DzSceneAssetFileInfoData;
    getSource(): DzUri;
    loadAssetSection(file: DzInFile, sectionID: number): boolean;
    matchesAssetId(assetID: QString, checkSource: boolean): boolean;
    modifyAsset(newUri: DzUri): boolean;
    modifyAsset(): boolean;
    modifyAsset(newUri: DzUri): boolean;
    modifyAsset(): boolean;
    saveAsset(file: DzOutFile): void;
    setAssetId(assetID: QString): void;
    setFallBackOffset(offset: number): void;
    copyDataTo(data: DzSceneAssetFileInfoData): void;
    getContributor(): DzAuthor;
    getModifiedDate(): QDateTime;
    getRevision(): DzVersion;
    getUri(): DzUri;
}
declare class DzElement extends DzBase {
    addDataItem(item: DzElementData): DzError;
    addElementChild(child: DzElement): void;
    addPrivateProperty(prop: DzProperty): DzError;
    addPrivatePropertyInternal(newprop: DzProperty): void;
    addPrivatePropertyToList(prop: DzProperty): DzError;
    addProperty(prop: DzProperty): DzError;
    addPropertyInternal(newprop: DzProperty): void;
    addPropertyToList(prop: DzProperty): DzError;
    beginEdit(): void;
    cancelEdit(): void;
    clearAllAnimData(): void;
    clearAnimData(range: DzTimeRange): void;
    copyFrom(source: DzElement): void;
    copyToClipboard(contentTypes: String[]): DzElementClipboard;
    defaultPropertyGroupTree(): DzPropertyGroupTree;
    deleteDataItem(item: DzElementData): DzError;
    duplicateMissingCustomData(tgt: DzElement): void;
    duplicateMissingPrivateProperties(tgt: DzElement): void;
    duplicateMissingProperties(tgt: DzElement): void;
    elementChildIterator(): DzElementListIterator;
    findDataItem(dataName: QString): DzElementData;
    findMatchingProperty(srcProp: DzProperty): DzProperty;
    findPrivateProperty(name: QString): DzProperty;
    findPrivateProperty(name: QString, caseSensitive: boolean): DzProperty;
    findPrivateProperty(name: QString): DzProperty;
    findPrivateProperty(name: QString, caseSensitive: boolean): DzProperty;
    findPrivatePropertyByLabel(label: QString): DzProperty;
    findPrivatePropertyByLabel(label: QString, caseSensitive: boolean): DzProperty;
    findPrivatePropertyByLabel(label: QString): DzProperty;
    findPrivatePropertyByLabel(label: QString, caseSensitive: boolean): DzProperty;
    findProperty(name: QString): DzProperty;
    findProperty(name: QString, caseSensitive: boolean): DzProperty;
    findProperty(name: QString): DzProperty;
    findProperty(name: QString, caseSensitive: boolean): DzProperty;
    findPropertyByLabel(label: QString): DzProperty;
    findPropertyByLabel(label: QString, caseSensitive: boolean): DzProperty;
    findPropertyByLabel(label: QString): DzProperty;
    findPropertyByLabel(label: QString, caseSensitive: boolean): DzProperty;
    finishEdit(): void;
    getAttributes(settings: DzSettings): void;
    getDataItem(index: number): DzElementData;
    getDataItemList(): QObject[];
    getElementChild(which: number): DzElement;
    getElementParent(): DzElement;
    getIsPropertyTreeOwnedByParent(): boolean;
    getLabel(): QString;
    getLoadScript(): DzScript;
    getNumDataItems(): number;
    getNumElementChildren(): number;
    getNumPrivateProperties(): number;
    getNumProperties(): number;
    getPrivateProperty(index: number): DzProperty;
    getPrivatePropertyGroups(): DzPropertyGroupTree;
    getPrivatePropertyList(): QObject[];
    getProperty(index: number): DzProperty;
    getPropertyGroups(): DzPropertyGroupTree;
    getPropertyList(): DzProperty[];
    inEdit(): boolean;
    insertPrivateProperty(index: number, prop: DzProperty): DzError;
    insertPrivatePropertyInList(index: number, prop: DzProperty): DzError;
    insertProperty(index: number, prop: DzProperty): DzError;
    insertPropertyInList(index: number, prop: DzProperty): DzError;
    isDataItemNameUnique(dataName: QString, makeUnique: boolean): boolean;
    isPrivatePropertyNameUnique(name: QString, makeUnique: boolean): boolean;
    isPropertyNameUnique(name: QString, makeUnique: boolean): boolean;
    labelChanged(newLabel: QString): void;
    movePrivateProperty(prop: DzProperty, element: DzElement): DzError;
    moveProperty(prop: DzProperty, element: DzElement): DzError;
    parentChanged(): void;
    privatePropertyAdded(prop: DzProperty): void;
    privatePropertyListChanged(): void;
    privatePropertyListIterator(): DzPropertyListIterator;
    privatePropertyRemoved(prop: DzProperty): void;
    privatePropertyTreeChanged(): void;
    propertyAdded(prop: DzProperty): void;
    propertyListChanged(): void;
    propertyListIterator(): DzPropertyListIterator;
    propertyRemoved(prop: DzProperty): void;
    propertyTreeChanged(): void;
    regroupPrivateProperties(tree: DzPropertyGroupTree): void;
    regroupProperties(tree: DzPropertyGroupTree): void;
    removeDataItem(item: DzElementData): DzError;
    removeElementChild(child: DzElement): void;
    removePrivateProperty(prop: DzProperty): DzError;
    removePrivateProperty(name: QString): DzError;
    removePrivateProperty(prop: DzProperty): DzError;
    removePrivateProperty(name: QString): DzError;
    removeProperty(prop: DzProperty): DzError;
    removeProperty(name: QString): DzError;
    removeProperty(prop: DzProperty): DzError;
    removeProperty(name: QString): DzError;
    setAttributes(settings: DzSettings): DzElement;
    setElementParent(elem: DzElement, regroup: boolean): void;
    setIsPropertyTreeOwnedByParent(onoff: boolean): void;
    setLabel(name: QString): DzError;
    setLoadScript(script: DzScript): void;
    shouldSortOnLoad(): boolean;
    update(): void;
    getElementName(): QString;
    paste(elem: DzElement, contentTypes: String[]): DzError;
    duplicate(owner: DzElement): DzElementData;
    writeDataItem(dataItem: DzElementData, io: any): boolean;
    writeScene(io: any): boolean;
    shouldWriteProperty(prop: DzProperty): boolean;
    applyToProperty(prop: DzProperty, opts: DzFileIOSettings): boolean;
    getPropertyName(): QString;
    setPropertyName(name: QString): void;
    writeProperty(file: DzAssetOutFile, io: any, prop: DzProperty): boolean;
    writePropertyValue(file: DzAssetOutFile, io: any, prop: DzProperty): boolean;
    applyToElement(elem: DzElement, checkPrivateProperties: boolean, opts: DzFileIOSettings): boolean;
    writeElementProperties(file: DzAssetOutFile, io: any, elem: DzElement, filter: DzElementPropertyIOFilter): boolean;
    writeProperties(file: DzAssetOutFile, io: any, propIt: DzPropertyListIterator, filter: DzElementPropertyIOFilter): boolean;
}
declare class QMainWindow extends QWidget {
    constructor(parent: QWidget, name: string, flags: number);
    addDockWidget(area: number, dockwidget: QDockWidget): void;
    addDockWidget(area: number, dockwidget: QDockWidget): void;
    addDockWidget(area: number, dockwidget: QDockWidget): void;
    addDockWidget(area: number, dockwidget: QDockWidget): void;
    addToolBar(title: QString): QToolBar;
    addToolBar(toolbar: QToolBar): void;
    addToolBar(area: number, toolbar: QToolBar): void;
    addToolBar(title: QString): QToolBar;
    addToolBar(toolbar: QToolBar): void;
    addToolBar(area: number, toolbar: QToolBar): void;
    addToolBar(title: QString): QToolBar;
    addToolBar(toolbar: QToolBar): void;
    addToolBar(area: number, toolbar: QToolBar): void;
    addToolBarBreak(area: number): void;
    centralWidget(): QWidget;
    contextMenuEvent(event: QContextMenuEvent): void;
    corner(corner: number): number;
    createPopupMenu(): QMenu;
    dockOptions(): number;
    dockWidgetArea(dockwidget: QDockWidget): number;
    documentMode(): boolean;
    event(event: QEvent): boolean;
    iconSize(): QSize;
    iconSizeChanged(iconSize: QSize): void;
    insertToolBar(before: QToolBar, toolbar: QToolBar): void;
    insertToolBarBreak(before: QToolBar): void;
    isAnimated(): boolean;
    isDockNestingEnabled(): boolean;
    isSeparator(pos: QPoint): boolean;
    menuBar(): QMenuBar;
    menuWidget(): QWidget;
    removeDockWidget(dockwidget: QDockWidget): void;
    removeToolBar(toolbar: QToolBar): void;
    removeToolBarBreak(before: QToolBar): void;
    restoreDockWidget(dockwidget: QDockWidget): boolean;
    restoreState(state: number[], version: number): boolean;
    saveState(version: number): number[];
    setAnimated(enabled: boolean): void;
    setCentralWidget(widget: QWidget): void;
    setCorner(corner: number, area: number): void;
    setDockNestingEnabled(enabled: boolean): void;
    setDockOptions(options: number): void;
    setDocumentMode(enabled: boolean): void;
    setIconSize(iconSize: QSize): void;
    setMenuBar(menubar: QMenuBar): void;
    setMenuWidget(menubar: QWidget): void;
    setStatusBar(statusbar: QStatusBar): void;
    setTabPosition(areas: number, tabPosition: number): void;
    setTabShape(tabShape: number): void;
    setToolButtonStyle(toolButtonStyle: number): void;
    setUnifiedTitleAndToolBarOnMac(set: boolean): void;
    splitDockWidget(after: QDockWidget, dockwidget: QDockWidget): void;
    statusBar(): QStatusBar;
    tabPosition(area: number): number;
    tabShape(): number;
    tabifiedDockWidgets(dockwidget: QDockWidget): QDockWidget[];
    tabifyDockWidget(first: QDockWidget, second: QDockWidget): void;
    toolBarArea(toolbar: QToolBar): number;
    toolBarBreak(toolbar: QToolBar): boolean;
    toolButtonStyle(): number;
    toolButtonStyleChanged(toolButtonStyle: number): void;
    unifiedTitleAndToolBarOnMac(): boolean;
}
declare class DzStyleInterface {
    commonStyleSubElementRect(subElement: number): QRect;
    drawPrimitive(pe: number, opt: QStyleOption, p: QPainter, w: QWidget): void;
    systemStyleSizeFromContents(ct: number): QSize;
    systemStyleSubElementRect(subElement: number): QRect;
    textStyle(ts: number, option: QStyleOption, widget: QWidget): DzTextStyle;
}
declare class DzSlider extends QWidget {
    clamped: boolean;
    displayAsPercent: boolean;
    indeterminate: boolean;
    label: String;
    labelVisible: boolean;
    max: number;
    min: number;
    sensitivity: number;
    text: String;
    textEditable: boolean;
    textVisible: boolean;
    value: number;
    calcEditRect(): QRect;
    calcLabelRect(): QRect;
    calcMinSize(): QSize;
    calcSliderRect(): QRect;
    calcTextRect(): QRect;
    dragSpinner(delta: number): void;
    editBoxChange(text: QString): void;
    editCancelled(): void;
    editEnd(): void;
    editStart(): void;
    endSpinnerDrag(): void;
    finishEdit(): void;
    getArea(): number;
    getEditRect(): QRect;
    getEndWidthPixelMetric(): number;
    getLabel(): QString;
    getLabelRect(): QRect;
    getPosition(): number;
    getSliderOrientation(): number;
    getSliderRect(): QRect;
    getSliderThicknessPixelMetric(): number;
    getState(): number;
    getText(): QString;
    getTextRect(): QRect;
    isClamped(): boolean;
    isEditing(): boolean;
    isInState(value: number): boolean;
    isTextEditable(): boolean;
    isTextVisible(): boolean;
    leaveEvent(e: QEvent): void;
    mouseMoveEvent(e: QMouseEvent): void;
    mousePressEvent(e: QMouseEvent): void;
    mouseReleaseEvent(e: QMouseEvent): void;
    paintEvent(e: QPaintEvent): void;
    resizeEvent(e: QResizeEvent): void;
    setClamped(onOff: boolean): void;
    setLabel(label: QString): void;
    setNoChange(onOff: boolean): void;
    setPosition(pos: number): void;
    setShowLabel(onOff: boolean): void;
    setText(text: QString): void;
    setTextEditable(onOff: boolean): void;
    setTextVisible(onOff: boolean): void;
    showEdit(rect: QRect): void;
    showingLabel(): boolean;
    startSpinnerDrag(pos: number): void;
    step(positive: boolean): void;
    tabletEvent(e: QTabletEvent): void;
    textChanged(text: QString): void;
    timerEvent(e: QTimerEvent): void;
    updateMinSize(): void;
    updateRect(): void;
}
declare class QAbstractButton extends QWidget {
    constructor(parent: QWidget, name: string, f: number);
    animateClick(msec: number): void;
    autoExclusive(): boolean;
    autoRepeat(): boolean;
    autoRepeatDelay(): number;
    autoRepeatInterval(): number;
    changeEvent(e: QEvent): void;
    checkStateSet(): void;
    click(): void;
    clicked(checked: boolean): void;
    event(e: QEvent): boolean;
    focusInEvent(e: QFocusEvent): void;
    focusOutEvent(e: QFocusEvent): void;
    group(): QButtonGroup;
    hitButton(pos: QPoint): boolean;
    icon(): QIcon;
    iconSet(): any;
    iconSize(): QSize;
    isCheckable(): boolean;
    isChecked(): boolean;
    isDown(): boolean;
    keyPressEvent(e: QKeyEvent): void;
    keyReleaseEvent(e: QKeyEvent): void;
    mouseMoveEvent(e: QMouseEvent): void;
    mousePressEvent(e: QMouseEvent): void;
    mouseReleaseEvent(e: QMouseEvent): void;
    nextCheckState(): void;
    paintEvent(e: QPaintEvent): void;
    pressed(): void;
    released(): void;
    setAutoExclusive(obj: boolean): void;
    setAutoRepeat(obj: boolean): void;
    setAutoRepeatDelay(obj: number): void;
    setAutoRepeatInterval(obj: number): void;
    setCheckable(obj: boolean): void;
    setChecked(obj: boolean): void;
    setDown(obj: boolean): void;
    setIcon(icon: QIcon): void;
    setIconSize(size: QSize): void;
    setShortcut(key: QKeySequence): void;
    setText(text: QString): void;
    shortcut(): QKeySequence;
    text(): QString;
    timerEvent(e: QTimerEvent): void;
    toggle(): void;
    toggled(checked: boolean): void;
}
declare class QFrame extends QWidget {
    contructor(parent: QWidget, name: string, f: number): any;
    changeEvent(obj: QEvent): void;
    drawFrame(obj: QPainter): void;
    event(e: QEvent): boolean;
    frameRect(): QRect;
    frameShadow(): number;
    frameShape(): number;
    frameStyle(): number;
    frameWidth(): number;
    lineWidth(): number;
    midLineWidth(): number;
    paintEvent(obj: QPaintEvent): void;
    setFrameRect(obj: QRect): void;
    setFrameShadow(obj: number): void;
    setFrameShape(obj: number): void;
    setFrameStyle(obj: number): void;
    setLineWidth(obj: number): void;
    setMidLineWidth(obj: number): void;
    sizeHint(): QSize;
}
declare class Q3ScrollView extends Q3Frame {
    addChild(child: QWidget, x: number, y: number): void;
    bottomMargin(): number;
    cachedSizeHint(): QSize;
    center(x: number, y: number): void;
    center(x: number, y: number, xmargin: number, ymargin: number): void;
    center(x: number, y: number): void;
    center(x: number, y: number, xmargin: number, ymargin: number): void;
    changeFrameRect(obj: QRect): void;
    childX(child: QWidget): number;
    childY(child: QWidget): number;
    clipper(): QWidget;
    contentsContextMenuEvent(obj: QContextMenuEvent): void;
    contentsDragEnterEvent(obj: QDragEnterEvent): void;
    contentsDragLeaveEvent(obj: QDragLeaveEvent): void;
    contentsDragMoveEvent(obj: QDragMoveEvent): void;
    contentsDropEvent(obj: QDropEvent): void;
    contentsHeight(): number;
    contentsMouseDoubleClickEvent(obj: QMouseEvent): void;
    contentsMouseMoveEvent(obj: QMouseEvent): void;
    contentsMousePressEvent(obj: QMouseEvent): void;
    contentsMouseReleaseEvent(obj: QMouseEvent): void;
    contentsMoving(x: number, y: number): void;
    contentsToViewport(obj: QPoint): QPoint;
    contentsToViewport(x: number, y: number, vx: number, vy: number): void;
    contentsToViewport(obj: QPoint): QPoint;
    contentsToViewport(x: number, y: number, vx: number, vy: number): void;
    contentsWheelEvent(obj: QWheelEvent): void;
    contentsWidth(): number;
    contentsX(): number;
    contentsY(): number;
    contextMenuEvent(obj: QContextMenuEvent): void;
    cornerWidget(): QWidget;
    disableSizeHintCaching(): void;
    doDragAutoScroll(): void;
    dragAutoScroll(): boolean;
    drawContentsOffset(obj: QPainter, ox: number, oy: number): void;
    enableClipper(y: boolean): void;
    ensureVisible(x: number, y: number): void;
    ensureVisible(x: number, y: number, xmargin: number, ymargin: number): void;
    ensureVisible(x: number, y: number): void;
    ensureVisible(x: number, y: number, xmargin: number, ymargin: number): void;
    eventFilter(obj: QObject, e: QEvent): boolean;
    focusNextPrevChild(next: boolean): boolean;
    fontChange(obj: QFont): void;
    hScrollBarMode(): number;
    hasStaticBackground(): boolean;
    hbarIsPressed(): void;
    hbarIsReleased(): void;
    horizontalScrollBar(): QScrollBar;
    horizontalSliderPressed(): void;
    horizontalSliderReleased(): void;
    hslide(obj: number): void;
    isHorizontalSliderPressed(): boolean;
    isVerticalSliderPressed(): boolean;
    leftMargin(): number;
    minimumSizeHint(): QSize;
    mouseDoubleClickEvent(obj: QMouseEvent): void;
    mouseMoveEvent(obj: QMouseEvent): void;
    mousePressEvent(obj: QMouseEvent): void;
    mouseReleaseEvent(obj: QMouseEvent): void;
    moveChild(child: QWidget, x: number, y: number): void;
    moveContents(x: number, y: number): void;
    removeChild(child: QObject): void;
    removeChild(child: QWidget): void;
    removeChild(child: QObject): void;
    removeChild(child: QWidget): void;
    repaintContents(r: QRect, erase: boolean): void;
    repaintContents(x: number, y: number, w: number, h: number, erase: boolean): void;
    repaintContents(erase: boolean): void;
    repaintContents(r: QRect, erase: boolean): void;
    repaintContents(x: number, y: number, w: number, h: number, erase: boolean): void;
    repaintContents(erase: boolean): void;
    repaintContents(r: QRect, erase: boolean): void;
    repaintContents(x: number, y: number, w: number, h: number, erase: boolean): void;
    repaintContents(erase: boolean): void;
    resize(obj: QSize): void;
    resize(w: number, h: number): void;
    resize(obj: QSize): void;
    resize(w: number, h: number): void;
    resizeContents(w: number, h: number): void;
    resizePolicy(): number;
    rightMargin(): number;
    scrollBy(dx: number, dy: number): void;
    setCachedSizeHint(sh: QSize): void;
    setContentsPos(x: number, y: number): void;
    setCornerWidget(obj: QWidget): void;
    setDragAutoScroll(b: boolean): void;
    setEnabled(enable: boolean): void;
    setHBarGeometry(hbar: QScrollBar, x: number, y: number, w: number, h: number): void;
    setHScrollBarMode(obj: number): void;
    setMargins(left: number, top: number, right: number, bottom: number): void;
    setResizePolicy(obj: number): void;
    setStaticBackground(y: boolean): void;
    setVBarGeometry(vbar: QScrollBar, x: number, y: number, w: number, h: number): void;
    setVScrollBarMode(obj: number): void;
    setVisible(visible: boolean): void;
    startDragAutoScroll(): void;
    stopDragAutoScroll(): void;
    styleChange(obj: QStyle): void;
    topMargin(): number;
    updateContents(r: QRect): void;
    updateContents(x: number, y: number, w: number, h: number): void;
    updateContents(): void;
    updateContents(r: QRect): void;
    updateContents(x: number, y: number, w: number, h: number): void;
    updateContents(): void;
    updateContents(r: QRect): void;
    updateContents(x: number, y: number, w: number, h: number): void;
    updateContents(): void;
    vScrollBarMode(): number;
    vbarIsPressed(): void;
    vbarIsReleased(): void;
    verticalScrollBar(): QScrollBar;
    verticalSliderPressed(): void;
    verticalSliderReleased(): void;
    viewport(): QWidget;
    viewportContextMenuEvent(obj: QContextMenuEvent): void;
    viewportDragEnterEvent(obj: QDragEnterEvent): void;
    viewportDragLeaveEvent(obj: QDragLeaveEvent): void;
    viewportDragMoveEvent(obj: QDragMoveEvent): void;
    viewportDropEvent(obj: QDropEvent): void;
    viewportMouseDoubleClickEvent(obj: QMouseEvent): void;
    viewportMouseMoveEvent(obj: QMouseEvent): void;
    viewportMousePressEvent(obj: QMouseEvent): void;
    viewportMouseReleaseEvent(obj: QMouseEvent): void;
    viewportPaintEvent(obj: QPaintEvent): void;
    viewportResizeEvent(obj: QResizeEvent): void;
    viewportSize(obj1: number, obj2: number): QSize;
    viewportToContents(obj: QPoint): QPoint;
    viewportToContents(vx: number, vy: number, x: number, y: number): void;
    viewportToContents(obj: QPoint): QPoint;
    viewportToContents(vx: number, vy: number, x: number, y: number): void;
    viewportWheelEvent(obj: QWheelEvent): void;
    visibleHeight(): number;
    visibleWidth(): number;
    vslide(obj: number): void;
    wheelEvent(obj: QWheelEvent): void;
}
declare class QPushButton extends QAbstractButton {
    constructor(parent: QWidget, name: string);
    constructor(icon: QIcon, text: QString, parent: QWidget, name: string);
    constructor(text: QString, parent: QWidget, name: string);
    autoDefault(): boolean;
    initStyleOption(option: QStyleOptionButton): void;
    isDefault(): boolean;
    isFlat(): boolean;
    menu(): QMenu;
    minimumSizeHint(): QSize;
    setAutoDefault(obj: boolean): void;
    setDefault(obj: boolean): void;
    setFlat(obj: boolean): void;
    setMenu(menu: QMenu): void;
    showMenu(): void;
    sizeHint(): QSize;
}
declare class QTabWidget extends QWidget {
    constructor(parent: QWidget, name: string, f: number);
    addTab(widget: QWidget, icon: QIcon, label: QString): number;
    addTab(widget: QWidget, obj: QString): number;
    addTab(widget: QWidget, icon: QIcon, label: QString): number;
    addTab(widget: QWidget, obj: QString): number;
    changeEvent(obj: QEvent): void;
    clear(): void;
    cornerWidget(corner: number): QWidget;
    count(): number;
    currentChanged(obj: QWidget): void;
    currentChanged(index: number): void;
    currentChanged(obj: QWidget): void;
    currentChanged(index: number): void;
    currentIndex(): number;
    currentWidget(): QWidget;
    documentMode(): boolean;
    elideMode(): number;
    event(obj: QEvent): boolean;
    heightForWidth(width: number): number;
    iconSize(): QSize;
    indexOf(widget: QWidget): number;
    initStyleOption(option: QStyleOptionTabWidgetFrame): void;
    insertTab(index: number, widget: QWidget, icon: QIcon, label: QString): number;
    insertTab(index: number, widget: QWidget, obj: QString): number;
    insertTab(index: number, widget: QWidget, icon: QIcon, label: QString): number;
    insertTab(index: number, widget: QWidget, obj: QString): number;
    isMovable(): boolean;
    isTabEnabled(index: number): boolean;
    keyPressEvent(obj: QKeyEvent): void;
    minimumSizeHint(): QSize;
    paintEvent(obj: QPaintEvent): void;
    removeTab(index: number): void;
    resizeEvent(obj: QResizeEvent): void;
    selected(obj: QString): void;
    setCornerWidget(w: QWidget, corner: number): void;
    setCurrentIndex(index: number): void;
    setCurrentWidget(widget: QWidget): void;
    setDocumentMode(set: boolean): void;
    setElideMode(obj: number): void;
    setIconSize(size: QSize): void;
    setMovable(movable: boolean): void;
    setTabBar(obj: QTabBar): void;
    setTabEnabled(index: number, obj: boolean): void;
    setTabIcon(index: number, icon: QIcon): void;
    setTabPosition(obj: number): void;
    setTabShape(s: number): void;
    setTabText(index: number, obj: QString): void;
    setTabToolTip(index: number, tip: QString): void;
    setTabWhatsThis(index: number, text: QString): void;
    setTabsClosable(closeable: boolean): void;
    setUpLayout(flag: boolean): void;
    setUsesScrollButtons(useButtons: boolean): void;
    showEvent(obj: QShowEvent): void;
    sizeHint(): QSize;
    tabBar(): QTabBar;
    tabCloseRequested(index: number): void;
    tabIcon(index: number): QIcon;
    tabInserted(index: number): void;
    tabPosition(): number;
    tabRemoved(index: number): void;
    tabShape(): number;
    tabText(index: number): QString;
    tabToolTip(index: number): QString;
    tabWhatsThis(index: number): QString;
    tabsClosable(): boolean;
    usesScrollButtons(): boolean;
    widget(index: number): QWidget;
}
declare class DzNumericProperty extends DzProperty {
    applyControllers(tm: DzTime, raw: number, local: boolean): number;
    applyControllersInverse(tm: DzTime, raw: number, local: boolean): number;
    changeFollowBone(bone: DzBone): void;
    changeFollowNode(node: DzNode): void;
    changeFollowTarget(skel: DzSkeleton): void;
    clampedChanged(onOff: boolean): void;
    clearLink(): void;
    clearMap(): void;
    emitClampedChanged(onOff: boolean): void;
    emitLinked(): void;
    emitMapChanged(): void;
    emitMinMaxChanged(): void;
    emitUnlinked(): void;
    getDoubleDefaultValue(): number;
    getDoubleValue(tm: DzTime): number;
    getDoubleValue(): number;
    getDoubleValue(tm: DzTime): number;
    getDoubleValue(): number;
    getFollowProperty(): DzNumericProperty;
    getFollowValue(tm: DzTime): number;
    getFollowValue(): number;
    getFollowValue(tm: DzTime): number;
    getFollowValue(): number;
    getLinkProperty(): DzNumericProperty;
    getMapValue(time: DzTime): DzTexture;
    getMapValue(): DzTexture;
    getMapValue(time: DzTime): DzTexture;
    getMapValue(): DzTexture;
    getXYZInterest(): number;
    isClamped(): boolean;
    isInvalidWithoutMap(): boolean;
    isLinked(): boolean;
    isMappable(): boolean;
    isMapped(): boolean;
    isMaster(): boolean;
    isModulo(): boolean;
    linkNotify(): void;
    linkTo(master: DzNumericProperty): void;
    linked(): void;
    mapChanged(): void;
    minMaxChanged(): void;
    removeFollowNode(): void;
    removeFollowProperty(): void;
    setDoubleDefaultValue(val: number): void;
    setDoubleValue(tm: DzTime, val: number): void;
    setDoubleValue(val: number): void;
    setDoubleValue(tm: DzTime, val: number): void;
    setDoubleValue(val: number): void;
    setFollowListeners(): void;
    setFollowProperty(prop: DzNumericProperty): void;
    setIsClamped(val: boolean): void;
    setIsMappable(val: boolean): void;
    setIsModulo(val: boolean): void;
    setLink(link: DzNumericProperty, isMaster: boolean): void;
    setMap(img: DzTexture): void;
    setMap(imgFile: QString): void;
    setMap(img: DzTexture): void;
    setMap(imgFile: QString): void;
    setMustHaveMap(val: boolean): void;
    setXYZInterest(interest: number): void;
    unlink(): void;
    unlinked(): void;
    addImageMapMenu(): void;
    addLabel(): void;
    addTieWgt(): void;
    addWidget(wgt: QWidget): void;
    changeMap(map: DzTexture): void;
    getMapDisplay(): number;
    setLayout(layout: number): void;
    setMap(map: DzTexture, indeterminate: boolean): void;
    setMapDisplay(mode: number): void;
    showEvent(e: QShowEvent): void;
    updateLabel(): void;
    updateLayout(layout: number): void;
    updateValue(): void;
}
declare class DzIntProperty extends DzNumericProperty {
    adjustValue(tm: DzTime, val: number): number;
    adjustValue(val: number): number;
    adjustValue(tm: DzTime, val: number): number;
    adjustValue(val: number): number;
    getDefaultValue(): number;
    getKeyValue(i: number): number;
    getKeys(): any;
    getLocalValue(tm: DzTime): number;
    getLocalValue(): number;
    getLocalValue(tm: DzTime): number;
    getLocalValue(): number;
    getMinMax(min: number, max: number): boolean;
    getRawValue(tm: DzTime): number;
    getRawValue(): number;
    getRawValue(tm: DzTime): number;
    getRawValue(): number;
    getSensitivity(): number;
    getValue(tm: DzTime): number;
    getValue(): number;
    getValue(tm: DzTime): number;
    getValue(): number;
    setDefaultValue(val: number): void;
    setKeyValue(keyIndex: number, val: number): void;
    setRawValue(tm: DzTime, val: number): void;
    setRawValue(val: number): void;
    setRawValue(tm: DzTime, val: number): void;
    setRawValue(val: number): void;
    setSensitivity(sens: number): void;
    setValue(tm: DzTime, val: number): void;
    setValue(val: number): void;
    setValue(tm: DzTime, val: number): void;
    setValue(val: number): void;
    addImageMenu(): void;
    calcEditRect(): QRect;
    calcLabelRect(): QRect;
    calcMinSize(): QSize;
    calcSliderRect(): QRect;
    calcTextRect(): QRect;
    enterEvent(e: QEvent): void;
    isMouseOverType(): boolean;
    isPropHidden(): boolean;
    leaveEvent(e: QEvent): void;
    mouseMoveEvent(e: QMouseEvent): void;
    mouseReleaseEvent(e: QMouseEvent): void;
    setIndent(indent: number): void;
    setIsMouseOverType(onOff: boolean): void;
    setLocked(onOff: boolean): void;
    setPropHidden(onOff: boolean): void;
    timerEvent(obj: QTimerEvent): void;
    updateImageMenuGeom(): void;
    isMouseOverSlider(): boolean;
    propStateChangeNotify(): void;
    propertyChangeNotify(): void;
    setIsMouseOverSlider(onOff: boolean): void;
    setValue(value: number): void;
    startEdit(): void;
}
declare class DzRefCountedItem extends QObject {
    getRefCount(): number;
    isShared(): boolean;
    isUnique(): boolean;
    ref(): void;
    unref(): void;
}
declare class QMenuBar extends QWidget {
    constructor(parent: QWidget, name: string);
    actionAt(obj: QPoint): QAction;
    actionEvent(obj: QActionEvent): void;
    actionGeometry(obj: QAction): QRect;
    activated(itemId: number): void;
    activeAction(): QAction;
    addAction(text: QString, receiver: QObject, member: string): QAction;
    addMenu(menu: QMenu): QAction;
    addMenu(icon: QIcon, title: QString): QMenu;
    addMenu(title: QString): QMenu;
    addMenu(menu: QMenu): QAction;
    addMenu(icon: QIcon, title: QString): QMenu;
    addMenu(title: QString): QMenu;
    addMenu(menu: QMenu): QAction;
    addMenu(icon: QIcon, title: QString): QMenu;
    addMenu(title: QString): QMenu;
    addSeparator(): QAction;
    autoGeometry(): any;
    changeEvent(obj: QEvent): void;
    clear(): void;
    cornerWidget(corner: number): QWidget;
    defaultAction(): QAction;
    event(obj: QEvent): boolean;
    eventFilter(obj: QObject, event: QEvent): boolean;
    findActionForId(id: number): QAction;
    findIdForAction(obj: QAction): number;
    focusInEvent(obj: QFocusEvent): void;
    focusOutEvent(obj: QFocusEvent): void;
    frameWidth(): any;
    heightForWidth(obj: number): number;
    highlighted(itemId: number): void;
    hovered(action: QAction): void;
    initStyleOption(option: QStyleOptionMenuItem, action: QAction): void;
    insertAny(icon: QIcon, text: QString, receiver: QObject, member: string): number;
    insertMenu(before: QAction, menu: QMenu): QAction;
    insertSeparator(before: QAction): QAction;
    insertSeparator(index: number): any;
    insertSeparator(before: QAction): QAction;
    insertSeparator(index: number): any;
    isDefaultUp(): boolean;
    isNativeMenuBar(): boolean;
    itemParameter(id: number): any;
    keyPressEvent(obj: QKeyEvent): void;
    leaveEvent(obj: QEvent): void;
    macMenu(): any;
    macUpdateMenuBar(): boolean;
    minimumSizeHint(): QSize;
    mouseMoveEvent(obj: QMouseEvent): void;
    mousePressEvent(obj: QMouseEvent): void;
    mouseReleaseEvent(obj: QMouseEvent): void;
    paintEvent(obj: QPaintEvent): void;
    resizeEvent(obj: QResizeEvent): void;
    setActiveAction(action: QAction): void;
    setAutoGeometry(obj: boolean): any;
    setCornerWidget(w: QWidget, corner: number): void;
    setDefaultAction(obj: QAction): void;
    setDefaultUp(obj: boolean): void;
    setItemParameter(id: number, param: number): any;
    setNativeMenuBar(nativeMenuBar: boolean): void;
    setVisible(visible: boolean): void;
    sizeHint(): QSize;
    timerEvent(obj: QTimerEvent): void;
    triggered(action: QAction): void;
    wceCommands(command: number): void;
    wceRefresh(): void;
}
declare class DzAbstractAssetContainer extends DzRefCountedItem {
    addConnectedModel(model: QAbstractItemModel): void;
    assetContainerValid(ptr: void): DzAbstractAssetContainer;
    assetIconChanged(asset: DzAsset): void;
    assetRenamed(asset: DzAsset, index: number): void;
    beginAssetAdd(start: number, end: number): void;
    beginAssetRemove(start: number, end: number): void;
    beginChildContainerAdd(con: DzAbstractAssetContainer, start: number, end: number): void;
    beginChildContainerRemove(con: DzAbstractAssetContainer, start: number, end: number): void;
    canAddSubContainer(): boolean;
    canDelete(): boolean;
    canModAssets(): boolean;
    canRename(): boolean;
    childContainerAboutToBeRemoved(childContainer: DzAbstractAssetContainerPtr): void;
    childContainerRemoved(childContainer: DzAbstractAssetContainerPtr): void;
    clearRebuildableAssets(): boolean;
    createNewChildContainer(containerName: QString): boolean;
    endAssetAdd(): void;
    endAssetRemove(): void;
    endChildContainerAdd(): void;
    endChildContainerRemove(): void;
    getAsset(index: number): DzAssetPtr;
    getAssets(): QObject[];
    getAssets(list: DzAsset[]): boolean;
    getAssets(): QObject[];
    getAssets(list: DzAsset[]): boolean;
    getCanCopyContainers(): boolean;
    getChildContainer(index: number): DzAbstractAssetContainerPtr;
    getChildContainers(): QObject[];
    getChildContainers(list: DzAbstractAssetContainer[]): boolean;
    getChildContainers(): QObject[];
    getChildContainers(list: DzAbstractAssetContainer[]): boolean;
    getChildIconSize(): QSize;
    getContainerName(): QString;
    getID(): QVariant;
    getIDPath(): QVariant[];
    getIcon(): QIcon;
    getNumAssets(): number;
    getNumChildContainers(): number;
    getOwner(): DzAbstractAssetContainer;
    getSmallChildIconSize(): QSize;
    getSupportFile(): QString;
    getToolTip(): QString;
    getUseCount(): number;
    hasAsset(asset: DzAsset): boolean;
    hasChildContainers(): boolean;
    ignoreAssetConflicts(): boolean;
    initChildren(): boolean;
    insertAsset(asset: DzAsset): boolean;
    insertChildContainer(container: DzAbstractAssetContainer): boolean;
    isConnectedToModel(model: QAbstractItemModel): boolean;
    isFileSystemBased(): boolean;
    loadMetadata(asset: DzAsset): void;
    moveFromParent(child: DzAbstractAssetContainer): boolean;
    removeAsset(asset: DzAsset): boolean;
    removeAssetCausesDelete(): boolean;
    removeAssetOnCut(toContainer: DzAbstractAssetContainer): boolean;
    removeChildContainer(container: DzAbstractAssetContainer): boolean;
    rename(name: QString): boolean;
    renameAsset(asset: DzAsset, newAssetName: QString): boolean;
    renameChildContainer(container: DzAbstractAssetContainer, name: QString): boolean;
    setCanAddSubContainer(yesNo: boolean): void;
    setCanDelete(yesNo: boolean): void;
    setCanModifyAssets(yesNo: boolean): void;
    setCanRename(yesNo: boolean): void;
    setContainerName(name: QString): void;
    setID(id: QVariant): void;
    setIcon(icon: QIcon): void;
    setOwner(newOwner: DzAbstractAssetContainer): void;
    setToolTip(tip: QString): void;
    setUseCount(count: number): void;
    showAsNew(): boolean;
    standardPasteAssets(list: DzAsset[], copy: boolean, from: DzAbstractAssetContainer): void;
    update(): boolean;
    updateAssets(): boolean;
    updateMetadata(asset: DzAsset): boolean;
}
declare class DzMaterial extends DzElement {
    addedTo(shape: DzShape): void;
    allowsAutoBake(): boolean;
    assetModified(): void;
    assetWasSaved(): void;
    bakedMapChanged(): void;
    connectForAutoBake(): void;
    createProperties(copyFrom: DzMaterial): void;
    enablePropagateRenderPriorityToNodes(propagate: boolean): void;
    followMaterialChanged(): void;
    getActiveUVSet(shape: DzShape): DzUVSet;
    getActiveUVSet(geom: DzGeometry): DzUVSet;
    getAllMaps(): QObject[];
    getAssetType(): any;
    getBakedMap(): DzTexture;
    getBaseOpacity(): number;
    getBoundingBox(): DzBox3;
    getColorMap(): DzTexture;
    getDiffuseColor(): QColor;
    getFollowBlendControl(): DzFloatProperty;
    getFollowMaterial(): DzMaterial;
    getIndex(): number;
    getMaterial(which: number): DzMaterial;
    getMaterialName(): QString;
    getNumGLMaps(): number;
    getNumMaterials(): number;
    getNumUVMaps(): number;
    getOpacityMap(): DzTexture;
    getPropagatePriorityControl(): DzBoolProperty;
    getRenderPriority(): number;
    getRenderPriorityControl(): DzEnumProperty;
    getShapeList(): QObject[];
    getSmoothAngleControl(): DzFloatProperty;
    getSmoothControl(): DzBoolProperty;
    getSmoothingAngle(): number;
    getUVSetControl(): DzEnumProperty;
    init(doCreateProperties: boolean, copyFrom: DzMaterial): void;
    isColorMappable(): boolean;
    isHighlighted(): boolean;
    isOpacityMappable(): boolean;
    isPropagateRenderPriorityToNodesEnabled(): boolean;
    isRenderingAsCoShader(): boolean;
    isSelected(): boolean;
    isSmoothingOn(): boolean;
    multiTexturingSupported(): boolean;
    needsTangentSpaceParams(): boolean;
    propagateRenderPriorityToNodes(): void;
    removedFrom(shape: DzShape): void;
    requestAutoBake(): void;
    resetBakedMap(): void;
    select(onOff: boolean): void;
    selectionStateChanged(mat: DzMaterial, onOff: boolean): void;
    setBakedMap(img: DzTexture): void;
    setBaseOpacity(val: number): void;
    setCoShader(settings: DzRenderSettings, info: DzCoShaderInfo): void;
    setColorMap(img: DzTexture): void;
    setDiffuseColor(color: QColor): void;
    setFollowMaterial(mat: DzMaterial): void;
    setGL(style: DzDrawStyle): void;
    setGLBakeMat(style: DzDrawStyle): void;
    setGLHighlight(style: DzDrawStyle): void;
    setGLMat(style: DzDrawStyle): void;
    setOpacityMap(img: DzTexture): void;
    setRender(settings: DzRenderSettings): void;
    setRenderPriority(priority: number): void;
    setRenderPriority(priority: number): void;
    setRenderPriority(priority: number): void;
    setRenderPriority(priority: number): void;
    setShader(settings: DzRenderSettings): void;
    setSmoothingAngle(angle: number): void;
    setSmoothingOn(onOff: boolean): void;
    setTextureConvertShader(settings: DzRenderSettings): void;
    setTextureConvertTokens(settings: DzRenderSettings): number;
    settingsChanged(): void;
    shadersMatch(otherMat: DzMaterial): boolean;
    shapeListIterator(): DzShapeListIterator;
    shouldAlwaysEmbed(): boolean;
    smoothingChanged(): void;
    startDrawHighlight(): void;
    stopDrawHighlight(): void;
    toQObject(): QObject;
    toQObject(): any;
    toQObject(): QObject;
    toQObject(): any;
    triggerAutoBake(): void;
    unsetGL(style: DzDrawStyle): void;
    unsetGLBakeMat(style: DzDrawStyle): void;
    unsetGLHighlight(style: DzDrawStyle): void;
    unsetGLMat(style: DzDrawStyle): void;
    unsetRender(settings: DzRenderSettings): void;
    updateUVList(): void;
    uvsChanged(): void;
    getShouldRenderAsCurve(): boolean;
    setRenderAsCurve(onOff: boolean): void;
    currentValueInAnimation(): boolean;
    getMaterialIncludeProperties(): DzProperty[];
    setWriteAnimation(onOff: boolean): void;
    setWriteInstances(onOff: boolean): void;
    writeAnimations(prop: DzProperty, io: any, foundAnimation: boolean): boolean;
    writeAnimations(io: any): boolean;
    writeAnimations(prop: DzProperty, io: any, foundAnimation: boolean): boolean;
    writeAnimations(io: any): boolean;
    writeMaterialInstances(io: any): boolean;
    writeUVSetAnimation(mat: DzMaterial, io: any, propRef: QString): boolean;
    activate(): void;
    aimCamera(view: Dz3DViewport): void;
    clearHighlighting(): void;
    contextMenu(view: Dz3DViewport, menu: DzMenu, pos: QPoint): void;
    deactivate(): void;
    draw(style: DzDrawStyle, view: Dz3DViewport): void;
    drawMaterial(mat: DzMaterial): void;
    drawSelectedMaterials(): void;
    frameCamera(view: Dz3DViewport): void;
    getPane(parent: QWidget): QWidget;
    getPropertyFromUser(imageOnly: boolean, mat: DzMaterial): DzProperty;
    getSelectionBoundingBox(box: DzBox3): void;
    getSurfacePane(): DzSurfacesPane;
    menuSelection(id: number): void;
    mouseLeave(view: Dz3DViewport, e: QEvent): void;
    mouseOver(view: Dz3DViewport, e: QMouseEvent, accel: number): void;
    mousePress(view: Dz3DViewport, e: QMouseEvent, accel: number): boolean;
    rebuildSelectedMats(): void;
    selectAllMaterials(match: DzMaterial): void;
    selectAllMaterials(onOff: boolean, match: DzMaterial, useTextureMap: boolean, prop: DzProperty): void;
    selectAllMaterials(match: DzMaterial): void;
    selectAllMaterials(onOff: boolean, match: DzMaterial, useTextureMap: boolean, prop: DzProperty): void;
    setHighlightMaterial(mat: DzMaterial, view: Dz3DViewport): void;
    setHighlightSelected(onOff: boolean): void;
    setHighlightWidth(width: number): void;
    stylize(): void;
    updateNodeSelection(): void;
    whatsThisText(): QString;
    buildSelectionGroup(parent: QWidget): void;
    highlightSelectedChanged(): void;
    initOptions(): void;
    outlineWidthChanged(): void;
}
declare class DzProperty extends DzBase {
    addAlias(prop: DzProperty, alias: DzProperty): void;
    addAlias(alias: DzProperty): void;
    addAlias(prop: DzProperty, alias: DzProperty): void;
    addAlias(alias: DzProperty): void;
    addSlaveController(control: DzController): void;
    assetModified(): void;
    assetWasSaved(): void;
    beginEdit(): void;
    canAnimate(): boolean;
    canAnimateChanged(enabled: boolean): void;
    canAutoFollow(): boolean;
    canAutoFollowChanged(canAutoFollow: boolean): void;
    cancelEdit(): void;
    clearGroup(): void;
    clearRegion(preservePath: boolean): void;
    controllerListIterator(): DzControllerListIterator;
    copyBaseData(prop: DzProperty): void;
    copyFrom(prop: DzProperty): void;
    copyToClipboard(): DzPropertyClipboard;
    createAlias(): DzProperty;
    currentValueChanged(): void;
    currentValueIsDefaultValue(): boolean;
    definitionLoadFromDAZ(): boolean;
    deleteAllKeys(): void;
    deleteKeys(interval: DzTimeRange): number;
    deleteKeys(start: number, end: number): number;
    deleteKeys(interval: DzTimeRange): number;
    deleteKeys(start: number, end: number): number;
    deleteSelectedKeys(): number;
    doCurrentAttributesMatchDefinition(): boolean;
    duplicate(): DzProperty;
    editFinished(): void;
    emitCanAnimateChanged(enabled: boolean): void;
    emitCanAutoFollowChanged(canAutoFollow: boolean): void;
    emitCurrentValueChanged(): void;
    emitEditFinished(): void;
    emitIsManipulatorChanged(isManip: boolean): void;
    emitIsUserPropertyChanged(isUserProp: boolean): void;
    emitKeySelectionChanged(range: DzTimeRange): void;
    emitLockStateChanged(): void;
    emitOverridingControllersChanged(overriding: boolean): void;
    emitValueChanged(range: DzTimeRange): void;
    ensurePropertyType(prop: DzProperty, srcProp: DzProperty): DzProperty;
    findMatchingProperty(node: DzNode): DzProperty;
    finishEdit(): void;
    getAlias(index: number): DzProperty;
    getAliasTarget(): DzProperty;
    getAssetType(): any;
    getAttributes(settings: DzPropertySettings): void;
    getAttributes(settings: DzPropertySettings): void;
    getAttributes(settings: DzPropertySettings): void;
    getAttributes(settings: DzPropertySettings): void;
    getController(idx: number): DzController;
    getControllerList(): QObject[];
    getFlags(): number;
    getGroup(): DzPropertyGroup;
    getGroupOnlyPath(): QString;
    getIndexOfSlaveControllers(cntrl: DzController): number;
    getKeyIndexRange(iv: DzTimeRange, start: number): number;
    getKeyRange(): DzTimeRange;
    getKeyTime(i: number): DzTime;
    getLabel(): QString;
    getNumAliases(): number;
    getNumControllers(): number;
    getNumKeys(range: DzTimeRange): number;
    getNumKeys(): number;
    getNumKeys(range: DzTimeRange): number;
    getNumKeys(): number;
    getNumSelectedKeys(): number;
    getNumSlaveControllers(): number;
    getOwner(): DzElement;
    getPath(): QString;
    getPresentation(): DzPresentation;
    getPropertyDefinition(): DzPropertyDefinition;
    getRegion(): DzGeometryRegion;
    getSelectedKeyRange(): DzTimeRange;
    getSlaveController(idx: number): DzController;
    getSlaveControllerList(): QObject[];
    getWidgetClass(styled: boolean): QString;
    groupChanged(newGroup: DzPropertyGroup): void;
    hasControllers(): boolean;
    hasKeys(): boolean;
    hasSlaveControllers(): boolean;
    hiddenChanged(hidden: boolean): void;
    insertController(controller: DzController, idx: number): void;
    isAlias(): boolean;
    isCombinable(prop: DzProperty): boolean;
    isEditing(): boolean;
    isFavorite(): boolean;
    isFavoriteChanged(onOff: boolean): void;
    isGlobalFavorite(): boolean;
    isGlobalFavoriteChanged(onOff: boolean): void;
    isHidden(): boolean;
    isKey(t: DzTime, index: number): boolean;
    isKeySelected(i: number): boolean;
    isLocked(): boolean;
    isManipulator(): boolean;
    isManipulatorChanged(isManip: boolean): void;
    isNew(): boolean;
    isNumeric(): boolean;
    isOverridingControllers(): boolean;
    isPrivateProperty(): boolean;
    isRigProperty(): boolean;
    isSelected(): boolean;
    isUserProperty(): boolean;
    isUserPropertyChanged(isUserProp: boolean): void;
    keySelectionChanged(range: DzTimeRange): void;
    labelChanged(newLabel: QString): void;
    lock(onOff: boolean): void;
    lockStateChanged(): void;
    moveControllerToIndex(ctrl: DzController, newIdx: number): boolean;
    moveControllerToIndex(curIdx: number, newIdx: number): boolean;
    moveControllerToIndex(ctrl: DzController, newIdx: number): boolean;
    moveControllerToIndex(curIdx: number, newIdx: number): boolean;
    newStateChanged(): void;
    overridingControllersChanged(overriding: boolean): void;
    presentationIconChanged(): void;
    propertyDeleted(thisProperty: DzProperty): void;
    propertyDuplicate(): DzProperty;
    regionChanged(): void;
    regroup(tree: DzPropertyGroupTree): void;
    removeAlias(prop: DzProperty, alias: DzProperty): void;
    removeAllControllers(): void;
    removeController(ctrl: DzController): void;
    removeController(idx: number): void;
    removeController(prop: DzProperty): void;
    removeController(ctrl: DzController): void;
    removeController(idx: number): void;
    removeController(prop: DzProperty): void;
    removeController(ctrl: DzController): void;
    removeController(idx: number): void;
    removeController(prop: DzProperty): void;
    removeSlaveController(control: DzController): void;
    removed(): void;
    selectAllKeys(onOff: boolean): number;
    selectKey(i: number, onOff: boolean): void;
    selectKeys(range: DzTimeRange, onOff: boolean): number;
    selectionStateChanged(): void;
    setAttributes(settings: DzPropertySettings): void;
    setAttributes(settings: DzPropertySettings): void;
    setAttributes(settings: DzPropertySettings): void;
    setAttributes(settings: DzPropertySettings): void;
    setCanAnimate(yesNo: boolean): void;
    setCanAutoFollow(onOff: boolean): void;
    setCurrentAttributesAsDefinition(): void;
    setFlags(int: number): void;
    setGroup(group: DzPropertyGroup): void;
    setHidden(yesNo: boolean): void;
    setIsFavorite(onOff: boolean): void;
    setIsGlobalFavorite(onOff: boolean): void;
    setIsManipulator(onOff: boolean): void;
    setIsPrivateProperty(yesNo: boolean): void;
    setIsRigProperty(yesNo: boolean): void;
    setIsUserProperty(yesNo: boolean): void;
    setLabel(label: QString): void;
    setNew(onOff: boolean): void;
    setOverrideControllers(onOff: boolean): void;
    setOwner(owner: DzElement): void;
    setPath(path: QString): void;
    setPresentation(pres: DzPresentation): void;
    setRegion(reg: DzGeometryRegion): void;
    setSelected(onOff: boolean): void;
    slaveControllerListIterator(): DzControllerListIterator;
    toQObject(): QObject;
    toQObject(): any;
    toQObject(): QObject;
    toQObject(): any;
    updateControllerState(): void;
    updateTime(): void;
    valueChanged(range: DzTimeRange): void;
    valueIsReplaced(): boolean;
    paste(prop: DzProperty): DzError;
    addChild(child: DzPropertyGroup): void;
    addProperty(prop: DzProperty): void;
    addSibling(sibling: DzPropertyGroup): void;
    addedChild(newChild: DzPropertyGroup): void;
    childListChanged(): void;
    collectAllPaths(paths: String[]): void;
    findChild(name: QString): DzPropertyGroup;
    findSibling(name: QString): DzPropertyGroup;
    getAllPaths(): String[];
    getCollapsed(): boolean;
    getFirstChild(): DzPropertyGroup;
    getNextSibling(): DzPropertyGroup;
    getNumProperties(): number;
    getParent(): DzPropertyGroup;
    getPath(): QString;
    getProperties(): DzPropertyListIterator;
    getProperty(i: number): DzProperty;
    getRegion(): DzGeometryRegion;
    getTree(): DzPropertyGroupTree;
    hasProperty(label: QString, exclude: DzProperty): boolean;
    indexOfProperty(prop: DzProperty): number;
    isRegion(): boolean;
    moveChildToIndex(childName: QString, newIndex: number): boolean;
    movePropertyToIndex(prop: DzProperty, newIndex: number): boolean;
    movePropertyToIndex(propName: QString, newIndex: number): boolean;
    movePropertyToIndex(curIndex: number, newIndex: number): boolean;
    movePropertyToIndex(prop: DzProperty, newIndex: number): boolean;
    movePropertyToIndex(propName: QString, newIndex: number): boolean;
    movePropertyToIndex(curIndex: number, newIndex: number): boolean;
    movePropertyToIndex(prop: DzProperty, newIndex: number): boolean;
    movePropertyToIndex(propName: QString, newIndex: number): boolean;
    movePropertyToIndex(curIndex: number, newIndex: number): boolean;
    parentChanged(newParent: DzPropertyGroup): void;
    removeChild(child: DzPropertyGroup): void;
    removeProperty(prop: DzProperty): void;
    removedChild(child: DzPropertyGroup): void;
    setCollapsed(onOff: boolean): void;
    setParent(parent: DzPropertyGroup): void;
    setTree(tree: DzPropertyGroupTree): void;
    setUniquePropertyLabel(prop: DzProperty): void;
    sort(): void;
    sortGroups(sortSibs: boolean): DzPropertyGroup;
    treeChanged(): void;
    decode(src: QMimeSource, propGroupList: DzPropertyGroup[]): boolean;
    decode(src: QMimeData, propGroupList: DzPropertyGroup[]): void;
    decode(src: QMimeSource, propGroupList: DzPropertyGroup[]): boolean;
    decode(src: QMimeData, propGroupList: DzPropertyGroup[]): void;
    encode(propGroupList: DzPropertyGroup[]): number[];
    addChild(child: DzPropertyGroup): void;
    childListChanged(): void;
    collectAllPaths(paths: String[]): void;
    findChild(name: QString): DzPropertyGroup;
    getAllPaths(): String[];
    getDefaultGroup(): DzPropertyGroup;
    getFirstChild(): DzPropertyGroup;
    getOwner(): DzElement;
    getPropertyGroup(path: QString): DzPropertyGroup;
    isPrivate(): boolean;
    moveChildToIndex(childName: QString, newIndex: number): boolean;
    removeChild(child: DzPropertyGroup): void;
    setIsPrivate(onoff: boolean): void;
    setOwner(owner: DzElement): void;
    sortGroups(): void;
    treeChanged(): void;
    findPropertyOnNode(propName: QString, node: DzNode): DzProperty;
    findPropertyOnNodeByInternalName(internalName: QString, node: DzNode): DzProperty;
    findPropertyOnNodeByLabel(label: QString, node: DzNode): DzProperty;
    getErcController(controlledProp: DzProperty, controllingProp: DzProperty): DzERCLink;
    getInternalName(prop: DzProperty): QString;
    getLabel(prop: DzProperty): QString;
    getMax(prop: DzProperty, max: number): boolean;
    getMin(prop: DzProperty, min: number): boolean;
    getNode(prop: DzProperty): DzNode;
    getNodeName(prop: DzProperty): QString;
    getNodeType(prop: DzProperty): QString;
    getPrivatePropertiesOnNode(prop: DzProperty, propList: DzProperty[]): void;
    getPrivatePropertiesOnNode(node: DzNode, propList: DzProperty[]): void;
    getPrivatePropertiesOnNode(prop: DzProperty, propList: DzProperty[]): void;
    getPrivatePropertiesOnNode(node: DzNode, propList: DzProperty[]): void;
    getPropertiesOnElement(elem: DzElement, propList: DzProperty[]): void;
    getPropertiesOnNode(prop: DzProperty, propList: DzProperty[], includeModifiers: boolean): void;
    getPropertiesOnNode(node: DzNode, propList: DzProperty[], includeModifiers: boolean): void;
    getPropertiesOnNode(prop: DzProperty, propList: DzProperty[], includeModifiers: boolean): void;
    getPropertiesOnNode(node: DzNode, propList: DzProperty[], includeModifiers: boolean): void;
    getRegionPropertiesOnNode(curNode: DzNode, propList: DzProperty[]): void;
    getRegionPropertiesRecurse(region: DzGeometryRegion, propList: DzProperty[]): void;
    isAtDefaultValue(prop: DzProperty): boolean;
    isDFormModProperty(prop: DzProperty): DzProperty;
    isLegacyJointProperty(prop: DzProperty): DzProperty;
    isLegacyProperty(prop: DzProperty): boolean;
    isModifierProperty(prop: DzProperty): DzProperty;
    isMorphProperty(prop: DzProperty): DzProperty;
    isNodeProperty(prop: DzProperty): DzProperty;
    isTransformProperty(prop: DzProperty): DzProperty;
    setInternalName(prop: DzProperty, name: QString): boolean;
    setMax(prop: DzProperty, max: number): void;
    setMin(prop: DzProperty, min: number): void;
    setMinMax(prop: DzProperty, min: number, max: number): void;
    setPropertyPath(prop: DzProperty, inPath: QString): void;
    decode(src: QMimeSource, propList: DzProperty[]): boolean;
    decode(src: QMimeData, propList: DzProperty[]): void;
    decode(src: QMimeSource, propList: DzProperty[]): boolean;
    decode(src: QMimeData, propList: DzProperty[]): void;
    encode(propList: DzProperty[]): number[];
    addProperty(prop: DzProperty): void;
    propertyValueChanged(): void;
    createEditor(parent: QWidget, option: QStyleOptionViewItem, index: QModelIndex): QWidget;
    getPropertyWgt(node: DzPropertyListNodePtr): DzPropertyWgt;
    isCardMode(): boolean;
    paint(painter: QPainter, option: QStyleOptionViewItem, index: QModelIndex): void;
    setCardMode(onOff: boolean): void;
    setEditorData(editor: QWidget, index: QModelIndex): void;
    sizeHint(option: QStyleOptionViewItem, index: QModelIndex): QSize;
    updateControlOnlySettings(): void;
    updateEditorGeometry(editor: QWidget, option: QStyleOptionViewItem, index: QModelIndex): void;
    addProperty(prop: DzProperty): void;
    clearProperties(): void;
    columnCount(parent: QModelIndex): number;
    data(index: QModelIndex, role: number): QVariant;
    event(eve: QEvent): boolean;
    flags(index: QModelIndex): number;
    getIndexForNode(propNode: DzPropertyListNode): QModelIndex;
    getPropertyNodeForIndex(index: QModelIndex): DzPropertyListNodePtr;
    index(row: number, column: number, parent: QModelIndex): QModelIndex;
    parent(index: QModelIndex): QModelIndex;
    processLabelUpdates(): void;
    processPropUpdates(): void;
    propertyChanged(): void;
    propertyHiddenStateChange(): void;
    propertyLabelChanged(lbl: QString): void;
    removeProp(prop: DzProperty): void;
    rowCount(parent: QModelIndex): number;
    addProperty(prop: DzProperty): void;
    getLabel(): QString;
    getNumProperties(): number;
    getProperties(): DzProperty[];
    isNew(): boolean;
    removeProperty(prop: DzProperty): boolean;
    setLabel(newLabel: QString): void;
    setNew(onOff: boolean): void;
    updateNew(): void;
    addProperty(prop: DzProperty): boolean;
    addPropertyGroup(group: DzPropertyGroup, showHidden: boolean): boolean;
    addPropertyGroupRecurse(root: DzPropertyGroup, showHidden: boolean): boolean;
    addPropertyToGroup(prop: DzProperty, widGroup: DzWidgetGroup): boolean;
    addPropertyTree(tree: DzPropertyGroupTree, showHidden: boolean): boolean;
    centralWidget(): QWidget;
    clear(): void;
    getGroup(name: QString): DzWidgetGroup;
    moveWidgetListGroupToEnd(widgetListGroup: DzWidgetGroup): boolean;
    resetLayout(): void;
    resizeEvent(e: QResizeEvent): void;
    setNewGroupsCollapsed(open: boolean): void;
    deleteProperty(temp: DzProperty): void;
    getArg(i: number): QString;
    getArgType(i: number): any;
    getDirection(): number;
    getNumArgs(): number;
    getNumProperties(): number;
    getNumTokensNeeded(): number;
    getProperty(i: number): DzProperty;
    getPropertyMapToken(i: number): number;
    getStringValue(i: number): QString;
    getType(): any;
    getTypeForToken(i: number): any;
    propertyDestoyed(): void;
    setDirection(i: number): void;
    setProperty(prop: DzProperty, arg: QString, mapArg: QString): void;
    setShouldWriteTokenInShader(onoff: boolean): void;
    setTokenInBuffer(): void;
    shouldWriteTokenInShader(i: number): boolean;
    clicked(): void;
    isDefault(): boolean;
    mousePressEvent(event: QMouseEvent): void;
    paintEvent(e: QPaintEvent): void;
    setIsDefault(onOff: boolean): void;
    aboutToShowOptionsDialog(): void;
    addProperty(prop: DzProperty): DzError;
    clearPropertyList(): void;
    doOptionsDialog(): boolean;
    fastUpdate(): void;
    getFirstProperty(): DzProperty;
    getNumProperties(): number;
    getNumTotalProperties(): number;
    getProperties(): DzPropertyListIterator;
    getPropertyHiddenState(): number;
    getViewItemStyleOptions(): number;
    isFastMode(): boolean;
    isSelected(): boolean;
    isShowingControlOnly(): boolean;
    mouseDoubleClickEvent(e: QMouseEvent): void;
    mousePressEvent(e: QMouseEvent): void;
    propertySelectionChanged(): void;
    removeAllProperties(): void;
    removeDeletedProperty(prop: DzProperty): void;
    resetProperties(allowUndo: boolean): void;
    selectionStateChanged(onOff: boolean): void;
    setFastMode(mode: boolean): void;
    setLevel(level: number): void;
    setPropertyList(list: DzProperty[]): void;
    setSelected(onOff: boolean): void;
    setViewItemStyleOptions(flags: number): void;
    showControlOnly(onOff: boolean): void;
    updateFromList(): void;
    updatePropertyHiddenState(): void;
}
declare class QGLWidget extends QWidget {
    constructor(context: QGLContext, parent: QWidget, name: string);
    constructor(parent: QWidget, name: string);
    constructor(format: QGLFormat, parent: QWidget, name: string);
    autoBufferSwap(): boolean;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    bindTexture(image: QImage, target: number): number;
    bindTexture(image: QImage, target: number, format: number): number;
    bindTexture(image: QImage, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(image: QImage, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(pixmap: QPixmap, target: number): number;
    bindTexture(pixmap: QPixmap, target: number, format: number): number;
    bindTexture(pixmap: QPixmap, GL_TEXTURE_2D: QMacCompatGLenum): number;
    bindTexture(pixmap: QPixmap, obj: QMacCompatGLenum, format: QMacCompatGLint): number;
    bindTexture(fileName: QString): number;
    colormap(): any;
    context(): any;
    convertToGLFormat(img: QImage): QImage;
    deleteTexture(tx_id: number): void;
    deleteTexture(tx_id: QMacCompatGLuint): void;
    deleteTexture(tx_id: number): void;
    deleteTexture(tx_id: QMacCompatGLuint): void;
    doneCurrent(): void;
    doubleBuffer(): boolean;
    drawTexture(point: QPointF, textureId: number, textureTarget: number): void;
    drawTexture(point: QPointF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(target: QRectF, textureId: number, textureTarget: number): void;
    drawTexture(target: QRectF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(point: QPointF, textureId: number, textureTarget: number): void;
    drawTexture(point: QPointF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(target: QRectF, textureId: number, textureTarget: number): void;
    drawTexture(target: QRectF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(point: QPointF, textureId: number, textureTarget: number): void;
    drawTexture(point: QPointF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(target: QRectF, textureId: number, textureTarget: number): void;
    drawTexture(target: QRectF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(point: QPointF, textureId: number, textureTarget: number): void;
    drawTexture(point: QPointF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    drawTexture(target: QRectF, textureId: number, textureTarget: number): void;
    drawTexture(target: QRectF, textureId: QMacCompatGLuint, textureTarget: QMacCompatGLenum): void;
    event(obj: QEvent): boolean;
    format(): QGLFormat;
    glDraw(): void;
    glInit(): void;
    grabFrameBuffer(withAlpha: boolean): QImage;
    initializeGL(): void;
    initializeOverlayGL(): void;
    isSharing(): boolean;
    isValid(): boolean;
    makeCurrent(): void;
    makeOverlayCurrent(): void;
    overlayContext(): any;
    paintEvent(obj: QPaintEvent): void;
    paintGL(): void;
    paintOverlayGL(): void;
    qglClearColor(c: QColor): void;
    qglColor(c: QColor): void;
    renderPixmap(w: number, h: number, useContext: boolean): QPixmap;
    renderText(x: number, y: number, z: number, str: QString): void;
    renderText(x: number, y: number, str: QString): void;
    renderText(x: number, y: number, z: number, str: QString): void;
    renderText(x: number, y: number, str: QString): void;
    resizeEvent(obj: QResizeEvent): void;
    resizeGL(w: number, h: number): void;
    resizeOverlayGL(w: number, h: number): void;
    setAutoBufferSwap(on: boolean): void;
    setColormap(map: QGLColormap): void;
    setContext(context: QGLContext, shareContext: QGLContext): void;
    setFormat(format: QGLFormat): void;
    setMouseTracking(enable: boolean): void;
    swapBuffers(): void;
    updateGL(): void;
    updateOverlayGL(): void;
}
declare class DzCamera extends DzNode {
    accFrustum(left: number, right: number, bottom: number): void;
    accPerspective(fovy: number, aspect: number): void;
    aimAt(pos: DzVec3): void;
    aspectRatioChanged(): void;
    calcLocalBoundingBox(): DzBox3;
    draw(style: DzDrawStyle): void;
    focalDistanceChanged(range: DzTimeRange): void;
    focalLengthChanged(range: DzTimeRange): void;
    frame(box: DzBox3, aspect: number): void;
    getAspectRatio(): number;
    getFarClippingPlane(): number;
    getFieldOfView(): number;
    getFocalDistance(): number;
    getFocalLength(): number;
    getFocalPoint(): DzVec3;
    getHeadlight(): DzLight;
    getIcon(): QIcon;
    getNearClippingPlane(): number;
    getPixmap(state: number): QPixmap;
    isViewCamera(): boolean;
    projectionChanged(): void;
    reset(): void;
    setAspectRatio(aspect: number): void;
    setFocalDistance(dist: number): void;
    setFocalLength(dist: number): void;
    setGL(width: number, height: number, view: QRect, pass: number, totalPasses: number): void;
    setProjection(settings: DzRenderSettings, width: number, height: number): void;
    setRenderGlobals(settings: DzRenderSettings): void;
}
declare class QCoreApplication extends QObject {
    aboutToQuit(): void;
    addLibraryPath(obj: QString): void;
    applicationDirPath(): QString;
    applicationFilePath(): QString;
    applicationName(): QString;
    applicationPid(): number;
    applicationVersion(): QString;
    arguments(): String[];
    closingDown(): boolean;
    compressEvent(event: QEvent, receiver: QObject, postEventList: QPostEvent[]): boolean;
    enter_loop(): any;
    event(obj: QEvent): boolean;
    exec(): number;
    exit(retcode: number): void;
    exit_loop(): any;
    filterEvent(message: void, result: number): boolean;
    flush(): void;
    hasPendingEvents(): boolean;
    init(): void;
    installTranslator(messageFile: QTranslator): void;
    libraryPaths(): String[];
    notify(obj: QObject, event: QEvent): boolean;
    notifyInternal(receiver: QObject, event: QEvent): boolean;
    organizationDomain(): QString;
    organizationName(): QString;
    postEvent(receiver: QObject, event: QEvent, priority?: number): void;
    processEvents(flags: number, maxtime?: number): void;
    qAppName(): any;
    qt_sendSpontaneousEvent(obj: QObject, event: QEvent): any;
    quit(): void;
    removeLibraryPath(obj: QString): void;
    removePostedEvents(receiver: QObject, eventType?: number): void;
    removeTranslator(messageFile: QTranslator): void;
    sendEvent(receiver: QObject, event: QEvent): boolean;
    sendPostedEvents(): void;
    sendPostedEvents(receiver: QObject, event_type: number): void;
    sendPostedEvents(): void;
    sendPostedEvents(receiver: QObject, event_type: number): void;
    sendSpontaneousEvent(receiver: QObject, event: QEvent): boolean;
    setApplicationName(application: QString): void;
    setApplicationVersion(version: QString): void;
    setAttribute(attribute: number, on: boolean): void;
    setEventFilter(filter: any): any;
    setLibraryPaths(obj: String[]): void;
    setOrganizationDomain(orgDomain: QString): void;
    setOrganizationName(orgName: QString): void;
    startingUp(): boolean;
    testAttribute(attribute: number): boolean;
    translate(context: string): QString;
    unixSignal(obj: number): void;
    watchUnixSignal(signal: number, watch: boolean): void;
    winEventFilter(message: any, result: number): boolean;
}
declare class Q3Frame extends QFrame {
    contentsRect(): QRect;
    drawContents(obj: QPainter): void;
    frameChanged(): void;
    resizeEvent(obj: QResizeEvent): void;
    setMargin(obj: number): void;
}
declare class Q3TextStream extends QObject {
    atEnd(): boolean;
    eof(): boolean;
    fill(obj: number): number;
    fill(): number;
    fill(obj: number): number;
    fill(): number;
    flags(f: number): number;
    flags(): number;
    flags(f: number): number;
    flags(): number;
    init(): void;
    input_bin(): number;
    input_dec(): number;
    input_double(): number;
    input_hex(): number;
    input_int(): number;
    input_oct(): number;
    precision(obj: number): number;
    precision(): number;
    precision(obj: number): number;
    precision(): number;
    read(): QString;
    readLine(): QString;
    readRawBytes(obj: string, len: number): Q3TextStream;
    reset(): void;
    setEncoding(obj: any): void;
    setf(bits: number): number;
    setf(bits: number, mask: number): number;
    setf(bits: number): number;
    setf(bits: number, mask: number): number;
    skipWhiteSpace(): void;
    unsetDevice(): void;
    unsetf(bits: number): number;
    width(obj: number): number;
    width(): number;
    width(obj: number): number;
    width(): number;
    writeRawBytes(obj: string, len: number): Q3TextStream;
}
interface String {
    search(pattern: String): number;
    search(pattern: RegExp): number;
    endsWith(pattern: String): boolean;
    endsWith(pattern: RegExp): boolean;
    find(pattern: RegExp, startPos?: number): number;
    find(pattern: String, startPos?: number): number;
    /** @param startPos if omitted defaults to 'length -1'*/
    findRev(pattern: RegExp, startPos?: number): number;
    /** @param startPos if omitted defaults to 'length -1'*/
    findRev(pattern: String, startPos?: Number): number;
    startsWith(pattern: String): boolean;
    startsWith(pattern: RegExp): boolean;
    upper(): String;
    lower(): String;
    mid(startIndex: number, num: number): string;
    /**
     * Text to represent as a String
     * @param value The text to represent as a string.
     * @param fieldWidth Specifies the minimum amount of space that value is padded to. A positive fieldWidth will produce right aligned text, a negative fieldWidth will produce left aligned text.
     */
    arg(value: String, fieldWidth?: Number): string;
    arg(value: Number, fieldWidth?: Number): string;
}
declare type QString = String;
declare class DzError {
    valueOf(): number;
}
declare class DzMessageBox extends QObject {
    /** Properties */
    /** Methods */
    information(text: String, title: String, button0: String, button1?: String, button2?: String, button3?: String): number;
    question(text: String, title: String, button0: String, button1?: String, button2?: String, button3?: String): number;
    warning(text: String, title: String, button0: String, button1?: String, button2?: String, button3?: String): number;
    critical(text: String, title: String, button0: String, button1?: String, button2?: String, button3?: String): number;
}
declare var MessageBox: DzMessageBox;
declare function decodeURI(encodedURI: String): String;
declare function decodeURIComponent(encodedURIComponent: String): String;
declare function encodeURI(uri: String): String;
declare function encodeURIComponent(uriComponent: String): String;
declare function escape(text: String): String;
declare function eval(str: String): Object;
declare function isFinite(expression: String): Boolean;
declare function isNaN(expression: String): Boolean;
declare function parseFloat(str: String): Number;
declare function parseInt(str: String, optBase: Number): Number;
declare function unescape(text: String): String;
declare function gc(): void;
declare function print(...expression: any[]): void;
declare function qsTr(sourceText: String): String;
declare function qsTranslate(sourceText: String): String;
declare function qsTrId(id: String): String;
declare function acceptUndo(caption: String): void;
declare function backgroundProgressIsActive(): Boolean;
declare function backgroundProgressIsCancelled(): Boolean;
declare function beginUndo(): void;
declare function cancelUndo(): void;
declare function clearBusyCursor(): void;
declare function clearUndoStack(): void;
declare function connect(sender: Object, signal: String, receiver: Object, slot: String): void;
declare function connect(sender: Object, signal: String, functionRef: any): void;
declare function ctrlPressed(): Boolean;
declare function debug(expression: any): void;
declare function disconnect(sender: Object, signal: String, receiver: Object, slot: String): void;
declare function disconnect(sender: Object, signal: String, functionRef: any): void;
declare function dropUndo(): void;
declare function finishBackgroundProgress(): void;
declare function finishProgress(): void;
declare function getArguments(): String[];
declare function getErrorMessage(errCode: DzError): String;
declare function getObjectParent(obj: QObject): QObject;
declare function getScriptAuthor(): DzAuthor;
declare function getScriptFileName(): String;
declare function getScriptType(): String;
declare function getScriptVersionString(): String;
declare function include(scriptPath: String): void;
declare function pointersAreEqual(ptr1: QObject, ptr2: QObject): Boolean;
declare function processEvents(): void;
declare function progressIsActive(): Boolean;
declare function progressIsCancelled(): Boolean;
declare function setBusyCursor(): void;
declare function shiftPressed(): Boolean;
declare function startBackgroundProgress(info: String, totalSteps: Number, isCancellable: Boolean): void;
declare function startProgress(info: String, totalSteps?: Number, isCancellable?: Boolean, showTimeElapsed?: Boolean): void;
declare function stepBackgroundProgress(numSteps: Number): void;
declare function stepProgress(numSteps?: Number): void;
declare function updateBackgroundProgress(position: Number): void;
declare function updateProgress(position: Number): void;
declare class DzTime extends QObject {
    valueOf(): number;
}
declare var Scene: DzScene;
declare var App: DzApp;
declare var MainWindow: DzMainWindow;
declare class DzAbstractAssetContainerPtr {
}
declare class DzAbstractBuildGeometryFilter {
}
declare class DzAbstractShapeInstance {
}
declare class DzAbstractShapeInstanceListIterator {
}
declare class DzActionMenuItem {
}
declare class DzAsset {
}
declare class DzAssetIOFilter {
}
declare class DzAssetOutFile {
}
declare class DzAssetPtr {
}
declare class DzAudioClip {
}
declare class DzAudioImporter {
}
declare class DzBone {
}
declare class DzCallBack {
}
declare class DzContentFile {
}
declare class DzContentFilePtr {
}
declare class DzController {
}
declare class DzControllerListIterator {
}
declare class DzCoShaderInfo {
}
declare class DzDBCategoriesTable {
}
declare class DzDBCompatibilityBaseTable {
}
declare class DzDBContentTable {
}
declare class DzDBObjectBasePtr {
}
declare class DzDevice {
}
declare class DzDockAreaColumn {
}
declare class DzDockBar {
}
declare class DzDrawStyle {
}
declare class DzElementClipboard {
}
declare class DzElementData {
}
declare class DzElementListIterator {
}
declare class DzElementPropertyIOFilter {
}
declare class DzERCLink {
}
declare class DzExporter {
}
declare class DzFileFilter {
}
declare class DzFileIOSettings {
}
declare class DzFileLoadFilter {
}
declare class DzFolderAssetContainer {
}
declare class DzGeometry {
}
declare class DzGeometryRegion {
}
declare class DzHelpContentsItem {
}
declare class DzInFile {
}
declare class DzLayeredImage {
}
declare class DzLight {
}
declare class DzMaterialPtr {
}
declare class DzMatrix4 {
}
declare class DzMenu {
}
declare class DzOpenMethod {
}
declare class DzOutFile {
}
declare class DzPane {
}
declare class DzPaneGroup {
}
declare class DzPaneGroupDlg {
}
declare class DzPersistentMenu {
}
declare class DzPixmapPair {
}
declare class DzPlugin {
}
declare class DzPnt3 {
}
declare class DzProductHolderContainerPtr {
}
declare class DzPropertyClipboard {
}
declare class DzPropertyDefinition {
}
declare class DzPropertyListIterator {
}
declare class DzPropertyListNode {
}
declare class DzPropertyListNodePtr {
}
declare class DzPropertySettings {
}
declare class DzPropertyWgt {
}
declare class DzRenderer {
}
declare class DzRenderHandler {
}
declare class DzRenderSettings {
}
declare class DzRigidityGroup {
}
declare class DzRigidityGroupListIterator {
}
declare class DzSaveFilter {
}
declare class DzSceneAssetFileInfo {
}
declare class DzSceneAssetFileInfoData {
}
declare class DzSceneData {
}
declare class DzSearchContainerPtr {
}
declare class DzSelectionMap {
}
declare class DzShapeListIterator {
}
declare class DzSkin {
}
declare class DzSurfacesPane {
}
declare class DzTextureComponent {
}
declare class DzTextureMask {
}
declare class DzTextStyle {
}
declare class DzToolBar {
}
declare class DzUIPopUpWgt {
}
declare class DzUri {
}
declare class DzUserDrawStyle {
}
declare class DzUVSet {
}
declare class DzVersion {
}
declare class DzVertexMesh {
}
declare class DzVertexMeshPtr {
}
declare class DzVideoClip {
}
declare class DzVideoExporter {
}
declare class DzView {
}
declare class DzViewTool {
}
declare class DzWeightMap {
}
declare class DzWidgetGroup {
}
declare class DzWSModifier {
}
declare class Q_DECL_DEPRECATED {
}
declare class Q_PRIVATE_SLOT {
}
declare class Q3ListBoxItem {
}
declare class QAbstractItemModel {
}
declare class QAction {
}
declare class QActionEvent {
}
declare class QButtonGroup {
}
declare class QByteArray {
}
declare class QChar {
}
declare class QClipboard {
}
declare class QContextMenuEvent {
}
declare class QCursor {
}
declare class QDateTime {
}
declare class QDecoration {
}
declare class QDesktopWidget {
}
declare class QDockWidget {
}
declare class QDomElement {
}
declare class QDragEnterEvent {
}
declare class QDragLeaveEvent {
}
declare class QDragMoveEvent {
}
declare class QDropEvent {
}
declare class QEvent {
}
declare class QFocusEvent {
}
declare class QFontMetrics {
}
declare class QGLColormap {
}
declare class QGLContext {
}
declare class QGLFormat {
}
declare class QIcon {
}
declare class QInputContext {
}
declare class QIODevice {
}
declare class QKeyEvent {
}
declare class QKeySequence {
}
declare class QLocale {
}
declare class QMacCompatGLenum {
}
declare class QMacCompatGLint {
}
declare class QMacCompatGLuint {
}
declare class QMenu {
}
declare class QMimeData {
}
declare class QMimeSource {
}
declare class QModelIndex {
}
declare class QMouseEvent {
}
declare class QMovie {
}
declare class QPaintEngine {
}
declare class QPainter {
}
declare class QPaintEvent {
}
declare class QPalette {
}
declare class QPicture {
}
declare class QPlatformNativeInterface {
}
declare class QPointF {
}
declare class QPolygonF {
}
declare class QPostEvent {
}
declare class QRect {
}
declare class QRectF {
}
declare class QResizeEvent {
}
declare class QRgb {
}
declare class QScrollBar {
}
declare class QSessionManager {
}
declare class QShowEvent {
}
declare class QStatusBar {
}
declare class QStyle {
}
declare class QStyleOption {
}
declare class QStyleOptionButton {
}
declare class QStyleOptionMenuItem {
}
declare class QStyleOptionTabWidgetFrame {
}
declare class QStyleOptionViewItem {
}
declare class QSymbianEvent {
}
declare class QT_DEPRECATED {
}
declare class QT3_SUPPORT {
}
declare class QT3_SUPPORT_CONSTRUCTOR {
}
declare class QTabBar {
}
declare class QTabletEvent {
}
declare class QTextCodec {
}
declare class QTimerEvent {
}
declare class QToolBar {
}
declare class QTranslator {
}
declare class QUrl {
}
declare class QVariant {
}
declare class QWheelEvent {
}
declare class QWSDisplay {
}
declare class QWSEvent {
}
declare class QTableEvent {
}
declare class DzScriptContext {
}
declare class DzToolbar {
}
declare class DzShape extends DzElement {
    /** Properties */
    /** Methods */
    addMaterial(mat: DzMaterial): DzError;
    addRigidityGroup(group: DzRigidityGroup): void;
    addShapeInstance(instance: DzAbstractShapeInstance): void;
    assemblyChanged(): void;
    buildRegionMaps(): void;
    buildRegionMapsRecurse(region: DzGeometryRegion): void;
    clearMaterialSelection(): void;
    createMaterial(name: QString): DzError;
    draw(style: DzDrawStyle, wsGeom: DzGeometry): void;
    findAssemblyMaterialIndex(mat: DzMaterial): number;
    findLeafRegion(regionName: QString): DzGeometryRegion;
    findMaterial(name: QString): DzMaterial;
    findMaterialIndex(mat: DzMaterial): number;
    findMaterialIndex(name: QString): number;
    findMaterialIndex(mat: DzMaterial): number;
    findMaterialIndex(name: QString): number;
    findRigidityGroup(group: QString): DzRigidityGroup;
    geomChanged(): void;
    geomTopologyChanged(): void;
    geometryRegionChanged(): void;
    geometryRegionSelectionChanged(): void;
    getAllMaterials(): QObject[];
    getAllMaterials(matPtrs: DzMaterialPtr[]): void;
    getAllMaterials(): QObject[];
    getAllMaterials(matPtrs: DzMaterialPtr[]): void;
    getAllRenderAssemblyPrioritizedMaterials(prioritizedMaterials: DzMaterialPtr[]): void;
    getAllRenderPrioritizedMaterials(): QObject[];
    getAllRenderPrioritizedMaterials(prioritizedMaterials: DzMaterialPtr[]): void;
    getAllRenderPrioritizedMaterials(): QObject[];
    getAllRenderPrioritizedMaterials(prioritizedMaterials: DzMaterialPtr[]): void;
    getAllSelectedMaterials(): QObject[];
    getAllSelectedMaterials(matPtrs: DzMaterialPtr[]): void;
    getAllSelectedMaterials(): QObject[];
    getAllSelectedMaterials(matPtrs: DzMaterialPtr[]): void;
    getAssemblyGeometry(): DzGeometry;
    getAssemblyMaterial(which: number): DzMaterial;
    getCurrentShapeForNode(node: DzNode): DzShape;
    getFacetToLeafMap(): any;
    getGeometry(): DzGeometry;
    getGeometryRegion(): DzGeometryRegion;
    getGeometryRegionLeafSelection(): DzGeometryRegion;
    getGeometryRegionSelection(): DzGeometryRegion;
    getLeafRegion(index: number): DzGeometryRegion;
    getMaterial(which: number): DzMaterial;
    getModifiableAssemblyGeom(isRender: boolean): DzVertexMesh;
    getModifiableGeom(isRender: boolean, currentCache: DzVertexMesh): DzVertexMesh;
    getNode(): DzNode;
    getNumAssemblyMaterials(): number;
    getNumFacetToRegionLeafValues(): number;
    getNumLeafRegions(): number;
    getNumMaterials(): number;
    getNumRigidityGroups(): number;
    getNumSelectedMaterials(): number;
    getNumShapeInstances(): number;
    getRenderPrioritizedMaterials(inputMaterials: DzMaterialPtr[], prioritizedMaterials: DzMaterialPtr[]): void;
    getRigidityGroup(which: number): DzRigidityGroup;
    getRigidityGroups(): DzRigidityGroup[];
    getRigidityMap(): DzWeightMap;
    getSelectedMaterial(which: number): DzMaterial;
    getShapeInstance(which: number): DzAbstractShapeInstance;
    getShapeInstance(): DzAbstractShapeInstance[];
    hasAssemblyGeometry(): boolean;
    insertMaterial(newmat: DzMaterial, index: number): DzError;
    invalidateGeomCaches(): void;
    invalidateWorkingMesh(): void;
    materialAdded(mat: DzMaterial): void;
    materialChanged(): void;
    materialListChanged(): void;
    materialRemoved(mat: DzMaterial): void;
    materialSelected(mat: DzMaterial): void;
    materialSelectionChanged(): void;
    materialUnselected(mat: DzMaterial): void;
    mergesSnapGeometry(): boolean;
    modifyGeometryAsset(): void;
    moveGeometryRegion(newShape: DzShape): void;
    rebuildBaseMap(whichUVSet: number): void;
    removeMaterial(mat: DzMaterial): DzError;
    removeMaterialByName(material: QString, defaultMaterial: QString): DzError;
    removeRigidityGroup(group: DzRigidityGroup): void;
    removeShapeInstance(instance: DzAbstractShapeInstance): boolean;
    render(settings: DzRenderSettings, wsGeom: DzGeometry): void;
    replaceMaterial(current: DzMaterial, newMat: DzMaterial): DzError;
    rigidityGroupIterator(): DzRigidityGroupListIterator;
    rigidityGroupListChanged(): void;
    rigidityMapChanged(): void;
    setGeometryRegion(region: DzGeometryRegion): void;
    setGeometryRegionLeafSelection(sel: DzGeometryRegion): void;
    setGeometryRegionSelection(sel: DzGeometryRegion): void;
    setRigidityMap(map: DzWeightMap): void;
    shapeInstancesIterator(): DzAbstractShapeInstanceListIterator;
    smoothingChanged(): void;
    updateGeom(): void;
    updateMaterialSelection(mat: DzMaterial, onOff: boolean): void;
    updateMaterials(): void;
    updateRegionMap(): void;
    updateSmoothing(): void;
    updateUVs(): void;
    uvsChanged(): void;
}
declare class DzShaderMaterial extends DzMaterial {
    /** Methods */
    setMaterialName(name: QString): any;
    setDefinitionFile(definitionFile: QString, f1?: boolean, f2?: boolean): any;
    addShader(rslShader: DzRSLShader): any;
    getNumShaders(): number;
    getShader(index: number): DzRSLShader;
    removeShader(rslShader: DzRSLShader): any;
    setNeedsTangentSpaceParams(needsTangentSpaceParams: boolean): any;
    getDiffuseProperty(): any;
    getOpacityProperty(): any;
    getDefinitionFile(): any;
    getAllImages(list: DzTexturePtr[]): any;
    allowsAutoBake(): boolean;
    unsetRender(DzRenderSettings: any): void;
}
declare class DzRSLShader {
}
declare class DzTexturePtr {
}
declare class DzUberIrayMaterial extends DzMaterial {
    /** Methods */
    openGLPreviewOpacity: any;
    openGLIOR: any;
    getBumpStrength(): any;
    getBumpMap(): any;
    getDisplacementStrength(): any;
    getDisplacementMin(): any;
    getDisplacementMax(): any;
    getDisplacementMap(): any;
    getHorizontalOffset(): any;
    getHorizontalTiles(): any;
    getVerticalOffset(): any;
    getVerticalTiles(): any;
    restoreDefaults(): any;
    topCoatLayerModeChanged(): void;
    topCoatLayerWeightChanged(topCoatLayerWeight?: boolean): void;
    metallicFlakeLayerWeightChanged(metallicFlakeLayerWeight?: boolean): void;
    layerMixingModeChanged(): void;
    shareGlossyInputsChanged(shareGlossyInputs?: boolean): void;
    volumeEnableChanged(): void;
    emissionColorChanged(): void;
    emissionFluxUnitChanged(emissionFluxUnit?: boolean): void;
    refractionWeightChanged(refractionWeight?: boolean): void;
    backscatteringWeightChanged(): void;
    displacementWeightChanged(): void;
    translucencyWeightChanged(): void;
    diffuseColorTransmitChanged(diffuseColorTransmit?: boolean): void;
    diffuseStrengthChanged(): void;
    glossyRoughnessChanged(): void;
    glossyGlossinessChanged(): void;
    backscatterRoughnessChanged(): void;
    backscatterGlossinessChanged(): void;
    updateGlossyRotation(): any;
    baseThinFilmThicknessChanged(): void;
    glossyWeightChanged(glossyWeight?: boolean): void;
    refractionGlossinessChanged(refractionGlossiness?: boolean): void;
    refractionRoughnessChanged(refractionRoughness?: boolean): void;
}
declare class DzBrickMaterial extends DzMaterial {
    /** Methods */
    brickRemoved(brick: DzShaderBrick): any;
    brickAdded(brick: DzShaderBrick): any;
    generateFilesStarted(): any;
    generateFilesFinished(): any;
    getExtension(): QString;
    getBrickUserName(): QString;
    setBrickUserName(brickUserName: QString): void;
    getNumBrickSets(): number;
    getBrickSet(brickSet: number): any;
    addBrick(brick: DzShaderBrick): any;
    getBrick(brick: number): any;
    getBrickIDs(): any;
    getBrickIDs(ids: number[]): any;
    deleteBrick(brick: number): any;
    deleteBrick(brick: DzShaderBrick): any;
    deleteAllBricks(): any;
    invalidateSets(): any;
    moveBrick(brick: number, brickUser: IDzBrickUser): any;
    getIdentifier(): any;
    setIdentifier(uuid: QUuid): any;
    updateIdentifierOnSetInvalidate(update: boolean): any;
    isInEditMode(): any;
    startEditMode(): any;
    endEditMode(): any;
    usesLocalShaderSpace(): any;
    applyToScene(): any;
    fromScene(): any;
    unsetRender(settings: DzRenderSettings): any;
    removeSet(brickSet: DzBrickSet): any;
    brickIDChanged(brickId: number): any;
    setMaterialName(materialName: QString): any;
    setNeedsTangentSpaceParams(needsTangentSpaceParams: boolean): any;
    allowsAutoBake(): boolean;
    convertDefaultMaterial(material: DzDefaultMaterial): any;
    convertUberIrayMaterial(material: DzMaterial): any;
    setNeedsPtexParams(needsPtexParams: boolean): any;
}
declare class IDzBrickUser {
}
declare class QUuid {
}
declare class DzBrickSet {
}
/** Lo comente para en un futuro si se necesita completarlo */
declare class DzShaderBrick extends DzElement {
}
declare class QColor extends QObject {
    red: number;
    blue: number;
    green: number;
    alpha: number;
    hue: number;
    name: string;
    rgb: number;
    saturation: number;
    value: number;
    dark(): any;
    light(): any;
    setRgb(r: number, g: number, b: number): any;
    setRgb(r: number, g: number, b: number, a: number): any;
    setRgb(value: number): any;
}
declare class QImage extends QPaintDevice {
    /** Properties */
    alphaBuffer: boolean;
    depth: number;
    dotsPerMeterX: number;
    dotsPerMeterY: number;
    height: number;
    numColors: number;
    width: number;
    /** Methods */
    constructor(filename: string);
    allGray(): boolean;
    alphaChannel(): QImage;
    bitPlaneCount(): number;
    bits(): any;
    byteCount(): number;
    bytesPerLine(): number;
    cacheKey(): number;
    color(i: number): QRgb;
    colorCount(): number;
    constBits(): any;
    constScanLine(obj: number): any;
    convertDepth(obj: number, flags: number): QT3_SUPPORT;
    convertDepthWithPalette(obj: number, p: QRgb, pc: number, flags: number): QT3_SUPPORT;
    copy(rect: QRect): QImage;
    createAlphaMask(flags: number): QImage;
    createHeuristicMask(clipTight: boolean): QImage;
    createMaskFromColor(color: QRgb, mode: number): QImage;
    detach(): void;
    fill(color: number): void;
    fill(color: QColor): void;
    fill(pixel: number): void;
    fill(color: number): void;
    fill(color: QColor): void;
    fill(pixel: number): void;
    fill(color: number): void;
    fill(color: QColor): void;
    fill(pixel: number): void;
    format(): number;
    hasAlphaBuffer(): QT3_SUPPORT;
    hasAlphaChannel(): boolean;
    invertPixels(InvertRgb: number): void;
    isDetached(): boolean;
    isGrayscale(): boolean;
    isNull(): boolean;
    jumpTable(): QT3_SUPPORT;
    jumpTable(): QT3_SUPPORT;
    jumpTable(): QT3_SUPPORT;
    jumpTable(): QT3_SUPPORT;
    load(device: QIODevice, format: string): boolean;
    load(fileName: QString, format: string): boolean;
    load(device: QIODevice, format: string): boolean;
    load(fileName: QString, format: string): boolean;
    mirrored(horizontally: boolean, vertically: boolean): QImage;
    numBytes(): QT_DEPRECATED;
    pixel(pt: QPoint): QRgb;
    pixel(x: number, y: number): QRgb;
    pixel(pt: QPoint): QRgb;
    pixel(x: number, y: number): QRgb;
    pixelIndex(pt: QPoint): number;
    pixelIndex(x: number, y: number): number;
    pixelIndex(pt: QPoint): number;
    pixelIndex(x: number, y: number): number;
    qt_image_colortable(image: QImage): any;
    qt_image_id(image: QImage): any;
    rect(): QRect;
    rgbSwapped(): QImage;
    save(device: QIODevice, format: string, quality: number): boolean;
    save(fileName: QString, format: string, quality: number): boolean;
    scaled(s: QSize, aspectMode: number): QImage;
    scaledToHeight(h: number, mode: number): QImage;
    scaledToWidth(w: number, mode: number): QImage;
    scanLine(obj: number): any;
    serialNumber(): number;
    setAlphaBuffer(obj: boolean): QT3_SUPPORT;
    setAlphaChannel(alphaChannel: QImage): void;
    setColor(i: number, c: QRgb): void;
    setColorCount(obj: number): void;
    setDotsPerMeterX(obj: number): void;
    setDotsPerMeterY(obj: number): void;
    setOffset(obj: QPoint): void;
    setPixel(pt: QPoint, index_or_rgb: number): void;
    setPixel(x: number, y: number, index_or_rgb: number): void;
    setText(key: QString, value: QString): void;
    systemBitOrder(): QT3_SUPPORT;
    text(key: QString): QString;
    textKeys(): QString[];
    textLanguages(): QT_DEPRECATED;
    textList(): QT_DEPRECATED;
    valid(pt: QPoint): boolean;
    valid(x: number, y: number): boolean;
    valid(pt: QPoint): boolean;
    valid(x: number, y: number): boolean;
    canRead(): boolean;
    currentImageNumber(): number;
    currentImageRect(): QRect;
    device(): QIODevice;
    format(): QByteArray;
    imageCount(): number;
    jumpToImage(imageNumber: number): boolean;
    jumpToNextImage(): boolean;
    loopCount(): number;
    nextImageDelay(): number;
    read(image: QImage): boolean;
    setDevice(device: QIODevice): void;
    setFormat(format: QByteArray): void;
    setFormat(format: QByteArray): void;
    setFormat(format: QByteArray): void;
    setFormat(format: QByteArray): void;
    write(image: QImage): boolean;
    keys(): QString[];
    autoDetectImageFormat(): boolean;
    backgroundColor(): QColor;
    canRead(): boolean;
    clipRect(): QRect;
    currentImageNumber(): number;
    currentImageRect(): QRect;
    decideFormatFromContent(): boolean;
    device(): QIODevice;
    errorString(): QString;
    fileName(): QString;
    format(): QByteArray;
    imageCount(): number;
    imageFormat(): number;
    imageFormat(device: QIODevice): QByteArray;
    imageFormat(fileName: QString): QByteArray;
    imageFormat(): number;
    imageFormat(device: QIODevice): QByteArray;
    imageFormat(fileName: QString): QByteArray;
    imageFormat(): number;
    imageFormat(device: QIODevice): QByteArray;
    imageFormat(fileName: QString): QByteArray;
    jumpToImage(imageNumber: number): boolean;
    jumpToNextImage(): boolean;
    loopCount(): number;
    nextImageDelay(): number;
    quality(): number;
    read(): QImage;
    read(image: QImage): boolean;
    read(): QImage;
    read(image: QImage): boolean;
    scaledClipRect(): QRect;
    scaledSize(): QSize;
    setAutoDetectImageFormat(enabled: boolean): void;
    setBackgroundColor(color: QColor): void;
    setClipRect(rect: QRect): void;
    setDecideFormatFromContent(ignored: boolean): void;
    setDevice(device: QIODevice): void;
    setFileName(fileName: QString): void;
    setFormat(format: QByteArray): void;
    setQuality(quality: number): void;
    setScaledClipRect(rect: QRect): void;
    setScaledSize(size: QSize): void;
    supportsAnimation(): boolean;
    text(key: QString): QString;
    textKeys(): QString[];
    canWrite(): boolean;
    compression(): number;
    description(): QString;
    device(): QIODevice;
    errorString(): QString;
    fileName(): QString;
    format(): QByteArray;
    gamma(): number;
    quality(): number;
    setCompression(compression: number): void;
    setDescription(description: QString): void;
    setDevice(device: QIODevice): void;
    setFileName(fileName: QString): void;
    setFormat(format: QByteArray): void;
    setGamma(gamma: number): void;
    setQuality(quality: number): void;
    setText(key: QString, text: QString): void;
    write(image: QImage): boolean;
}
declare class DzGeometryShellNode extends DzNode {
    /** Properties */
    /** Methods */
    addFacetGroupVisiblity(name: QString): void;
    addMaterialGroupVisiblity(name: QString): void;
    createProperties(): void;
    getIcon(): QIcon;
    getPixmap(state: number): QPixmap;
    getShellNodeControl(): DzNodeProperty;
    removeFacetGroupVisiblity(name: QString): void;
    removeMaterialGroupVisiblity(name: QString): void;
    setShellVisiblity(newMesh: DzFacetMesh): void;
    setUpFaceGroups(mesh: DzFacetMesh): void;
    setUpMaterials(mesh: DzFacetMesh): void;
    targetNodeChanged(): void;
    tgtCacheInvalidated(): void;
}
declare class DzNodeProperty extends DzProperty {
    /** Properties */
    /** Methods */
    aboutToChange(): void;
    exclude(node: DzNode): void;
    getDefaultValue(): DzNode;
    getKeyValue(i: number): DzNode;
    getValue(tm: DzTime): DzNode;
    getValue(): DzNode;
    getValue(tm: DzTime): DzNode;
    getValue(): DzNode;
    isExcluded(node: DzNode): boolean;
    setDefaultValue(val: DzNode): void;
    setKeyValue(which: number, val: DzNode): void;
    setValue(val: DzNode): void;
    setValue(tm: DzTime, val: DzNode): void;
    setValue(val: DzNode): void;
    setValue(tm: DzTime, val: DzNode): void;
    changeNode(node: DzNode): void;
    clearObject(): void;
    isExcluded(node: DzNode): boolean;
    propertyChangeNotify(): void;
    setValue(val: DzNode): void;
    showEvent(e: QShowEvent): void;
    updateNodeList(): void;
    updateValue(): void;
}
declare class DzFacetMesh {
}
declare class DzModifier extends DzElement {
    /** Properties */
    /** Methods */
    aboutToBeRemoved(): void;
    added(): void;
    apply(geom: DzVertexMesh, node: DzNode): DzError;
    applyInverse(geom: DzVertexMesh, node: DzNode): DzError;
    currentValueChanged(): void;
    isWeightMapModifier(): boolean;
    removed(): void;
    setIsWeightMapModifier(onoff: boolean): void;
    getMorph(): DzMorph;
    getParentUri(morph: DzMorph): QString;
    setOverrideParentPath(parentPath: QString): void;
    writeModifierInstances(io: any): boolean;
}
declare class DzPushModifier extends DzModifier {
    /** Properties */
    /** Methods */
    assetModified(): void;
    assetWasSaved(): void;
    createProperties(): void;
    getAssetType(): any;
    getValueChannel(): DzFloatProperty;
    toQObject(): QObject;
}
declare class DzMorph {
}
declare class DzStringHelper extends QObject {
    objectName: string;
    stripSpaces(value: QString): QString;
    changeSpecialChars(value: QString, special: QString): any;
    prependCharsIfNumeric(value: QString, chars: QString): any;
    stripCRLF(value: QString): any;
    getWords(QString: any, bool: any): any;
    getMatches(value: QString, search: QString): any;
    indentString(value: QString, indent: number): any;
    replaceAll(value: QString, search: QString, replace: QString): any;
    name: string;
}
declare class DzArrayHelper extends QObject {
    objectName: string;
    addToArray<T>(list: T[], item: T): T[];
    isInArray<T>(list: T[], item: T): boolean;
    isInArrayByName<T>(list: T[], name: QString): number;
    name: string;
}
declare class DzPresetHelper {
    static Ignore: number;
    static Replace: number;
    objectName: string;
    clearFoundImages(): any;
    setShouldAskForImages(bool: any): any;
    getShouldAskForImages(): boolean;
    setTargetElement(element: DzElement): any;
    getTargetElement(): DzElement;
    collectMaterials(node: DzNode, flag: boolean, selected: boolean, root: boolean): any;
    getCollectedMaterials(): DzMaterial[];
    getCollectedMaterialShapes(): DzShape[];
    clearCollectedMaterials(): any;
    checkAnimationRange(int: any): any;
    getImage(QString: any, float: any, int: any): any;
    getImage(QString: any, float: any): any;
    getImage(QString: any): any;
    getMapSetting(): number;
    setMapSetting(MapSetting: any): any;
    setColorProperty(name: QString, list: QVariant[], value?: QString): any;
    setNumericProperty(name: QString, list: QVariant[], value?: QString): any;
    setNumericPropertyWithAttributes(name: QString, flag: boolean, d: number, d2: number, list: QVariant[], value?: QString): any;
    setPropertyWithString(property: QString, value: QString): any;
    getStartTime(): DzTime;
    setStartTime(DzTime: any): any;
    getDoMorphs(): boolean;
    setDoMorphs(bool: any): any;
    getXRot(): boolean;
    getYRot(): boolean;
    getZRot(): boolean;
    getXPos(): boolean;
    getYPos(): boolean;
    getZPos(): boolean;
    getGScl(): boolean;
    getXScl(): boolean;
    getYScl(): boolean;
    getZScl(): boolean;
    getLimits(): boolean;
    getTransforms(): boolean;
    setXRot(bool: any): any;
    setYRot(bool: any): any;
    setZRot(bool: any): any;
    setXPos(bool: any): any;
    setYPos(bool: any): any;
    setZPos(bool: any): any;
    setGScl(bool: any): any;
    setXScl(bool: any): any;
    setYScl(bool: any): any;
    setZScl(bool: any): any;
    setLimits(bool: any): any;
    setTransforms(bool: any): any;
    name: string;
    className(): any;
}
declare class DzSettingsHelper extends QObject {
    objectName: string;
    set(toolName: QString, name: QString, value: QVariant): any;
    get(toolName: QString, name: QString, value: QVariant): any;
    hasValue(toolName: QString, name: QString): any;
    name: string;
}
declare class DzSceneHelper extends QObject {
    objectName: string;
    setUniqueName(node: DzNode, name: QString): any;
    getUniqueMorphName(node: DzNode, name: QString): any;
    collectNodes(flag1: boolean, flag2: boolean, flag3: boolean): any;
    findPropertyInGroup(name: QString, group: DzPropertyGroup, flag1: boolean, flag2: boolean, flag3?: boolean): any;
    findControlProperty(name: QString, node: DzNode, flag1: boolean, flag2?: boolean): any;
    createMorph(node: DzNode, name: QString, list: QVariant[], flag: boolean): any;
    createLink(node: DzNode, s1: QString, node2: DzNode, s2: QString, n: number, d1: number, d2: number): any;
    isMorphProperty(property: DzProperty): any;
    isNodeProperty(property: DzProperty): any;
    isModifierProperty(property: DzProperty): any;
    isTransformProperty(property: DzProperty): any;
    isDFormModProperty(property: DzProperty): any;
    isLegacyJointProperty(property: DzProperty): any;
    isLegacyProperty(property: DzProperty): any;
    isAtDefaultValue(property: DzProperty): any;
    getLabel(property: DzProperty): any;
    getInternalName(property: DzProperty): any;
    getNodeName(property: DzProperty): any;
    getNodeType(property: DzProperty): any;
    getNode(property: DzProperty): any;
    getDisplayNode(property: DzProperty): any;
    getErcController(property1: DzProperty, property2: DzProperty): any;
    getMin(property: DzProperty): any;
    getMax(property: DzProperty): any;
    getPropertiesOnElement(element: DzElement): any;
    getPropertiesOnNode(property: DzProperty, flag?: boolean): any;
    getPropertiesOnNode(node: DzNode, flag?: boolean): any;
    getPrivatePropertiesOnNode(property: DzProperty): any;
    getPrivatePropertiesOnNode(node: DzNode): any;
    getRegionPropertiesOnNode(node: DzNode): any;
    getRegionPropertiesRecurse(region: DzGeometryRegion): any;
    findPropertyOnNode(name: QString, node: DzNode): any;
    findPropertyOnNodeByLabel(label: QString, node: DzNode): any;
    findPropertyOnNodeByInternalName(name: QString, node: DzNode): any;
    helperCanRemove(property: DzProperty): any;
    helperRemoveProperty(property: DzProperty): any;
    setMin(property: DzProperty, float: any): any;
    setMax(property: DzProperty, float: any): any;
    setMinMax(property: DzProperty, min: number, max: number): any;
    setInternalName(property: DzProperty, name: QString): any;
    setPropertyPath(property: DzProperty, path: QString): any;
    name: string;
}
declare class QPixmap {
    objectName: string;
    depth: number;
    height: number;
    rect: QRect;
    size: QSize;
    width: number;
    constructor(file: QString);
    fill(QColor: any): any;
    isNull(): boolean;
    load(file: QString): any;
    loadFromData(bytearray: QByteArray, name: QString): any;
    resize(width: number, height: number): any;
    resize(size: QSize): any;
    save(name: QString): any;
    name: string;
    className(): any;
}
declare type Pixmap = QPixmap;
declare class DzSettings extends QObject {
    setStringValue(name: QString, value: QString): ISignal;
    setIntValue(name: QString, value: number): ISignal;
    setBoolValue(name: QString, value: boolean): ISignal;
    setFloatValue(name: QString, value: number): ISignal;
    setSettingsValue(name: QString, settings: DzSettings): ISignal;
    setSettingsValue(name: QString): ISignal;
    removeValue(name: QString): ISignal;
    clear(): any;
    getStringValue(name: QString, QString: any): ISignal;
    getStringValue(QString: any): ISignal;
    getIntValue(QString: any, int: any): ISignal;
    getIntValue(QString: any): ISignal;
    getBoolValue(QString: any, bool: any): ISignal;
    getBoolValue(QString: any): ISignal;
    getFloatValue(QString: any, float: any): ISignal;
    getFloatValue(QString: any): ISignal;
    getSettingsValue(QString: any): ISignal;
    getSettingIndex(QString: any): ISignal;
    getNumValues(): any;
    hasKey(QString: any): ISignal;
    getKey(int: any): ISignal;
    getValueType(int: any): ISignal;
    getValue(int: any): ISignal;
    fromString(QString: any): ISignal;
    toString(): any;
    copySetting(name: QString, settings: DzSettings): ISignal;
    copySetting(index: number, settings: DzSettings): ISignal;
    replaceWithSettings(settings: DzSettings): ISignal;
    toScript(name: QString, script: DzScript, n: number, flag?: boolean): ISignal;
    StringValue: number;
    IntValue: number;
    BoolValue: number;
    FloatValue: number;
    SettingsValue: number;
}
declare class DzLayout extends QObject {
    margin: number;
    spacing: number;
    autoAdd: boolean;
    getLayout(): DzLayout;
    addWidget(widget: DzWidget): void;
}
declare class DzGridLayout extends DzLayout {
    constructor(parent: DzWidget);
    constructor(parent: DzLayout);
    setRowStretch(row: number, stretch: number): ISignal;
    setColStretch(col: number, stretch: number): ISignal;
    setRowSpacing(row: number, minSize: number): ISignal;
    setColSpacing(col: number, minSize: number): ISignal;
    rowStretch(row: number): number;
    colStretch(col: number): number;
    rowSpacing(row: number): number;
    colSpacing(col: number): number;
    rowCount(): number;
    colCount(): number;
    addWidget(widget: DzWidget): void;
    addWidget(widget: DzWidget, row: number, col: number, rowSpan?: number, colSpan?: number): void;
    addMultiCellWidget(widget: DzWidget, fromRow: number, toRow: number, fromCol: number, toCol: number): void;
    addLayout(layout: DzLayout, row: number, col: number, rowSpan?: number, colSpan?: number): void;
    addMultiCellLayout(layout: DzLayout, fromRow: number, toRow: number, fromCol: number, toCol: number): void;
}
declare class DzBoxLayout extends DzLayout {
    direction: number;
    addSpacing(spacing: number): ISignal;
    addStretch(stretch?: number): ISignal;
    addStrut(strut: number): ISignal;
    addWidget(widget: DzWidget): void;
    addWidget(widget: DzWidget, row: number): void;
    addLayout(layout: DzLayout, row?: number): void;
    static LeftToRight: number;
    static RightToLeft: number;
    static TopToBottom: number;
    static BottomToTop: number;
}
declare class DzHBoxLayout extends DzBoxLayout {
}
declare class DzVBoxLayout extends DzBoxLayout {
}
declare class DzImporter extends QObject {
}
declare class DzObjImporter extends DzImporter {
    nameChanged(name: QString): any;
    makePersistent(): any;
    iskindof(kind: QString): any;
    getName(): QString;
    getDefaultOptions(settings: DzFileIOSettings): any;
    getOptions(settings: DzFileIOSettings, flag: boolean, name: QString): void;
    showOptions(): any;
    readFile(file: QString, settings?: DzFileIOSettings): any;
    setLoadFilter(filter: DzFileLoadFilter): any;
    getFileLoadFilter(): any;
    addNodetoFilter(node: DzNode): any;
    finishFilter(): any;
    recognize(value: QString): any;
    getNumExtensions(): any;
    getExtension(index: number): any;
    getDescription(): QString;
    readFile(file: QString, shape: DzShape, settings: DzFileIOSettings): any;
}
declare class DzAction extends QObject {
    description: string;
    iconFile: string;
    actionGroup: string;
    defaultMenu: string;
    defaultMenus: any[];
    defaultToolBar: string;
    defaultToolBars: QObject;
    defaultShortcut: string;
    trigger(): void;
    hover(): void;
    setChecked(onOff: boolean): void;
    toggle(): void;
    setEnabled(onOff: boolean): void;
    setDisabled(onOff: boolean): void;
    setOn(onOff: boolean): void;
    setOff(onOff: boolean): void;
    enabled: boolean | ((onOff: boolean) => boolean);
    changed(): void;
    triggered(checked?: boolean): any;
    hovered(): any;
    toggled(checked?: boolean): any;
    activated(n?: number): any;
}
declare class DzFacetShape {
}
declare class DzGeometryImporter {
}
declare class DzDynLodAction extends DzAction {
    checkable: boolean;
    checked: boolean;
    icon: QObject;
    text: string;
    iconText: string;
    toolTip: string;
    statusTip: string;
    whatsThis: string;
    font: QObject;
    shortcut: QObject;
    shortcutContext: number;
    autoRepeat: boolean;
    visible: boolean;
    menuRole: number;
    softKeyRole: number;
    iconVisibleInMenu: boolean;
    priority: number;
    preExecute(): any;
    executeAction(): any;
    toggleAction(bool: any): any;
    addLodLevel(node: DzNode, s1: QString, s2: QString, importer?: DzGeometryImporter, settings?: DzFileIOSettings): any;
    addLodLevel(node: DzNode, facetShape: DzFacetShape, s: QString): any;
    static NoRole: number;
    static TextHeuristicRole: number;
    static ApplicationSpecificRole: number;
    static AboutQtRole: number;
    static AboutRole: number;
    static PreferencesRole: number;
    static QuitRole: number;
    static NoSoftKey: number;
    static PositiveSoftKey: number;
    static NegativeSoftKey: number;
    static SelectSoftKey: number;
    static LowPriority: number;
    static NormalPriority: number;
    static HighPriority: number;
}
declare class DzFigure extends DzNode {
}
declare class DzSkeleton extends DzNode {
}
declare class DzTexture extends DzRefCountedItem {
    static CustomTexture: number;
    static LatLong: number;
    static LightProbe: number;
    static Standard: number;
    assetModified(): void;
    assetWasSaved(): void;
    drawnDataChanged(): void;
    getFilename(): string;
    getGLAlphaTextureSize(): any;
    getGLTextureSize(): any;
    getGamma(): any;
    getImageData(p0: QImage): any;
    getOriginalImageSize(): any;
    getPreviewPixmap(p0: QSize): any;
    getPreviewPixmap(p0: number, p1: number): any;
    getTempFilename(): string;
    getTextureType(): any;
    inherits(): any;
    invalidate(): any;
    loadImageData(p0: QImage): any;
    refresh(): any;
    refreshSources(): any;
    setGamma(p0: number): any;
    setTextureToRefresh(): any;
    setTextureType(p0: number): any;
    tempFilenameChanged(p0: QString): void;
}
declare class DzImageTexture extends QObject {
    objectName: string;
    drawnDataChanged(): any;
    tempFilenameChanged(QString: any): any;
    refresh(): any;
    getFilename(): any;
    getTempFilename(): any;
    getGLTextureSize(): any;
    getGLAlphaTextureSize(): any;
    getOriginalImageSize(): any;
    getPreviewPixmap(size: QSize): any;
    setGamma(float: any): any;
    getGamma(): any;
    getTextureType(): any;
    setTextureType(int: any): any;
    loadImageData(image: QImage): any;
    getImageData(image: QImage): any;
    invalidate(): any;
    refreshSources(): any;
    setTextureToRefresh(): any;
    assetModified(): any;
    assetWasSaved(): any;
    Standard: number;
    LatLong: number;
    LightProbe: number;
    CustomTexture: number;
    name: string;
}
declare class DzLayeredTexture extends DzTexture {
    size: QSize;
    aboutToInsertLayers(p0: number, p1: number): any;
    aboutToRemoveLayers(p0: number, p1: number): any;
    addLayer(p0: DzTextureLayer): any;
    beginEditing(): any;
    copyFrom(p0: DzLayeredTexture): any;
    createLayer(imageFile: QString): DzTextureLayer;
    endEditing(): any;
    findLayer(p0: DzTextureLayer): any;
    getLayer(p0: number): DzTextureLayer;
    getNumLayers(): number;
    getSourceDSI(): any;
    insertLayer(p0: number, p1: DzTextureLayer): any;
    layerListChanged(): void;
    layersInserted(p0: number, p1: number): void;
    layersRemoved(p0: number, p1: number): void;
    moveLayer(p0: number, p1: number): any;
    refeshLayeredTexture(): any;
    removeAllLayers(): any;
    removeLayer(p0: number): any;
    removeLayer(p0: DzTextureLayer): any;
    replaceLayer(p0: DzTextureLayer, p1: DzTextureLayer): any;
    sizeChanged(p0: QSize): void;
    takeLayer(p0: number): any;
}
declare class DzTextureLayer extends QObject {
    static BlendAdd: number;
    static BlendAlpha: number;
    static BlendMultiply: number;
    static BlendSubtract: number;
    static Rot180: number;
    static Rot270: number;
    static Rot90: number;
    static RotNone: number;
    blendMode: number;
    color: QObject;
    enabled: boolean;
    flippedHorizontal: boolean;
    flippedVertical: boolean;
    imageFile: string;
    invert: boolean;
    offset: QPoint;
    opacity: number;
    rotation: number;
    xOffset: number;
    xScale: number;
    yOffset: number;
    yScale: number;
    aboutToChangeMask(p0: DzTextureMask, p1: DzTextureMask): any;
    blendModeChanged(p0: number): void;
    clearMask(): any;
    colorChanged(p0: QColor): void;
    copyFrom(p0: DzTextureComponent): any;
    createMask(p0: QString): any;
    dataChanged(): void;
    enabledChanged(p0: boolean): void;
    flip(p0: boolean, p1: boolean): any;
    flippedHorizontalChanged(p0: boolean): void;
    flippedVerticalChanged(p0: boolean): void;
    getMask(): any;
    imageChanged(p0: QString): void;
    invertedChanged(p0: boolean): void;
    labelChanged(p0: QString): void;
    loadImageData(p0: QImage): any;
    maskChanged(p0: DzTextureMask, p1: DzTextureMask): void;
    needsImageRefresh(): void;
    needsRefresh(): void;
    offsetChanged(p0: QPoint): void;
    opacityChanged(p0: number): void;
    rotationChanged(p0: number): void;
    scaleChanged(p0: number, p1: number): void;
    setMask(p0: DzTextureMask): any;
}
declare class QSize extends QObject {
    height: number;
    width: number;
    translate(): any;
    constructor(w: number, h: number);
    constructor(srcSize: QSize);
}
declare class QPoint extends QObject {
    x: number;
    y: number;
    constructor(x: number, y: number);
    constructor(srcPt: QPoint);
}
declare class DzBasicDialog extends DzDialog {
    addButton(p0: DzButton): any;
    addButton(p0: DzButton, p1: number): any;
    addLayout(p0: DzLayout): any;
    addLayout(p0: DzLayout, p1: number): any;
    addSpacing(p0: number): any;
    addStretch(): any;
    addStretch(p0: number): any;
    addWidget(p0: DzWidget): any;
    addWidget(p0: DzWidget, p1: number): any;
    applyClicked(): void;
    enableApplyButton(p0: boolean): any;
    enableCancelButton(p0: boolean): any;
    enableHelpButton(p0: boolean): any;
    setAcceptButtonEnabled(p0: boolean): void;
    setAcceptButtonText(p0: QString): any;
    setApplyButtonEnabled(p0: boolean): void;
    setApplyButtonText(p0: QString): any;
    setCancelButtonEnabled(p0: boolean): void;
    setCancelButtonText(p0: QString): any;
    setHelpButtonEnabled(p0: boolean): void;
    showAcceptButton(p0: boolean): any;
    showApplyButton(p0: boolean): any;
    showCancelButton(p0: boolean): any;
    showHelpButton(p0: boolean): any;
}
declare class DzScrollArea extends DzWidget {
    alignment: number;
    widgetResizable: boolean;
    ensureVisible(p0: number, p1: number): any;
    ensureVisible(p0: number, p1: number, p2: number): any;
    ensureVisible(p0: number, p1: number, p2: number, p3: number): any;
    ensureWidgetVisible(p0: DzWidget): any;
    ensureWidgetVisible(p0: DzWidget, p1: number): any;
    ensureWidgetVisible(p0: DzWidget, p1: number, p2: number): any;
    hideFrame(): any;
    setHorizontalScrollbarDisplay(p0: boolean): any;
    setVerticalScrollbarDisplay(p0: boolean): any;
    setWidget(p0: DzWidget): any;
}
declare class QFont extends QObject {
    bold: boolean;
    family: string;
    italic: boolean;
    pixelSize: number;
    pointSize: number;
    strikeout: boolean;
    underline: boolean;
}
declare class Font extends QFont {
}
declare class DzProcess extends QObject {
    static DupStderr: number;
    static Stderr: number;
    static Stdin: number;
    static Stdout: number;
    arguments: QObject;
    communication: number;
    exitStatus: number;
    name: string;
    normalExit: boolean;
    objectName: string;
    running: boolean;
    workingDirectory: string;
    canReadLineStderr(): any;
    canReadLineStdout(): any;
    className(): any;
    closeStdin(): any;
    deleteLater(): any;
    destroyed(): void;
    destroyed(p0: QObject): void;
    inherits(): any;
    kill(): any;
    launch(p0: QString): any;
    launch(p0: QString, p1: QString[]): any;
    launchFinished(): void;
    processExited(): void;
    readLineStderr(): any;
    readLineStdout(): any;
    readStderr(): any;
    readStdout(): any;
    readyReadStderr(): any;
    readyReadStdout(): any;
    start(): any;
    start(p0: QString[]): any;
    tryTerminate(): any;
    writeToStdin(p0: QString): any;
    wroteToStdin(): any;
}
